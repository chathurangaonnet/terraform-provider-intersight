/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-08T07:46:03Z.
 *
 * API version: 0.0.1-15983
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// StorageVirtualDriveConfig The type models a single virtual drive that needs to be created through this policy.
type StorageVirtualDriveConfig struct {
	MoBaseComplexType
	// Access policy that host has on this virtual drive.
	AccessPolicy *string `json:"AccessPolicy,omitempty"`
	// The flag enables the use of this virtual drive as a boot drive.
	BootDrive *bool `json:"BootDrive,omitempty"`
	// Disk group policy that has the disk group in which this virtual drive needs to be created.
	DiskGroupName *string `json:"DiskGroupName,omitempty"`
	// Disk group policy that has the disk group in which this virtual drive needs to be created.
	DiskGroupPolicy *string `json:"DiskGroupPolicy,omitempty"`
	// The property expect disk cache policy.
	DriveCache *string `json:"DriveCache,omitempty"`
	// The flag enables this virtual drive to use all the available space in the disk group. When this flag is configured, the size property is ignored.
	ExpandToAvailable *bool `json:"ExpandToAvailable,omitempty"`
	// Desired IO mode - direct IO or cached IO.
	IoPolicy *string `json:"IoPolicy,omitempty"`
	// The name of the virtual drive. The name can be between 1 and 15 alphanumeric characters. Spaces or any special characters other than - (hyphen), _ (underscore), : (colon), and . (period) are not allowed.
	Name *string `json:"Name,omitempty"`
	// Read ahead mode to be used to read data from this virtual drive.
	ReadPolicy *string `json:"ReadPolicy,omitempty"`
	// Virtual drive size in MB. Size is mandatory field unless the 'Expand to Available' option is enabled.
	Size *int64 `json:"Size,omitempty"`
	// Write mode to be used to write data to this virtual drive.
	WritePolicy          *string `json:"WritePolicy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageVirtualDriveConfig StorageVirtualDriveConfig

// NewStorageVirtualDriveConfig instantiates a new StorageVirtualDriveConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageVirtualDriveConfig() *StorageVirtualDriveConfig {
	this := StorageVirtualDriveConfig{}
	var accessPolicy string = "Default"
	this.AccessPolicy = &accessPolicy
	var driveCache string = "Default"
	this.DriveCache = &driveCache
	var ioPolicy string = "Default"
	this.IoPolicy = &ioPolicy
	var readPolicy string = "Default"
	this.ReadPolicy = &readPolicy
	var writePolicy string = "Default"
	this.WritePolicy = &writePolicy
	return &this
}

// NewStorageVirtualDriveConfigWithDefaults instantiates a new StorageVirtualDriveConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageVirtualDriveConfigWithDefaults() *StorageVirtualDriveConfig {
	this := StorageVirtualDriveConfig{}
	var accessPolicy string = "Default"
	this.AccessPolicy = &accessPolicy
	var driveCache string = "Default"
	this.DriveCache = &driveCache
	var ioPolicy string = "Default"
	this.IoPolicy = &ioPolicy
	var readPolicy string = "Default"
	this.ReadPolicy = &readPolicy
	var writePolicy string = "Default"
	this.WritePolicy = &writePolicy
	return &this
}

// GetAccessPolicy returns the AccessPolicy field value if set, zero value otherwise.
func (o *StorageVirtualDriveConfig) GetAccessPolicy() string {
	if o == nil || o.AccessPolicy == nil {
		var ret string
		return ret
	}
	return *o.AccessPolicy
}

// GetAccessPolicyOk returns a tuple with the AccessPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDriveConfig) GetAccessPolicyOk() (*string, bool) {
	if o == nil || o.AccessPolicy == nil {
		return nil, false
	}
	return o.AccessPolicy, true
}

// HasAccessPolicy returns a boolean if a field has been set.
func (o *StorageVirtualDriveConfig) HasAccessPolicy() bool {
	if o != nil && o.AccessPolicy != nil {
		return true
	}

	return false
}

// SetAccessPolicy gets a reference to the given string and assigns it to the AccessPolicy field.
func (o *StorageVirtualDriveConfig) SetAccessPolicy(v string) {
	o.AccessPolicy = &v
}

// GetBootDrive returns the BootDrive field value if set, zero value otherwise.
func (o *StorageVirtualDriveConfig) GetBootDrive() bool {
	if o == nil || o.BootDrive == nil {
		var ret bool
		return ret
	}
	return *o.BootDrive
}

// GetBootDriveOk returns a tuple with the BootDrive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDriveConfig) GetBootDriveOk() (*bool, bool) {
	if o == nil || o.BootDrive == nil {
		return nil, false
	}
	return o.BootDrive, true
}

// HasBootDrive returns a boolean if a field has been set.
func (o *StorageVirtualDriveConfig) HasBootDrive() bool {
	if o != nil && o.BootDrive != nil {
		return true
	}

	return false
}

// SetBootDrive gets a reference to the given bool and assigns it to the BootDrive field.
func (o *StorageVirtualDriveConfig) SetBootDrive(v bool) {
	o.BootDrive = &v
}

// GetDiskGroupName returns the DiskGroupName field value if set, zero value otherwise.
func (o *StorageVirtualDriveConfig) GetDiskGroupName() string {
	if o == nil || o.DiskGroupName == nil {
		var ret string
		return ret
	}
	return *o.DiskGroupName
}

// GetDiskGroupNameOk returns a tuple with the DiskGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDriveConfig) GetDiskGroupNameOk() (*string, bool) {
	if o == nil || o.DiskGroupName == nil {
		return nil, false
	}
	return o.DiskGroupName, true
}

// HasDiskGroupName returns a boolean if a field has been set.
func (o *StorageVirtualDriveConfig) HasDiskGroupName() bool {
	if o != nil && o.DiskGroupName != nil {
		return true
	}

	return false
}

// SetDiskGroupName gets a reference to the given string and assigns it to the DiskGroupName field.
func (o *StorageVirtualDriveConfig) SetDiskGroupName(v string) {
	o.DiskGroupName = &v
}

// GetDiskGroupPolicy returns the DiskGroupPolicy field value if set, zero value otherwise.
func (o *StorageVirtualDriveConfig) GetDiskGroupPolicy() string {
	if o == nil || o.DiskGroupPolicy == nil {
		var ret string
		return ret
	}
	return *o.DiskGroupPolicy
}

// GetDiskGroupPolicyOk returns a tuple with the DiskGroupPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDriveConfig) GetDiskGroupPolicyOk() (*string, bool) {
	if o == nil || o.DiskGroupPolicy == nil {
		return nil, false
	}
	return o.DiskGroupPolicy, true
}

// HasDiskGroupPolicy returns a boolean if a field has been set.
func (o *StorageVirtualDriveConfig) HasDiskGroupPolicy() bool {
	if o != nil && o.DiskGroupPolicy != nil {
		return true
	}

	return false
}

// SetDiskGroupPolicy gets a reference to the given string and assigns it to the DiskGroupPolicy field.
func (o *StorageVirtualDriveConfig) SetDiskGroupPolicy(v string) {
	o.DiskGroupPolicy = &v
}

// GetDriveCache returns the DriveCache field value if set, zero value otherwise.
func (o *StorageVirtualDriveConfig) GetDriveCache() string {
	if o == nil || o.DriveCache == nil {
		var ret string
		return ret
	}
	return *o.DriveCache
}

// GetDriveCacheOk returns a tuple with the DriveCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDriveConfig) GetDriveCacheOk() (*string, bool) {
	if o == nil || o.DriveCache == nil {
		return nil, false
	}
	return o.DriveCache, true
}

// HasDriveCache returns a boolean if a field has been set.
func (o *StorageVirtualDriveConfig) HasDriveCache() bool {
	if o != nil && o.DriveCache != nil {
		return true
	}

	return false
}

// SetDriveCache gets a reference to the given string and assigns it to the DriveCache field.
func (o *StorageVirtualDriveConfig) SetDriveCache(v string) {
	o.DriveCache = &v
}

// GetExpandToAvailable returns the ExpandToAvailable field value if set, zero value otherwise.
func (o *StorageVirtualDriveConfig) GetExpandToAvailable() bool {
	if o == nil || o.ExpandToAvailable == nil {
		var ret bool
		return ret
	}
	return *o.ExpandToAvailable
}

// GetExpandToAvailableOk returns a tuple with the ExpandToAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDriveConfig) GetExpandToAvailableOk() (*bool, bool) {
	if o == nil || o.ExpandToAvailable == nil {
		return nil, false
	}
	return o.ExpandToAvailable, true
}

// HasExpandToAvailable returns a boolean if a field has been set.
func (o *StorageVirtualDriveConfig) HasExpandToAvailable() bool {
	if o != nil && o.ExpandToAvailable != nil {
		return true
	}

	return false
}

// SetExpandToAvailable gets a reference to the given bool and assigns it to the ExpandToAvailable field.
func (o *StorageVirtualDriveConfig) SetExpandToAvailable(v bool) {
	o.ExpandToAvailable = &v
}

// GetIoPolicy returns the IoPolicy field value if set, zero value otherwise.
func (o *StorageVirtualDriveConfig) GetIoPolicy() string {
	if o == nil || o.IoPolicy == nil {
		var ret string
		return ret
	}
	return *o.IoPolicy
}

// GetIoPolicyOk returns a tuple with the IoPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDriveConfig) GetIoPolicyOk() (*string, bool) {
	if o == nil || o.IoPolicy == nil {
		return nil, false
	}
	return o.IoPolicy, true
}

// HasIoPolicy returns a boolean if a field has been set.
func (o *StorageVirtualDriveConfig) HasIoPolicy() bool {
	if o != nil && o.IoPolicy != nil {
		return true
	}

	return false
}

// SetIoPolicy gets a reference to the given string and assigns it to the IoPolicy field.
func (o *StorageVirtualDriveConfig) SetIoPolicy(v string) {
	o.IoPolicy = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageVirtualDriveConfig) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDriveConfig) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageVirtualDriveConfig) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageVirtualDriveConfig) SetName(v string) {
	o.Name = &v
}

// GetReadPolicy returns the ReadPolicy field value if set, zero value otherwise.
func (o *StorageVirtualDriveConfig) GetReadPolicy() string {
	if o == nil || o.ReadPolicy == nil {
		var ret string
		return ret
	}
	return *o.ReadPolicy
}

// GetReadPolicyOk returns a tuple with the ReadPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDriveConfig) GetReadPolicyOk() (*string, bool) {
	if o == nil || o.ReadPolicy == nil {
		return nil, false
	}
	return o.ReadPolicy, true
}

// HasReadPolicy returns a boolean if a field has been set.
func (o *StorageVirtualDriveConfig) HasReadPolicy() bool {
	if o != nil && o.ReadPolicy != nil {
		return true
	}

	return false
}

// SetReadPolicy gets a reference to the given string and assigns it to the ReadPolicy field.
func (o *StorageVirtualDriveConfig) SetReadPolicy(v string) {
	o.ReadPolicy = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *StorageVirtualDriveConfig) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDriveConfig) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *StorageVirtualDriveConfig) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *StorageVirtualDriveConfig) SetSize(v int64) {
	o.Size = &v
}

// GetWritePolicy returns the WritePolicy field value if set, zero value otherwise.
func (o *StorageVirtualDriveConfig) GetWritePolicy() string {
	if o == nil || o.WritePolicy == nil {
		var ret string
		return ret
	}
	return *o.WritePolicy
}

// GetWritePolicyOk returns a tuple with the WritePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageVirtualDriveConfig) GetWritePolicyOk() (*string, bool) {
	if o == nil || o.WritePolicy == nil {
		return nil, false
	}
	return o.WritePolicy, true
}

// HasWritePolicy returns a boolean if a field has been set.
func (o *StorageVirtualDriveConfig) HasWritePolicy() bool {
	if o != nil && o.WritePolicy != nil {
		return true
	}

	return false
}

// SetWritePolicy gets a reference to the given string and assigns it to the WritePolicy field.
func (o *StorageVirtualDriveConfig) SetWritePolicy(v string) {
	o.WritePolicy = &v
}

func (o StorageVirtualDriveConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return []byte{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return []byte{}, errMoBaseComplexType
	}
	if o.AccessPolicy != nil {
		toSerialize["AccessPolicy"] = o.AccessPolicy
	}
	if o.BootDrive != nil {
		toSerialize["BootDrive"] = o.BootDrive
	}
	if o.DiskGroupName != nil {
		toSerialize["DiskGroupName"] = o.DiskGroupName
	}
	if o.DiskGroupPolicy != nil {
		toSerialize["DiskGroupPolicy"] = o.DiskGroupPolicy
	}
	if o.DriveCache != nil {
		toSerialize["DriveCache"] = o.DriveCache
	}
	if o.ExpandToAvailable != nil {
		toSerialize["ExpandToAvailable"] = o.ExpandToAvailable
	}
	if o.IoPolicy != nil {
		toSerialize["IoPolicy"] = o.IoPolicy
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.ReadPolicy != nil {
		toSerialize["ReadPolicy"] = o.ReadPolicy
	}
	if o.Size != nil {
		toSerialize["Size"] = o.Size
	}
	if o.WritePolicy != nil {
		toSerialize["WritePolicy"] = o.WritePolicy
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StorageVirtualDriveConfig) UnmarshalJSON(bytes []byte) (err error) {
	varStorageVirtualDriveConfig := _StorageVirtualDriveConfig{}

	if err = json.Unmarshal(bytes, &varStorageVirtualDriveConfig); err == nil {
		*o = StorageVirtualDriveConfig(varStorageVirtualDriveConfig)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "AccessPolicy")
		delete(additionalProperties, "BootDrive")
		delete(additionalProperties, "DiskGroupName")
		delete(additionalProperties, "DiskGroupPolicy")
		delete(additionalProperties, "DriveCache")
		delete(additionalProperties, "ExpandToAvailable")
		delete(additionalProperties, "IoPolicy")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "ReadPolicy")
		delete(additionalProperties, "Size")
		delete(additionalProperties, "WritePolicy")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageVirtualDriveConfig struct {
	value *StorageVirtualDriveConfig
	isSet bool
}

func (v NullableStorageVirtualDriveConfig) Get() *StorageVirtualDriveConfig {
	return v.value
}

func (v *NullableStorageVirtualDriveConfig) Set(val *StorageVirtualDriveConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageVirtualDriveConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageVirtualDriveConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageVirtualDriveConfig(val *StorageVirtualDriveConfig) *NullableStorageVirtualDriveConfig {
	return &NullableStorageVirtualDriveConfig{value: val, isSet: true}
}

func (v NullableStorageVirtualDriveConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageVirtualDriveConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
