/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-08T07:46:03Z.
 *
 * API version: 0.0.1-15983
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// FirmwareUpgrade Firmware upgrade operation for rack and blade servers that downloads the image located at Cisco/appliance/user provided HTTP repository or uses the image from a network share and upgrade. Direct download is used for upgrade that uses the image from a Cisco repository or an appliance repository. Network share is used for upgrade that use the image from a network share from your data center.
type FirmwareUpgrade struct {
	FirmwareUpgradeBase
	ExcludeComponentList *[]string                            `json:"ExcludeComponentList,omitempty"`
	Device               *AssetDeviceRegistrationRelationship `json:"Device,omitempty"`
	Server               *ComputePhysicalRelationship         `json:"Server,omitempty"`
}

// NewFirmwareUpgrade instantiates a new FirmwareUpgrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirmwareUpgrade() *FirmwareUpgrade {
	this := FirmwareUpgrade{}
	return &this
}

// NewFirmwareUpgradeWithDefaults instantiates a new FirmwareUpgrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirmwareUpgradeWithDefaults() *FirmwareUpgrade {
	this := FirmwareUpgrade{}
	return &this
}

// GetExcludeComponentList returns the ExcludeComponentList field value if set, zero value otherwise.
func (o *FirmwareUpgrade) GetExcludeComponentList() []string {
	if o == nil || o.ExcludeComponentList == nil {
		var ret []string
		return ret
	}
	return *o.ExcludeComponentList
}

// GetExcludeComponentListOk returns a tuple with the ExcludeComponentList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgrade) GetExcludeComponentListOk() (*[]string, bool) {
	if o == nil || o.ExcludeComponentList == nil {
		return nil, false
	}
	return o.ExcludeComponentList, true
}

// HasExcludeComponentList returns a boolean if a field has been set.
func (o *FirmwareUpgrade) HasExcludeComponentList() bool {
	if o != nil && o.ExcludeComponentList != nil {
		return true
	}

	return false
}

// SetExcludeComponentList gets a reference to the given []string and assigns it to the ExcludeComponentList field.
func (o *FirmwareUpgrade) SetExcludeComponentList(v []string) {
	o.ExcludeComponentList = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *FirmwareUpgrade) GetDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.Device == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgrade) GetDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.Device == nil {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *FirmwareUpgrade) HasDevice() bool {
	if o != nil && o.Device != nil {
		return true
	}

	return false
}

// SetDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the Device field.
func (o *FirmwareUpgrade) SetDevice(v AssetDeviceRegistrationRelationship) {
	o.Device = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *FirmwareUpgrade) GetServer() ComputePhysicalRelationship {
	if o == nil || o.Server == nil {
		var ret ComputePhysicalRelationship
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgrade) GetServerOk() (*ComputePhysicalRelationship, bool) {
	if o == nil || o.Server == nil {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *FirmwareUpgrade) HasServer() bool {
	if o != nil && o.Server != nil {
		return true
	}

	return false
}

// SetServer gets a reference to the given ComputePhysicalRelationship and assigns it to the Server field.
func (o *FirmwareUpgrade) SetServer(v ComputePhysicalRelationship) {
	o.Server = &v
}

func (o FirmwareUpgrade) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedFirmwareUpgradeBase, errFirmwareUpgradeBase := json.Marshal(o.FirmwareUpgradeBase)
	if errFirmwareUpgradeBase != nil {
		return []byte{}, errFirmwareUpgradeBase
	}
	errFirmwareUpgradeBase = json.Unmarshal([]byte(serializedFirmwareUpgradeBase), &toSerialize)
	if errFirmwareUpgradeBase != nil {
		return []byte{}, errFirmwareUpgradeBase
	}
	if o.ExcludeComponentList != nil {
		toSerialize["ExcludeComponentList"] = o.ExcludeComponentList
	}
	if o.Device != nil {
		toSerialize["Device"] = o.Device
	}
	if o.Server != nil {
		toSerialize["Server"] = o.Server
	}
	return json.Marshal(toSerialize)
}

type NullableFirmwareUpgrade struct {
	value *FirmwareUpgrade
	isSet bool
}

func (v NullableFirmwareUpgrade) Get() *FirmwareUpgrade {
	return v.value
}

func (v *NullableFirmwareUpgrade) Set(val *FirmwareUpgrade) {
	v.value = val
	v.isSet = true
}

func (v NullableFirmwareUpgrade) IsSet() bool {
	return v.isSet
}

func (v *NullableFirmwareUpgrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirmwareUpgrade(val *FirmwareUpgrade) *NullableFirmwareUpgrade {
	return &NullableFirmwareUpgrade{value: val, isSet: true}
}

func (v NullableFirmwareUpgrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirmwareUpgrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
