/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-08T07:46:03Z.
 *
 * API version: 0.0.1-15983
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// UcsdconnectorRestClientMessage RestClient Message type which would constitute of the following types.
type UcsdconnectorRestClientMessage struct {
	ConnectorAuthMessage
	// Payload which is sent along with the request. Most applicable to POST methods.
	Body *string `json:"Body,omitempty"`
	// Headers to be passed with the HTTP rest request.
	Header interface{} `json:"Header,omitempty"`
	// REST Method, should be set to one of [HTTP.MethodGet, HTTP.MethodPost].
	Method *string `json:"Method,omitempty"`
	// REST URL endpoint to which the HTTP request is sent.
	RestUrl *string `json:"RestUrl,omitempty"`
}

// NewUcsdconnectorRestClientMessage instantiates a new UcsdconnectorRestClientMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUcsdconnectorRestClientMessage() *UcsdconnectorRestClientMessage {
	this := UcsdconnectorRestClientMessage{}
	return &this
}

// NewUcsdconnectorRestClientMessageWithDefaults instantiates a new UcsdconnectorRestClientMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUcsdconnectorRestClientMessageWithDefaults() *UcsdconnectorRestClientMessage {
	this := UcsdconnectorRestClientMessage{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *UcsdconnectorRestClientMessage) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UcsdconnectorRestClientMessage) GetBodyOk() (*string, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *UcsdconnectorRestClientMessage) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *UcsdconnectorRestClientMessage) SetBody(v string) {
	o.Body = &v
}

// GetHeader returns the Header field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UcsdconnectorRestClientMessage) GetHeader() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UcsdconnectorRestClientMessage) GetHeaderOk() (*interface{}, bool) {
	if o == nil || o.Header == nil {
		return nil, false
	}
	return &o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *UcsdconnectorRestClientMessage) HasHeader() bool {
	if o != nil && o.Header != nil {
		return true
	}

	return false
}

// SetHeader gets a reference to the given interface{} and assigns it to the Header field.
func (o *UcsdconnectorRestClientMessage) SetHeader(v interface{}) {
	o.Header = v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *UcsdconnectorRestClientMessage) GetMethod() string {
	if o == nil || o.Method == nil {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UcsdconnectorRestClientMessage) GetMethodOk() (*string, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *UcsdconnectorRestClientMessage) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *UcsdconnectorRestClientMessage) SetMethod(v string) {
	o.Method = &v
}

// GetRestUrl returns the RestUrl field value if set, zero value otherwise.
func (o *UcsdconnectorRestClientMessage) GetRestUrl() string {
	if o == nil || o.RestUrl == nil {
		var ret string
		return ret
	}
	return *o.RestUrl
}

// GetRestUrlOk returns a tuple with the RestUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UcsdconnectorRestClientMessage) GetRestUrlOk() (*string, bool) {
	if o == nil || o.RestUrl == nil {
		return nil, false
	}
	return o.RestUrl, true
}

// HasRestUrl returns a boolean if a field has been set.
func (o *UcsdconnectorRestClientMessage) HasRestUrl() bool {
	if o != nil && o.RestUrl != nil {
		return true
	}

	return false
}

// SetRestUrl gets a reference to the given string and assigns it to the RestUrl field.
func (o *UcsdconnectorRestClientMessage) SetRestUrl(v string) {
	o.RestUrl = &v
}

func (o UcsdconnectorRestClientMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedConnectorAuthMessage, errConnectorAuthMessage := json.Marshal(o.ConnectorAuthMessage)
	if errConnectorAuthMessage != nil {
		return []byte{}, errConnectorAuthMessage
	}
	errConnectorAuthMessage = json.Unmarshal([]byte(serializedConnectorAuthMessage), &toSerialize)
	if errConnectorAuthMessage != nil {
		return []byte{}, errConnectorAuthMessage
	}
	if o.Body != nil {
		toSerialize["Body"] = o.Body
	}
	if o.Header != nil {
		toSerialize["Header"] = o.Header
	}
	if o.Method != nil {
		toSerialize["Method"] = o.Method
	}
	if o.RestUrl != nil {
		toSerialize["RestUrl"] = o.RestUrl
	}
	return json.Marshal(toSerialize)
}

type NullableUcsdconnectorRestClientMessage struct {
	value *UcsdconnectorRestClientMessage
	isSet bool
}

func (v NullableUcsdconnectorRestClientMessage) Get() *UcsdconnectorRestClientMessage {
	return v.value
}

func (v *NullableUcsdconnectorRestClientMessage) Set(val *UcsdconnectorRestClientMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableUcsdconnectorRestClientMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableUcsdconnectorRestClientMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUcsdconnectorRestClientMessage(val *UcsdconnectorRestClientMessage) *NullableUcsdconnectorRestClientMessage {
	return &NullableUcsdconnectorRestClientMessage{value: val, isSet: true}
}

func (v NullableUcsdconnectorRestClientMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUcsdconnectorRestClientMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
