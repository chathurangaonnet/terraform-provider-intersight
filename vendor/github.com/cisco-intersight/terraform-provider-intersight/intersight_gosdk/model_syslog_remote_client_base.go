/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-08T07:46:03Z.
 *
 * API version: 0.0.1-15983
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// SyslogRemoteClientBase Lists properties that are common to all remote logging clients. It serves as a base class for all remote logging clients.
type SyslogRemoteClientBase struct {
	MoBaseComplexType
	// Enables/disables remote logging for the endpoint If enabled, log messages will be sent to the syslog server mentioned in the Hostname/IP Address field.
	Enabled *bool `json:"Enabled,omitempty"`
	// Hostname or IP Address of the syslog server where log should be stored.
	Hostname *string `json:"Hostname,omitempty"`
	// Lowest level of messages to be included in the remote log.
	MinSeverity *string `json:"MinSeverity,omitempty"`
	// Port number used for logging on syslog server.
	Port *int64 `json:"Port,omitempty"`
	// Transport layer protocol for transmission of log messages to syslog server.
	Protocol             *string `json:"Protocol,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SyslogRemoteClientBase SyslogRemoteClientBase

// NewSyslogRemoteClientBase instantiates a new SyslogRemoteClientBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyslogRemoteClientBase() *SyslogRemoteClientBase {
	this := SyslogRemoteClientBase{}
	var minSeverity string = "warning"
	this.MinSeverity = &minSeverity
	var protocol string = "udp"
	this.Protocol = &protocol
	return &this
}

// NewSyslogRemoteClientBaseWithDefaults instantiates a new SyslogRemoteClientBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyslogRemoteClientBaseWithDefaults() *SyslogRemoteClientBase {
	this := SyslogRemoteClientBase{}
	var minSeverity string = "warning"
	this.MinSeverity = &minSeverity
	var protocol string = "udp"
	this.Protocol = &protocol
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SyslogRemoteClientBase) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyslogRemoteClientBase) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SyslogRemoteClientBase) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SyslogRemoteClientBase) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *SyslogRemoteClientBase) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyslogRemoteClientBase) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *SyslogRemoteClientBase) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *SyslogRemoteClientBase) SetHostname(v string) {
	o.Hostname = &v
}

// GetMinSeverity returns the MinSeverity field value if set, zero value otherwise.
func (o *SyslogRemoteClientBase) GetMinSeverity() string {
	if o == nil || o.MinSeverity == nil {
		var ret string
		return ret
	}
	return *o.MinSeverity
}

// GetMinSeverityOk returns a tuple with the MinSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyslogRemoteClientBase) GetMinSeverityOk() (*string, bool) {
	if o == nil || o.MinSeverity == nil {
		return nil, false
	}
	return o.MinSeverity, true
}

// HasMinSeverity returns a boolean if a field has been set.
func (o *SyslogRemoteClientBase) HasMinSeverity() bool {
	if o != nil && o.MinSeverity != nil {
		return true
	}

	return false
}

// SetMinSeverity gets a reference to the given string and assigns it to the MinSeverity field.
func (o *SyslogRemoteClientBase) SetMinSeverity(v string) {
	o.MinSeverity = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *SyslogRemoteClientBase) GetPort() int64 {
	if o == nil || o.Port == nil {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyslogRemoteClientBase) GetPortOk() (*int64, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *SyslogRemoteClientBase) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *SyslogRemoteClientBase) SetPort(v int64) {
	o.Port = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *SyslogRemoteClientBase) GetProtocol() string {
	if o == nil || o.Protocol == nil {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyslogRemoteClientBase) GetProtocolOk() (*string, bool) {
	if o == nil || o.Protocol == nil {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *SyslogRemoteClientBase) HasProtocol() bool {
	if o != nil && o.Protocol != nil {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *SyslogRemoteClientBase) SetProtocol(v string) {
	o.Protocol = &v
}

func (o SyslogRemoteClientBase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return []byte{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return []byte{}, errMoBaseComplexType
	}
	if o.Enabled != nil {
		toSerialize["Enabled"] = o.Enabled
	}
	if o.Hostname != nil {
		toSerialize["Hostname"] = o.Hostname
	}
	if o.MinSeverity != nil {
		toSerialize["MinSeverity"] = o.MinSeverity
	}
	if o.Port != nil {
		toSerialize["Port"] = o.Port
	}
	if o.Protocol != nil {
		toSerialize["Protocol"] = o.Protocol
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SyslogRemoteClientBase) UnmarshalJSON(bytes []byte) (err error) {
	varSyslogRemoteClientBase := _SyslogRemoteClientBase{}

	if err = json.Unmarshal(bytes, &varSyslogRemoteClientBase); err == nil {
		*o = SyslogRemoteClientBase(varSyslogRemoteClientBase)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Enabled")
		delete(additionalProperties, "Hostname")
		delete(additionalProperties, "MinSeverity")
		delete(additionalProperties, "Port")
		delete(additionalProperties, "Protocol")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSyslogRemoteClientBase struct {
	value *SyslogRemoteClientBase
	isSet bool
}

func (v NullableSyslogRemoteClientBase) Get() *SyslogRemoteClientBase {
	return v.value
}

func (v *NullableSyslogRemoteClientBase) Set(val *SyslogRemoteClientBase) {
	v.value = val
	v.isSet = true
}

func (v NullableSyslogRemoteClientBase) IsSet() bool {
	return v.isSet
}

func (v *NullableSyslogRemoteClientBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyslogRemoteClientBase(val *SyslogRemoteClientBase) *NullableSyslogRemoteClientBase {
	return &NullableSyslogRemoteClientBase{value: val, isSet: true}
}

func (v NullableSyslogRemoteClientBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyslogRemoteClientBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
