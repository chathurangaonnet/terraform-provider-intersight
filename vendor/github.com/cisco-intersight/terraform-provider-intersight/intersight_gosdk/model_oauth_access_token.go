/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-08T07:46:03Z.
 *
 * API version: 0.0.1-15983
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
	"time"
)

// OauthAccessToken struct for OauthAccessToken
type OauthAccessToken struct {
	MoBaseComplexType
	// Oauth api type
	ApiType *string `json:"ApiType,omitempty"`
	// Access token expiry time
	ExpiryTime *time.Time `json:"ExpiryTime,omitempty"`
	// Access token status
	Status *string `json:"Status,omitempty"`
	// Access token
	Token                *string `json:"Token,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OauthAccessToken OauthAccessToken

// NewOauthAccessToken instantiates a new OauthAccessToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOauthAccessToken() *OauthAccessToken {
	this := OauthAccessToken{}
	var apiType string = "Unknown"
	this.ApiType = &apiType
	var status string = "Inactive"
	this.Status = &status
	return &this
}

// NewOauthAccessTokenWithDefaults instantiates a new OauthAccessToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOauthAccessTokenWithDefaults() *OauthAccessToken {
	this := OauthAccessToken{}
	var apiType string = "Unknown"
	this.ApiType = &apiType
	var status string = "Inactive"
	this.Status = &status
	return &this
}

// GetApiType returns the ApiType field value if set, zero value otherwise.
func (o *OauthAccessToken) GetApiType() string {
	if o == nil || o.ApiType == nil {
		var ret string
		return ret
	}
	return *o.ApiType
}

// GetApiTypeOk returns a tuple with the ApiType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OauthAccessToken) GetApiTypeOk() (*string, bool) {
	if o == nil || o.ApiType == nil {
		return nil, false
	}
	return o.ApiType, true
}

// HasApiType returns a boolean if a field has been set.
func (o *OauthAccessToken) HasApiType() bool {
	if o != nil && o.ApiType != nil {
		return true
	}

	return false
}

// SetApiType gets a reference to the given string and assigns it to the ApiType field.
func (o *OauthAccessToken) SetApiType(v string) {
	o.ApiType = &v
}

// GetExpiryTime returns the ExpiryTime field value if set, zero value otherwise.
func (o *OauthAccessToken) GetExpiryTime() time.Time {
	if o == nil || o.ExpiryTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiryTime
}

// GetExpiryTimeOk returns a tuple with the ExpiryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OauthAccessToken) GetExpiryTimeOk() (*time.Time, bool) {
	if o == nil || o.ExpiryTime == nil {
		return nil, false
	}
	return o.ExpiryTime, true
}

// HasExpiryTime returns a boolean if a field has been set.
func (o *OauthAccessToken) HasExpiryTime() bool {
	if o != nil && o.ExpiryTime != nil {
		return true
	}

	return false
}

// SetExpiryTime gets a reference to the given time.Time and assigns it to the ExpiryTime field.
func (o *OauthAccessToken) SetExpiryTime(v time.Time) {
	o.ExpiryTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OauthAccessToken) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OauthAccessToken) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OauthAccessToken) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *OauthAccessToken) SetStatus(v string) {
	o.Status = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *OauthAccessToken) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OauthAccessToken) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *OauthAccessToken) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *OauthAccessToken) SetToken(v string) {
	o.Token = &v
}

func (o OauthAccessToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return []byte{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return []byte{}, errMoBaseComplexType
	}
	if o.ApiType != nil {
		toSerialize["ApiType"] = o.ApiType
	}
	if o.ExpiryTime != nil {
		toSerialize["ExpiryTime"] = o.ExpiryTime
	}
	if o.Status != nil {
		toSerialize["Status"] = o.Status
	}
	if o.Token != nil {
		toSerialize["Token"] = o.Token
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OauthAccessToken) UnmarshalJSON(bytes []byte) (err error) {
	varOauthAccessToken := _OauthAccessToken{}

	if err = json.Unmarshal(bytes, &varOauthAccessToken); err == nil {
		*o = OauthAccessToken(varOauthAccessToken)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ApiType")
		delete(additionalProperties, "ExpiryTime")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "Token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOauthAccessToken struct {
	value *OauthAccessToken
	isSet bool
}

func (v NullableOauthAccessToken) Get() *OauthAccessToken {
	return v.value
}

func (v *NullableOauthAccessToken) Set(val *OauthAccessToken) {
	v.value = val
	v.isSet = true
}

func (v NullableOauthAccessToken) IsSet() bool {
	return v.isSet
}

func (v *NullableOauthAccessToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauthAccessToken(val *OauthAccessToken) *NullableOauthAccessToken {
	return &NullableOauthAccessToken{value: val, isSet: true}
}

func (v NullableOauthAccessToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauthAccessToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
