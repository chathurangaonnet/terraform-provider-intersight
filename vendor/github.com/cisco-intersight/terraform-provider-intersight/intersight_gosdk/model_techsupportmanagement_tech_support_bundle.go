/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-08T07:46:03Z.
 *
 * API version: 0.0.1-15983
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// TechsupportmanagementTechSupportBundle A request to collect techsupport and upload it to Intersight Storage Service. The serial number, PID and/or relationship to the target resource provided by the user is used to determine the device type for techsupport collection. If the serial number, PID and target resource are specified in the request, the values must match. Valid values of device types are network.Element for fabric interconnect, compute.Blade for blade server, compute.RackUnit for rack server, equipment.Chassis for chassis, equipment.IoCard for IO Module, equipment.FEX for fabric extender and adapter.Unit for network adapter. UCSM techsupport is collected for device type network.Element. Chassis techsupport is collected for compute.Blade, equipment.Chassis, equipment.IoCard, and blade adapter.Unit. Server techsupport is collected for compute.RackUnit and rack adapter.Unit. Fabric extender techsupport is collected for device type equipment.FEX. Hyper Flex node level techsupport is collected when the request specifies the platform type (HX) and the device type is Hyperflex.Node.
type TechsupportmanagementTechSupportBundle struct {
	MoBaseMo
	// The device identifier used to uniquely identify an individual device.
	DeviceIdentifier *string `json:"DeviceIdentifier,omitempty"`
	// The device type obtained from the inventory.
	DeviceType *string `json:"DeviceType,omitempty"`
	// Product identification of the device.
	Pid           *string                     `json:"Pid,omitempty"`
	PlatformParam *ConnectorPlatformParamBase `json:"PlatformParam,omitempty"`
	// The platform type of the device.
	PlatformType *string `json:"PlatformType,omitempty"`
	// Serial number of the device.
	Serial             *string                                             `json:"Serial,omitempty"`
	DeviceRegistration *AssetDeviceRegistrationRelationship                `json:"DeviceRegistration,omitempty"`
	TargetResource     *MoBaseMoRelationship                               `json:"TargetResource,omitempty"`
	TechSupportStatus  *TechsupportmanagementTechSupportStatusRelationship `json:"TechSupportStatus,omitempty"`
}

// NewTechsupportmanagementTechSupportBundle instantiates a new TechsupportmanagementTechSupportBundle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTechsupportmanagementTechSupportBundle() *TechsupportmanagementTechSupportBundle {
	this := TechsupportmanagementTechSupportBundle{}
	var platformType string = ""
	this.PlatformType = &platformType
	return &this
}

// NewTechsupportmanagementTechSupportBundleWithDefaults instantiates a new TechsupportmanagementTechSupportBundle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTechsupportmanagementTechSupportBundleWithDefaults() *TechsupportmanagementTechSupportBundle {
	this := TechsupportmanagementTechSupportBundle{}
	var platformType string = ""
	this.PlatformType = &platformType
	return &this
}

// GetDeviceIdentifier returns the DeviceIdentifier field value if set, zero value otherwise.
func (o *TechsupportmanagementTechSupportBundle) GetDeviceIdentifier() string {
	if o == nil || o.DeviceIdentifier == nil {
		var ret string
		return ret
	}
	return *o.DeviceIdentifier
}

// GetDeviceIdentifierOk returns a tuple with the DeviceIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechsupportmanagementTechSupportBundle) GetDeviceIdentifierOk() (*string, bool) {
	if o == nil || o.DeviceIdentifier == nil {
		return nil, false
	}
	return o.DeviceIdentifier, true
}

// HasDeviceIdentifier returns a boolean if a field has been set.
func (o *TechsupportmanagementTechSupportBundle) HasDeviceIdentifier() bool {
	if o != nil && o.DeviceIdentifier != nil {
		return true
	}

	return false
}

// SetDeviceIdentifier gets a reference to the given string and assigns it to the DeviceIdentifier field.
func (o *TechsupportmanagementTechSupportBundle) SetDeviceIdentifier(v string) {
	o.DeviceIdentifier = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *TechsupportmanagementTechSupportBundle) GetDeviceType() string {
	if o == nil || o.DeviceType == nil {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechsupportmanagementTechSupportBundle) GetDeviceTypeOk() (*string, bool) {
	if o == nil || o.DeviceType == nil {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *TechsupportmanagementTechSupportBundle) HasDeviceType() bool {
	if o != nil && o.DeviceType != nil {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *TechsupportmanagementTechSupportBundle) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetPid returns the Pid field value if set, zero value otherwise.
func (o *TechsupportmanagementTechSupportBundle) GetPid() string {
	if o == nil || o.Pid == nil {
		var ret string
		return ret
	}
	return *o.Pid
}

// GetPidOk returns a tuple with the Pid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechsupportmanagementTechSupportBundle) GetPidOk() (*string, bool) {
	if o == nil || o.Pid == nil {
		return nil, false
	}
	return o.Pid, true
}

// HasPid returns a boolean if a field has been set.
func (o *TechsupportmanagementTechSupportBundle) HasPid() bool {
	if o != nil && o.Pid != nil {
		return true
	}

	return false
}

// SetPid gets a reference to the given string and assigns it to the Pid field.
func (o *TechsupportmanagementTechSupportBundle) SetPid(v string) {
	o.Pid = &v
}

// GetPlatformParam returns the PlatformParam field value if set, zero value otherwise.
func (o *TechsupportmanagementTechSupportBundle) GetPlatformParam() ConnectorPlatformParamBase {
	if o == nil || o.PlatformParam == nil {
		var ret ConnectorPlatformParamBase
		return ret
	}
	return *o.PlatformParam
}

// GetPlatformParamOk returns a tuple with the PlatformParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechsupportmanagementTechSupportBundle) GetPlatformParamOk() (*ConnectorPlatformParamBase, bool) {
	if o == nil || o.PlatformParam == nil {
		return nil, false
	}
	return o.PlatformParam, true
}

// HasPlatformParam returns a boolean if a field has been set.
func (o *TechsupportmanagementTechSupportBundle) HasPlatformParam() bool {
	if o != nil && o.PlatformParam != nil {
		return true
	}

	return false
}

// SetPlatformParam gets a reference to the given ConnectorPlatformParamBase and assigns it to the PlatformParam field.
func (o *TechsupportmanagementTechSupportBundle) SetPlatformParam(v ConnectorPlatformParamBase) {
	o.PlatformParam = &v
}

// GetPlatformType returns the PlatformType field value if set, zero value otherwise.
func (o *TechsupportmanagementTechSupportBundle) GetPlatformType() string {
	if o == nil || o.PlatformType == nil {
		var ret string
		return ret
	}
	return *o.PlatformType
}

// GetPlatformTypeOk returns a tuple with the PlatformType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechsupportmanagementTechSupportBundle) GetPlatformTypeOk() (*string, bool) {
	if o == nil || o.PlatformType == nil {
		return nil, false
	}
	return o.PlatformType, true
}

// HasPlatformType returns a boolean if a field has been set.
func (o *TechsupportmanagementTechSupportBundle) HasPlatformType() bool {
	if o != nil && o.PlatformType != nil {
		return true
	}

	return false
}

// SetPlatformType gets a reference to the given string and assigns it to the PlatformType field.
func (o *TechsupportmanagementTechSupportBundle) SetPlatformType(v string) {
	o.PlatformType = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *TechsupportmanagementTechSupportBundle) GetSerial() string {
	if o == nil || o.Serial == nil {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechsupportmanagementTechSupportBundle) GetSerialOk() (*string, bool) {
	if o == nil || o.Serial == nil {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *TechsupportmanagementTechSupportBundle) HasSerial() bool {
	if o != nil && o.Serial != nil {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *TechsupportmanagementTechSupportBundle) SetSerial(v string) {
	o.Serial = &v
}

// GetDeviceRegistration returns the DeviceRegistration field value if set, zero value otherwise.
func (o *TechsupportmanagementTechSupportBundle) GetDeviceRegistration() AssetDeviceRegistrationRelationship {
	if o == nil || o.DeviceRegistration == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.DeviceRegistration
}

// GetDeviceRegistrationOk returns a tuple with the DeviceRegistration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechsupportmanagementTechSupportBundle) GetDeviceRegistrationOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.DeviceRegistration == nil {
		return nil, false
	}
	return o.DeviceRegistration, true
}

// HasDeviceRegistration returns a boolean if a field has been set.
func (o *TechsupportmanagementTechSupportBundle) HasDeviceRegistration() bool {
	if o != nil && o.DeviceRegistration != nil {
		return true
	}

	return false
}

// SetDeviceRegistration gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the DeviceRegistration field.
func (o *TechsupportmanagementTechSupportBundle) SetDeviceRegistration(v AssetDeviceRegistrationRelationship) {
	o.DeviceRegistration = &v
}

// GetTargetResource returns the TargetResource field value if set, zero value otherwise.
func (o *TechsupportmanagementTechSupportBundle) GetTargetResource() MoBaseMoRelationship {
	if o == nil || o.TargetResource == nil {
		var ret MoBaseMoRelationship
		return ret
	}
	return *o.TargetResource
}

// GetTargetResourceOk returns a tuple with the TargetResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechsupportmanagementTechSupportBundle) GetTargetResourceOk() (*MoBaseMoRelationship, bool) {
	if o == nil || o.TargetResource == nil {
		return nil, false
	}
	return o.TargetResource, true
}

// HasTargetResource returns a boolean if a field has been set.
func (o *TechsupportmanagementTechSupportBundle) HasTargetResource() bool {
	if o != nil && o.TargetResource != nil {
		return true
	}

	return false
}

// SetTargetResource gets a reference to the given MoBaseMoRelationship and assigns it to the TargetResource field.
func (o *TechsupportmanagementTechSupportBundle) SetTargetResource(v MoBaseMoRelationship) {
	o.TargetResource = &v
}

// GetTechSupportStatus returns the TechSupportStatus field value if set, zero value otherwise.
func (o *TechsupportmanagementTechSupportBundle) GetTechSupportStatus() TechsupportmanagementTechSupportStatusRelationship {
	if o == nil || o.TechSupportStatus == nil {
		var ret TechsupportmanagementTechSupportStatusRelationship
		return ret
	}
	return *o.TechSupportStatus
}

// GetTechSupportStatusOk returns a tuple with the TechSupportStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechsupportmanagementTechSupportBundle) GetTechSupportStatusOk() (*TechsupportmanagementTechSupportStatusRelationship, bool) {
	if o == nil || o.TechSupportStatus == nil {
		return nil, false
	}
	return o.TechSupportStatus, true
}

// HasTechSupportStatus returns a boolean if a field has been set.
func (o *TechsupportmanagementTechSupportBundle) HasTechSupportStatus() bool {
	if o != nil && o.TechSupportStatus != nil {
		return true
	}

	return false
}

// SetTechSupportStatus gets a reference to the given TechsupportmanagementTechSupportStatusRelationship and assigns it to the TechSupportStatus field.
func (o *TechsupportmanagementTechSupportBundle) SetTechSupportStatus(v TechsupportmanagementTechSupportStatusRelationship) {
	o.TechSupportStatus = &v
}

func (o TechsupportmanagementTechSupportBundle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if o.DeviceIdentifier != nil {
		toSerialize["DeviceIdentifier"] = o.DeviceIdentifier
	}
	if o.DeviceType != nil {
		toSerialize["DeviceType"] = o.DeviceType
	}
	if o.Pid != nil {
		toSerialize["Pid"] = o.Pid
	}
	if o.PlatformParam != nil {
		toSerialize["PlatformParam"] = o.PlatformParam
	}
	if o.PlatformType != nil {
		toSerialize["PlatformType"] = o.PlatformType
	}
	if o.Serial != nil {
		toSerialize["Serial"] = o.Serial
	}
	if o.DeviceRegistration != nil {
		toSerialize["DeviceRegistration"] = o.DeviceRegistration
	}
	if o.TargetResource != nil {
		toSerialize["TargetResource"] = o.TargetResource
	}
	if o.TechSupportStatus != nil {
		toSerialize["TechSupportStatus"] = o.TechSupportStatus
	}
	return json.Marshal(toSerialize)
}

type NullableTechsupportmanagementTechSupportBundle struct {
	value *TechsupportmanagementTechSupportBundle
	isSet bool
}

func (v NullableTechsupportmanagementTechSupportBundle) Get() *TechsupportmanagementTechSupportBundle {
	return v.value
}

func (v *NullableTechsupportmanagementTechSupportBundle) Set(val *TechsupportmanagementTechSupportBundle) {
	v.value = val
	v.isSet = true
}

func (v NullableTechsupportmanagementTechSupportBundle) IsSet() bool {
	return v.isSet
}

func (v *NullableTechsupportmanagementTechSupportBundle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTechsupportmanagementTechSupportBundle(val *TechsupportmanagementTechSupportBundle) *NullableTechsupportmanagementTechSupportBundle {
	return &NullableTechsupportmanagementTechSupportBundle{value: val, isSet: true}
}

func (v NullableTechsupportmanagementTechSupportBundle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTechsupportmanagementTechSupportBundle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
