/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-19T15:15:17Z.
 *
 * API version: 1.0.9-1903
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// ConnectorStartStream Start a stream. Cloud services sends the configuration for a stream to be opened within this message. If there already exists a stream with the given ID the connector will return its current sequence number, or if the cloud requests the stream can be rebuilt from scratch.
type ConnectorStartStream struct {
	ConnectorStreamMessage
	// The number of outputs from a plugin to collect into a single message. Applicable only to streams that involve polling plugins and plugins which support emitting batchable data. Default value of zero indicates no batching.
	BatchSize *int64 `json:"BatchSize,omitempty"`
	// Flag to force a rebuild of an existing stream. To be used if a stream is unable to recover itself in response to dropped messages.
	ForceRebuild *bool `json:"ForceRebuild,omitempty"`
	// Input to the plugin to start the start the stream or collect stream messages.
	Input *string `json:"Input,omitempty"`
	// Interval at which device should emit a keepalive message for this stream. Device will also expect a keepalive response from the cloud within the interval. If zero, no keepalive is required and stream should not timeout.
	KeepAliveInterval *int64 `json:"KeepAliveInterval,omitempty"`
	// The plugin to run the stream on.
	PluginName *string `json:"PluginName,omitempty"`
	// The desired interval to emit messages from this stream. The stream plugin will poll plugins at this interval to create a stream event.
	PollInterval *int64 `json:"PollInterval,omitempty"`
	// The priority level to apply to messages emitted by this stream.
	Priority *int64 `json:"Priority,omitempty"`
	// The version of the device connector stream protocol. Used to change behavior of the device connector stream plugin based on the version of the Intersight service. Allows for multiple versions of Intersight services to interact with the stream plugin of devices.
	ProtocolVersion *int64 `json:"ProtocolVersion,omitempty"`
	// The topic for the device connector to publish messages to.
	ResponseTopic *string `json:"ResponseTopic,omitempty"`
}

// NewConnectorStartStream instantiates a new ConnectorStartStream object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorStartStream() *ConnectorStartStream {
	this := ConnectorStartStream{}
	return &this
}

// NewConnectorStartStreamWithDefaults instantiates a new ConnectorStartStream object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorStartStreamWithDefaults() *ConnectorStartStream {
	this := ConnectorStartStream{}
	return &this
}

// GetBatchSize returns the BatchSize field value if set, zero value otherwise.
func (o *ConnectorStartStream) GetBatchSize() int64 {
	if o == nil || o.BatchSize == nil {
		var ret int64
		return ret
	}
	return *o.BatchSize
}

// GetBatchSizeOk returns a tuple with the BatchSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorStartStream) GetBatchSizeOk() (*int64, bool) {
	if o == nil || o.BatchSize == nil {
		return nil, false
	}
	return o.BatchSize, true
}

// HasBatchSize returns a boolean if a field has been set.
func (o *ConnectorStartStream) HasBatchSize() bool {
	if o != nil && o.BatchSize != nil {
		return true
	}

	return false
}

// SetBatchSize gets a reference to the given int64 and assigns it to the BatchSize field.
func (o *ConnectorStartStream) SetBatchSize(v int64) {
	o.BatchSize = &v
}

// GetForceRebuild returns the ForceRebuild field value if set, zero value otherwise.
func (o *ConnectorStartStream) GetForceRebuild() bool {
	if o == nil || o.ForceRebuild == nil {
		var ret bool
		return ret
	}
	return *o.ForceRebuild
}

// GetForceRebuildOk returns a tuple with the ForceRebuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorStartStream) GetForceRebuildOk() (*bool, bool) {
	if o == nil || o.ForceRebuild == nil {
		return nil, false
	}
	return o.ForceRebuild, true
}

// HasForceRebuild returns a boolean if a field has been set.
func (o *ConnectorStartStream) HasForceRebuild() bool {
	if o != nil && o.ForceRebuild != nil {
		return true
	}

	return false
}

// SetForceRebuild gets a reference to the given bool and assigns it to the ForceRebuild field.
func (o *ConnectorStartStream) SetForceRebuild(v bool) {
	o.ForceRebuild = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *ConnectorStartStream) GetInput() string {
	if o == nil || o.Input == nil {
		var ret string
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorStartStream) GetInputOk() (*string, bool) {
	if o == nil || o.Input == nil {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *ConnectorStartStream) HasInput() bool {
	if o != nil && o.Input != nil {
		return true
	}

	return false
}

// SetInput gets a reference to the given string and assigns it to the Input field.
func (o *ConnectorStartStream) SetInput(v string) {
	o.Input = &v
}

// GetKeepAliveInterval returns the KeepAliveInterval field value if set, zero value otherwise.
func (o *ConnectorStartStream) GetKeepAliveInterval() int64 {
	if o == nil || o.KeepAliveInterval == nil {
		var ret int64
		return ret
	}
	return *o.KeepAliveInterval
}

// GetKeepAliveIntervalOk returns a tuple with the KeepAliveInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorStartStream) GetKeepAliveIntervalOk() (*int64, bool) {
	if o == nil || o.KeepAliveInterval == nil {
		return nil, false
	}
	return o.KeepAliveInterval, true
}

// HasKeepAliveInterval returns a boolean if a field has been set.
func (o *ConnectorStartStream) HasKeepAliveInterval() bool {
	if o != nil && o.KeepAliveInterval != nil {
		return true
	}

	return false
}

// SetKeepAliveInterval gets a reference to the given int64 and assigns it to the KeepAliveInterval field.
func (o *ConnectorStartStream) SetKeepAliveInterval(v int64) {
	o.KeepAliveInterval = &v
}

// GetPluginName returns the PluginName field value if set, zero value otherwise.
func (o *ConnectorStartStream) GetPluginName() string {
	if o == nil || o.PluginName == nil {
		var ret string
		return ret
	}
	return *o.PluginName
}

// GetPluginNameOk returns a tuple with the PluginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorStartStream) GetPluginNameOk() (*string, bool) {
	if o == nil || o.PluginName == nil {
		return nil, false
	}
	return o.PluginName, true
}

// HasPluginName returns a boolean if a field has been set.
func (o *ConnectorStartStream) HasPluginName() bool {
	if o != nil && o.PluginName != nil {
		return true
	}

	return false
}

// SetPluginName gets a reference to the given string and assigns it to the PluginName field.
func (o *ConnectorStartStream) SetPluginName(v string) {
	o.PluginName = &v
}

// GetPollInterval returns the PollInterval field value if set, zero value otherwise.
func (o *ConnectorStartStream) GetPollInterval() int64 {
	if o == nil || o.PollInterval == nil {
		var ret int64
		return ret
	}
	return *o.PollInterval
}

// GetPollIntervalOk returns a tuple with the PollInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorStartStream) GetPollIntervalOk() (*int64, bool) {
	if o == nil || o.PollInterval == nil {
		return nil, false
	}
	return o.PollInterval, true
}

// HasPollInterval returns a boolean if a field has been set.
func (o *ConnectorStartStream) HasPollInterval() bool {
	if o != nil && o.PollInterval != nil {
		return true
	}

	return false
}

// SetPollInterval gets a reference to the given int64 and assigns it to the PollInterval field.
func (o *ConnectorStartStream) SetPollInterval(v int64) {
	o.PollInterval = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ConnectorStartStream) GetPriority() int64 {
	if o == nil || o.Priority == nil {
		var ret int64
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorStartStream) GetPriorityOk() (*int64, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ConnectorStartStream) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int64 and assigns it to the Priority field.
func (o *ConnectorStartStream) SetPriority(v int64) {
	o.Priority = &v
}

// GetProtocolVersion returns the ProtocolVersion field value if set, zero value otherwise.
func (o *ConnectorStartStream) GetProtocolVersion() int64 {
	if o == nil || o.ProtocolVersion == nil {
		var ret int64
		return ret
	}
	return *o.ProtocolVersion
}

// GetProtocolVersionOk returns a tuple with the ProtocolVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorStartStream) GetProtocolVersionOk() (*int64, bool) {
	if o == nil || o.ProtocolVersion == nil {
		return nil, false
	}
	return o.ProtocolVersion, true
}

// HasProtocolVersion returns a boolean if a field has been set.
func (o *ConnectorStartStream) HasProtocolVersion() bool {
	if o != nil && o.ProtocolVersion != nil {
		return true
	}

	return false
}

// SetProtocolVersion gets a reference to the given int64 and assigns it to the ProtocolVersion field.
func (o *ConnectorStartStream) SetProtocolVersion(v int64) {
	o.ProtocolVersion = &v
}

// GetResponseTopic returns the ResponseTopic field value if set, zero value otherwise.
func (o *ConnectorStartStream) GetResponseTopic() string {
	if o == nil || o.ResponseTopic == nil {
		var ret string
		return ret
	}
	return *o.ResponseTopic
}

// GetResponseTopicOk returns a tuple with the ResponseTopic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorStartStream) GetResponseTopicOk() (*string, bool) {
	if o == nil || o.ResponseTopic == nil {
		return nil, false
	}
	return o.ResponseTopic, true
}

// HasResponseTopic returns a boolean if a field has been set.
func (o *ConnectorStartStream) HasResponseTopic() bool {
	if o != nil && o.ResponseTopic != nil {
		return true
	}

	return false
}

// SetResponseTopic gets a reference to the given string and assigns it to the ResponseTopic field.
func (o *ConnectorStartStream) SetResponseTopic(v string) {
	o.ResponseTopic = &v
}

func (o ConnectorStartStream) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedConnectorStreamMessage, errConnectorStreamMessage := json.Marshal(o.ConnectorStreamMessage)
	if errConnectorStreamMessage != nil {
		return []byte{}, errConnectorStreamMessage
	}
	errConnectorStreamMessage = json.Unmarshal([]byte(serializedConnectorStreamMessage), &toSerialize)
	if errConnectorStreamMessage != nil {
		return []byte{}, errConnectorStreamMessage
	}
	if o.BatchSize != nil {
		toSerialize["BatchSize"] = o.BatchSize
	}
	if o.ForceRebuild != nil {
		toSerialize["ForceRebuild"] = o.ForceRebuild
	}
	if o.Input != nil {
		toSerialize["Input"] = o.Input
	}
	if o.KeepAliveInterval != nil {
		toSerialize["KeepAliveInterval"] = o.KeepAliveInterval
	}
	if o.PluginName != nil {
		toSerialize["PluginName"] = o.PluginName
	}
	if o.PollInterval != nil {
		toSerialize["PollInterval"] = o.PollInterval
	}
	if o.Priority != nil {
		toSerialize["Priority"] = o.Priority
	}
	if o.ProtocolVersion != nil {
		toSerialize["ProtocolVersion"] = o.ProtocolVersion
	}
	if o.ResponseTopic != nil {
		toSerialize["ResponseTopic"] = o.ResponseTopic
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorStartStream struct {
	value *ConnectorStartStream
	isSet bool
}

func (v NullableConnectorStartStream) Get() *ConnectorStartStream {
	return v.value
}

func (v *NullableConnectorStartStream) Set(val *ConnectorStartStream) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorStartStream) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorStartStream) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorStartStream(val *ConnectorStartStream) *NullableConnectorStartStream {
	return &NullableConnectorStartStream{value: val, isSet: true}
}

func (v NullableConnectorStartStream) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorStartStream) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
