/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-11T05:47:33Z.
 *
 * API version: 1.0.9-1999
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// ConnectorDownloadStatus The status of a download operation. The download plugin will report the status of a download operation periodically to report status or to report completion/error.
type ConnectorDownloadStatus struct {
	MoBaseMo
	Checksum *ConnectorFileChecksum `json:"Checksum,omitempty"`
	// Any error encountered. Set to empty when download is in progress or completed.} type: string
	DownloadError interface{} `json:"DownloadError,omitempty"`
	// The download progress of the file represented as a percentage between 0% and 100%. If progress reporting is not possible a value of -1 is sent.
	DownloadProgress *int64 `json:"DownloadProgress,omitempty"`
	// The number of retries the plugin attempted before succeeding or failing the download.
	DownloadRetries *int64 `json:"DownloadRetries,omitempty"`
	// The sha256checksum of the downloaded file as calculated by the download plugin after successfully downloading a file.
	Sha256checksum       *string `json:"Sha256checksum,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConnectorDownloadStatus ConnectorDownloadStatus

// NewConnectorDownloadStatus instantiates a new ConnectorDownloadStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorDownloadStatus() *ConnectorDownloadStatus {
	this := ConnectorDownloadStatus{}
	return &this
}

// NewConnectorDownloadStatusWithDefaults instantiates a new ConnectorDownloadStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorDownloadStatusWithDefaults() *ConnectorDownloadStatus {
	this := ConnectorDownloadStatus{}
	return &this
}

// GetChecksum returns the Checksum field value if set, zero value otherwise.
func (o *ConnectorDownloadStatus) GetChecksum() ConnectorFileChecksum {
	if o == nil || o.Checksum == nil {
		var ret ConnectorFileChecksum
		return ret
	}
	return *o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDownloadStatus) GetChecksumOk() (*ConnectorFileChecksum, bool) {
	if o == nil || o.Checksum == nil {
		return nil, false
	}
	return o.Checksum, true
}

// HasChecksum returns a boolean if a field has been set.
func (o *ConnectorDownloadStatus) HasChecksum() bool {
	if o != nil && o.Checksum != nil {
		return true
	}

	return false
}

// SetChecksum gets a reference to the given ConnectorFileChecksum and assigns it to the Checksum field.
func (o *ConnectorDownloadStatus) SetChecksum(v ConnectorFileChecksum) {
	o.Checksum = &v
}

// GetDownloadError returns the DownloadError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorDownloadStatus) GetDownloadError() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DownloadError
}

// GetDownloadErrorOk returns a tuple with the DownloadError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorDownloadStatus) GetDownloadErrorOk() (*interface{}, bool) {
	if o == nil || o.DownloadError == nil {
		return nil, false
	}
	return &o.DownloadError, true
}

// HasDownloadError returns a boolean if a field has been set.
func (o *ConnectorDownloadStatus) HasDownloadError() bool {
	if o != nil && o.DownloadError != nil {
		return true
	}

	return false
}

// SetDownloadError gets a reference to the given interface{} and assigns it to the DownloadError field.
func (o *ConnectorDownloadStatus) SetDownloadError(v interface{}) {
	o.DownloadError = v
}

// GetDownloadProgress returns the DownloadProgress field value if set, zero value otherwise.
func (o *ConnectorDownloadStatus) GetDownloadProgress() int64 {
	if o == nil || o.DownloadProgress == nil {
		var ret int64
		return ret
	}
	return *o.DownloadProgress
}

// GetDownloadProgressOk returns a tuple with the DownloadProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDownloadStatus) GetDownloadProgressOk() (*int64, bool) {
	if o == nil || o.DownloadProgress == nil {
		return nil, false
	}
	return o.DownloadProgress, true
}

// HasDownloadProgress returns a boolean if a field has been set.
func (o *ConnectorDownloadStatus) HasDownloadProgress() bool {
	if o != nil && o.DownloadProgress != nil {
		return true
	}

	return false
}

// SetDownloadProgress gets a reference to the given int64 and assigns it to the DownloadProgress field.
func (o *ConnectorDownloadStatus) SetDownloadProgress(v int64) {
	o.DownloadProgress = &v
}

// GetDownloadRetries returns the DownloadRetries field value if set, zero value otherwise.
func (o *ConnectorDownloadStatus) GetDownloadRetries() int64 {
	if o == nil || o.DownloadRetries == nil {
		var ret int64
		return ret
	}
	return *o.DownloadRetries
}

// GetDownloadRetriesOk returns a tuple with the DownloadRetries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDownloadStatus) GetDownloadRetriesOk() (*int64, bool) {
	if o == nil || o.DownloadRetries == nil {
		return nil, false
	}
	return o.DownloadRetries, true
}

// HasDownloadRetries returns a boolean if a field has been set.
func (o *ConnectorDownloadStatus) HasDownloadRetries() bool {
	if o != nil && o.DownloadRetries != nil {
		return true
	}

	return false
}

// SetDownloadRetries gets a reference to the given int64 and assigns it to the DownloadRetries field.
func (o *ConnectorDownloadStatus) SetDownloadRetries(v int64) {
	o.DownloadRetries = &v
}

// GetSha256checksum returns the Sha256checksum field value if set, zero value otherwise.
func (o *ConnectorDownloadStatus) GetSha256checksum() string {
	if o == nil || o.Sha256checksum == nil {
		var ret string
		return ret
	}
	return *o.Sha256checksum
}

// GetSha256checksumOk returns a tuple with the Sha256checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDownloadStatus) GetSha256checksumOk() (*string, bool) {
	if o == nil || o.Sha256checksum == nil {
		return nil, false
	}
	return o.Sha256checksum, true
}

// HasSha256checksum returns a boolean if a field has been set.
func (o *ConnectorDownloadStatus) HasSha256checksum() bool {
	if o != nil && o.Sha256checksum != nil {
		return true
	}

	return false
}

// SetSha256checksum gets a reference to the given string and assigns it to the Sha256checksum field.
func (o *ConnectorDownloadStatus) SetSha256checksum(v string) {
	o.Sha256checksum = &v
}

func (o ConnectorDownloadStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if o.Checksum != nil {
		toSerialize["Checksum"] = o.Checksum
	}
	if o.DownloadError != nil {
		toSerialize["DownloadError"] = o.DownloadError
	}
	if o.DownloadProgress != nil {
		toSerialize["DownloadProgress"] = o.DownloadProgress
	}
	if o.DownloadRetries != nil {
		toSerialize["DownloadRetries"] = o.DownloadRetries
	}
	if o.Sha256checksum != nil {
		toSerialize["Sha256checksum"] = o.Sha256checksum
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ConnectorDownloadStatus) UnmarshalJSON(bytes []byte) (err error) {
	type ConnectorDownloadStatusWithoutEmbeddedStruct struct {
		Checksum *ConnectorFileChecksum `json:"Checksum,omitempty"`
		// Any error encountered. Set to empty when download is in progress or completed.} type: string
		DownloadError interface{} `json:"DownloadError,omitempty"`
		// The download progress of the file represented as a percentage between 0% and 100%. If progress reporting is not possible a value of -1 is sent.
		DownloadProgress *int64 `json:"DownloadProgress,omitempty"`
		// The number of retries the plugin attempted before succeeding or failing the download.
		DownloadRetries *int64 `json:"DownloadRetries,omitempty"`
		// The sha256checksum of the downloaded file as calculated by the download plugin after successfully downloading a file.
		Sha256checksum *string `json:"Sha256checksum,omitempty"`
	}

	varConnectorDownloadStatusWithoutEmbeddedStruct := ConnectorDownloadStatusWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varConnectorDownloadStatusWithoutEmbeddedStruct)
	if err == nil {
		varConnectorDownloadStatus := _ConnectorDownloadStatus{}
		varConnectorDownloadStatus.Checksum = varConnectorDownloadStatusWithoutEmbeddedStruct.Checksum
		varConnectorDownloadStatus.DownloadError = varConnectorDownloadStatusWithoutEmbeddedStruct.DownloadError
		varConnectorDownloadStatus.DownloadProgress = varConnectorDownloadStatusWithoutEmbeddedStruct.DownloadProgress
		varConnectorDownloadStatus.DownloadRetries = varConnectorDownloadStatusWithoutEmbeddedStruct.DownloadRetries
		varConnectorDownloadStatus.Sha256checksum = varConnectorDownloadStatusWithoutEmbeddedStruct.Sha256checksum
		*o = ConnectorDownloadStatus(varConnectorDownloadStatus)
	} else {
		return err
	}

	varConnectorDownloadStatus := _ConnectorDownloadStatus{}

	err = json.Unmarshal(bytes, &varConnectorDownloadStatus)
	if err == nil {
		o.MoBaseMo = varConnectorDownloadStatus.MoBaseMo
	} else {
		return err
	}
	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Checksum")
		delete(additionalProperties, "DownloadError")
		delete(additionalProperties, "DownloadProgress")
		delete(additionalProperties, "DownloadRetries")
		delete(additionalProperties, "Sha256checksum")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConnectorDownloadStatus struct {
	value *ConnectorDownloadStatus
	isSet bool
}

func (v NullableConnectorDownloadStatus) Get() *ConnectorDownloadStatus {
	return v.value
}

func (v *NullableConnectorDownloadStatus) Set(val *ConnectorDownloadStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorDownloadStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorDownloadStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorDownloadStatus(val *ConnectorDownloadStatus) *NullableConnectorDownloadStatus {
	return &NullableConnectorDownloadStatus{value: val, isSet: true}
}

func (v NullableConnectorDownloadStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorDownloadStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
