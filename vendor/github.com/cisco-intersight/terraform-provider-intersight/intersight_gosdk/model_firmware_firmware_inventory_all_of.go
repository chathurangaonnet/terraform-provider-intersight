/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-19T15:15:17Z.
 *
 * API version: 1.0.9-1903
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// FirmwareFirmwareInventoryAllOf Definition of the list of properties defined in 'firmware.FirmwareInventory', excluding properties defined in parent classes.
type FirmwareFirmwareInventoryAllOf struct {
	// Component category. For example, MRAID is under storage controller, CIMC is under management controller.
	Category *string `json:"Category,omitempty"`
	// The name of the component to reflect on UI.
	Label *string `json:"Label,omitempty"`
	// Model deatils of component.
	Model *string `json:"Model,omitempty"`
	// The redfish URI to get the firmware inventory of server components.
	UpdateUri *string `json:"UpdateUri,omitempty"`
	// The vendor of the component.
	Vendor *string `json:"Vendor,omitempty"`
	// The firmware running version on the component.
	Version *string `json:"Version,omitempty"`
}

// NewFirmwareFirmwareInventoryAllOf instantiates a new FirmwareFirmwareInventoryAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirmwareFirmwareInventoryAllOf() *FirmwareFirmwareInventoryAllOf {
	this := FirmwareFirmwareInventoryAllOf{}
	return &this
}

// NewFirmwareFirmwareInventoryAllOfWithDefaults instantiates a new FirmwareFirmwareInventoryAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirmwareFirmwareInventoryAllOfWithDefaults() *FirmwareFirmwareInventoryAllOf {
	this := FirmwareFirmwareInventoryAllOf{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *FirmwareFirmwareInventoryAllOf) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareFirmwareInventoryAllOf) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *FirmwareFirmwareInventoryAllOf) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *FirmwareFirmwareInventoryAllOf) SetCategory(v string) {
	o.Category = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *FirmwareFirmwareInventoryAllOf) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareFirmwareInventoryAllOf) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *FirmwareFirmwareInventoryAllOf) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *FirmwareFirmwareInventoryAllOf) SetLabel(v string) {
	o.Label = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *FirmwareFirmwareInventoryAllOf) GetModel() string {
	if o == nil || o.Model == nil {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareFirmwareInventoryAllOf) GetModelOk() (*string, bool) {
	if o == nil || o.Model == nil {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *FirmwareFirmwareInventoryAllOf) HasModel() bool {
	if o != nil && o.Model != nil {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *FirmwareFirmwareInventoryAllOf) SetModel(v string) {
	o.Model = &v
}

// GetUpdateUri returns the UpdateUri field value if set, zero value otherwise.
func (o *FirmwareFirmwareInventoryAllOf) GetUpdateUri() string {
	if o == nil || o.UpdateUri == nil {
		var ret string
		return ret
	}
	return *o.UpdateUri
}

// GetUpdateUriOk returns a tuple with the UpdateUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareFirmwareInventoryAllOf) GetUpdateUriOk() (*string, bool) {
	if o == nil || o.UpdateUri == nil {
		return nil, false
	}
	return o.UpdateUri, true
}

// HasUpdateUri returns a boolean if a field has been set.
func (o *FirmwareFirmwareInventoryAllOf) HasUpdateUri() bool {
	if o != nil && o.UpdateUri != nil {
		return true
	}

	return false
}

// SetUpdateUri gets a reference to the given string and assigns it to the UpdateUri field.
func (o *FirmwareFirmwareInventoryAllOf) SetUpdateUri(v string) {
	o.UpdateUri = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *FirmwareFirmwareInventoryAllOf) GetVendor() string {
	if o == nil || o.Vendor == nil {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareFirmwareInventoryAllOf) GetVendorOk() (*string, bool) {
	if o == nil || o.Vendor == nil {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *FirmwareFirmwareInventoryAllOf) HasVendor() bool {
	if o != nil && o.Vendor != nil {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *FirmwareFirmwareInventoryAllOf) SetVendor(v string) {
	o.Vendor = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *FirmwareFirmwareInventoryAllOf) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareFirmwareInventoryAllOf) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *FirmwareFirmwareInventoryAllOf) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *FirmwareFirmwareInventoryAllOf) SetVersion(v string) {
	o.Version = &v
}

func (o FirmwareFirmwareInventoryAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Category != nil {
		toSerialize["Category"] = o.Category
	}
	if o.Label != nil {
		toSerialize["Label"] = o.Label
	}
	if o.Model != nil {
		toSerialize["Model"] = o.Model
	}
	if o.UpdateUri != nil {
		toSerialize["UpdateUri"] = o.UpdateUri
	}
	if o.Vendor != nil {
		toSerialize["Vendor"] = o.Vendor
	}
	if o.Version != nil {
		toSerialize["Version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableFirmwareFirmwareInventoryAllOf struct {
	value *FirmwareFirmwareInventoryAllOf
	isSet bool
}

func (v NullableFirmwareFirmwareInventoryAllOf) Get() *FirmwareFirmwareInventoryAllOf {
	return v.value
}

func (v *NullableFirmwareFirmwareInventoryAllOf) Set(val *FirmwareFirmwareInventoryAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableFirmwareFirmwareInventoryAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableFirmwareFirmwareInventoryAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirmwareFirmwareInventoryAllOf(val *FirmwareFirmwareInventoryAllOf) *NullableFirmwareFirmwareInventoryAllOf {
	return &NullableFirmwareFirmwareInventoryAllOf{value: val, isSet: true}
}

func (v NullableFirmwareFirmwareInventoryAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirmwareFirmwareInventoryAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
