// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VmediaMapping Vmedia:Mapping
// swagger:model vmediaMapping
type VmediaMapping struct {
	VmediaMappingAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VmediaMapping) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 VmediaMappingAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.VmediaMappingAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VmediaMapping) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.VmediaMappingAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vmedia mapping
func (m *VmediaMapping) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with VmediaMappingAO0P0
	if err := m.VmediaMappingAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *VmediaMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmediaMapping) UnmarshalBinary(b []byte) error {
	var res VmediaMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VmediaMappingAO0P0 vmedia mapping a o0 p0
// swagger:model VmediaMappingAO0P0
type VmediaMappingAO0P0 struct {

	// Type of Authentication protocol when CIFS is used for communication with the remote server.
	//
	// Enum: [none ntlm ntlmi ntlmv2 ntlmv2i ntlmssp ntlmsspi]
	AuthenticationProtocol *string `json:"AuthenticationProtocol,omitempty"`

	// Type of remote Virtual Media device.
	//
	// Enum: [cdd hdd]
	DeviceType *string `json:"DeviceType,omitempty"`

	// IP address or hostname of the remote server.
	//
	HostName string `json:"HostName,omitempty"`

	// is password set
	IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

	// Mount options for the Virtual Media mapping. The field can be left blank or filled in a comma separated list with the following options.\n For NFS, supported options are ro, rw, nolock, noexec, soft, port=VALUE, timeo=VALUE, retry=VALUE.\n For CIFS, supported options are soft, nounix, noserverino, guest.\n For HTTP/HTTPS, the only supported option is noauto.
	//
	MountOptions string `json:"MountOptions,omitempty"`

	// Protocol to use to communicate with the remote server.
	//
	// Enum: [nfs cifs http https]
	MountProtocol *string `json:"MountProtocol,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// Password associated with the username.
	//
	Password string `json:"Password,omitempty"`

	// Name of the remote file. It should be of .img format for HDD Virtual Media mapping and .iso format for CDD Virtual Media mapping.
	//
	RemoteFile string `json:"RemoteFile,omitempty"`

	// Path to the location of the image on the remote server. Preferred format is /path/.
	//
	RemotePath string `json:"RemotePath,omitempty"`

	// Username to log in to the remote server.
	//
	Username string `json:"Username,omitempty"`

	// Identity of the image for Virtual Media mapping.
	//
	VolumeName string `json:"VolumeName,omitempty"`

	// vmedia mapping a o0 p0
	VmediaMappingAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *VmediaMappingAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Type of Authentication protocol when CIFS is used for communication with the remote server.
		//
		// Enum: [none ntlm ntlmi ntlmv2 ntlmv2i ntlmssp ntlmsspi]
		AuthenticationProtocol *string `json:"AuthenticationProtocol,omitempty"`

		// Type of remote Virtual Media device.
		//
		// Enum: [cdd hdd]
		DeviceType *string `json:"DeviceType,omitempty"`

		// IP address or hostname of the remote server.
		//
		HostName string `json:"HostName,omitempty"`

		// is password set
		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		// Mount options for the Virtual Media mapping. The field can be left blank or filled in a comma separated list with the following options.\n For NFS, supported options are ro, rw, nolock, noexec, soft, port=VALUE, timeo=VALUE, retry=VALUE.\n For CIFS, supported options are soft, nounix, noserverino, guest.\n For HTTP/HTTPS, the only supported option is noauto.
		//
		MountOptions string `json:"MountOptions,omitempty"`

		// Protocol to use to communicate with the remote server.
		//
		// Enum: [nfs cifs http https]
		MountProtocol *string `json:"MountProtocol,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Password associated with the username.
		//
		Password string `json:"Password,omitempty"`

		// Name of the remote file. It should be of .img format for HDD Virtual Media mapping and .iso format for CDD Virtual Media mapping.
		//
		RemoteFile string `json:"RemoteFile,omitempty"`

		// Path to the location of the image on the remote server. Preferred format is /path/.
		//
		RemotePath string `json:"RemotePath,omitempty"`

		// Username to log in to the remote server.
		//
		Username string `json:"Username,omitempty"`

		// Identity of the image for Virtual Media mapping.
		//
		VolumeName string `json:"VolumeName,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv VmediaMappingAO0P0

	rcv.AuthenticationProtocol = stage1.AuthenticationProtocol

	rcv.DeviceType = stage1.DeviceType

	rcv.HostName = stage1.HostName

	rcv.IsPasswordSet = stage1.IsPasswordSet

	rcv.MountOptions = stage1.MountOptions

	rcv.MountProtocol = stage1.MountProtocol

	rcv.ObjectType = stage1.ObjectType

	rcv.Password = stage1.Password

	rcv.RemoteFile = stage1.RemoteFile

	rcv.RemotePath = stage1.RemotePath

	rcv.Username = stage1.Username

	rcv.VolumeName = stage1.VolumeName

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "AuthenticationProtocol")

	delete(stage2, "DeviceType")

	delete(stage2, "HostName")

	delete(stage2, "IsPasswordSet")

	delete(stage2, "MountOptions")

	delete(stage2, "MountProtocol")

	delete(stage2, "ObjectType")

	delete(stage2, "Password")

	delete(stage2, "RemoteFile")

	delete(stage2, "RemotePath")

	delete(stage2, "Username")

	delete(stage2, "VolumeName")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.VmediaMappingAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m VmediaMappingAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Type of Authentication protocol when CIFS is used for communication with the remote server.
		//
		// Enum: [none ntlm ntlmi ntlmv2 ntlmv2i ntlmssp ntlmsspi]
		AuthenticationProtocol *string `json:"AuthenticationProtocol,omitempty"`

		// Type of remote Virtual Media device.
		//
		// Enum: [cdd hdd]
		DeviceType *string `json:"DeviceType,omitempty"`

		// IP address or hostname of the remote server.
		//
		HostName string `json:"HostName,omitempty"`

		// is password set
		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		// Mount options for the Virtual Media mapping. The field can be left blank or filled in a comma separated list with the following options.\n For NFS, supported options are ro, rw, nolock, noexec, soft, port=VALUE, timeo=VALUE, retry=VALUE.\n For CIFS, supported options are soft, nounix, noserverino, guest.\n For HTTP/HTTPS, the only supported option is noauto.
		//
		MountOptions string `json:"MountOptions,omitempty"`

		// Protocol to use to communicate with the remote server.
		//
		// Enum: [nfs cifs http https]
		MountProtocol *string `json:"MountProtocol,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Password associated with the username.
		//
		Password string `json:"Password,omitempty"`

		// Name of the remote file. It should be of .img format for HDD Virtual Media mapping and .iso format for CDD Virtual Media mapping.
		//
		RemoteFile string `json:"RemoteFile,omitempty"`

		// Path to the location of the image on the remote server. Preferred format is /path/.
		//
		RemotePath string `json:"RemotePath,omitempty"`

		// Username to log in to the remote server.
		//
		Username string `json:"Username,omitempty"`

		// Identity of the image for Virtual Media mapping.
		//
		VolumeName string `json:"VolumeName,omitempty"`
	}

	stage1.AuthenticationProtocol = m.AuthenticationProtocol

	stage1.DeviceType = m.DeviceType

	stage1.HostName = m.HostName

	stage1.IsPasswordSet = m.IsPasswordSet

	stage1.MountOptions = m.MountOptions

	stage1.MountProtocol = m.MountProtocol

	stage1.ObjectType = m.ObjectType

	stage1.Password = m.Password

	stage1.RemoteFile = m.RemoteFile

	stage1.RemotePath = m.RemotePath

	stage1.Username = m.Username

	stage1.VolumeName = m.VolumeName

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.VmediaMappingAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.VmediaMappingAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this vmedia mapping a o0 p0
func (m *VmediaMappingAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vmediaMappingAO0P0TypeAuthenticationProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","ntlm","ntlmi","ntlmv2","ntlmv2i","ntlmssp","ntlmsspi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmediaMappingAO0P0TypeAuthenticationProtocolPropEnum = append(vmediaMappingAO0P0TypeAuthenticationProtocolPropEnum, v)
	}
}

const (

	// VmediaMappingAO0P0AuthenticationProtocolNone captures enum value "none"
	VmediaMappingAO0P0AuthenticationProtocolNone string = "none"

	// VmediaMappingAO0P0AuthenticationProtocolNtlm captures enum value "ntlm"
	VmediaMappingAO0P0AuthenticationProtocolNtlm string = "ntlm"

	// VmediaMappingAO0P0AuthenticationProtocolNtlmi captures enum value "ntlmi"
	VmediaMappingAO0P0AuthenticationProtocolNtlmi string = "ntlmi"

	// VmediaMappingAO0P0AuthenticationProtocolNtlmv2 captures enum value "ntlmv2"
	VmediaMappingAO0P0AuthenticationProtocolNtlmv2 string = "ntlmv2"

	// VmediaMappingAO0P0AuthenticationProtocolNtlmv2i captures enum value "ntlmv2i"
	VmediaMappingAO0P0AuthenticationProtocolNtlmv2i string = "ntlmv2i"

	// VmediaMappingAO0P0AuthenticationProtocolNtlmssp captures enum value "ntlmssp"
	VmediaMappingAO0P0AuthenticationProtocolNtlmssp string = "ntlmssp"

	// VmediaMappingAO0P0AuthenticationProtocolNtlmsspi captures enum value "ntlmsspi"
	VmediaMappingAO0P0AuthenticationProtocolNtlmsspi string = "ntlmsspi"
)

// prop value enum
func (m *VmediaMappingAO0P0) validateAuthenticationProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vmediaMappingAO0P0TypeAuthenticationProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VmediaMappingAO0P0) validateAuthenticationProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticationProtocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationProtocolEnum("AuthenticationProtocol", "body", *m.AuthenticationProtocol); err != nil {
		return err
	}

	return nil
}

var vmediaMappingAO0P0TypeDeviceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cdd","hdd"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmediaMappingAO0P0TypeDeviceTypePropEnum = append(vmediaMappingAO0P0TypeDeviceTypePropEnum, v)
	}
}

const (

	// VmediaMappingAO0P0DeviceTypeCdd captures enum value "cdd"
	VmediaMappingAO0P0DeviceTypeCdd string = "cdd"

	// VmediaMappingAO0P0DeviceTypeHdd captures enum value "hdd"
	VmediaMappingAO0P0DeviceTypeHdd string = "hdd"
)

// prop value enum
func (m *VmediaMappingAO0P0) validateDeviceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vmediaMappingAO0P0TypeDeviceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VmediaMappingAO0P0) validateDeviceType(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeviceTypeEnum("DeviceType", "body", *m.DeviceType); err != nil {
		return err
	}

	return nil
}

var vmediaMappingAO0P0TypeMountProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nfs","cifs","http","https"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmediaMappingAO0P0TypeMountProtocolPropEnum = append(vmediaMappingAO0P0TypeMountProtocolPropEnum, v)
	}
}

const (

	// VmediaMappingAO0P0MountProtocolNfs captures enum value "nfs"
	VmediaMappingAO0P0MountProtocolNfs string = "nfs"

	// VmediaMappingAO0P0MountProtocolCifs captures enum value "cifs"
	VmediaMappingAO0P0MountProtocolCifs string = "cifs"

	// VmediaMappingAO0P0MountProtocolHTTP captures enum value "http"
	VmediaMappingAO0P0MountProtocolHTTP string = "http"

	// VmediaMappingAO0P0MountProtocolHTTPS captures enum value "https"
	VmediaMappingAO0P0MountProtocolHTTPS string = "https"
)

// prop value enum
func (m *VmediaMappingAO0P0) validateMountProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vmediaMappingAO0P0TypeMountProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VmediaMappingAO0P0) validateMountProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.MountProtocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateMountProtocolEnum("MountProtocol", "body", *m.MountProtocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VmediaMappingAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmediaMappingAO0P0) UnmarshalBinary(b []byte) error {
	var res VmediaMappingAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
