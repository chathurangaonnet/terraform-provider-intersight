// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetManagedDeviceStatus Asset:Managed Device Status
//
// Maintains the Managed Device Status.
//
// swagger:model assetManagedDeviceStatus
type AssetManagedDeviceStatus struct {
	AssetManagedDeviceStatusAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AssetManagedDeviceStatus) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 AssetManagedDeviceStatusAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.AssetManagedDeviceStatusAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AssetManagedDeviceStatus) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.AssetManagedDeviceStatusAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this asset managed device status
func (m *AssetManagedDeviceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AssetManagedDeviceStatusAO0P0
	if err := m.AssetManagedDeviceStatusAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *AssetManagedDeviceStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetManagedDeviceStatus) UnmarshalBinary(b []byte) error {
	var res AssetManagedDeviceStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetManagedDeviceStatusAO0P0 asset managed device status a o0 p0
// swagger:model AssetManagedDeviceStatusAO0P0
type AssetManagedDeviceStatusAO0P0 struct {

	// Port used for the connection to the Cloud by the Device Connector for the Managed Device.
	//
	CloudPort int64 `json:"CloudPort,omitempty"`

	// Maintains the reason for the failure of connection to the Device in case of connection failure.
	//
	ConnectionFailureReason string `json:"ConnectionFailureReason,omitempty"`

	// Maintains the status of the connection to the Device.
	//
	// Enum: [Unknown Success Failure]
	ConnectionStatus *string `json:"ConnectionStatus,omitempty"`

	// Maintains code related to error from Device Connector, if any.
	//
	ErrorCode int64 `json:"ErrorCode,omitempty"`

	// Maintains the reason for the error from Device Connector, if any.
	//
	ErrorReason string `json:"ErrorReason,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// Maintains the Process pid of the the Device Connector for the Managed Device.
	//
	ProcessID int64 `json:"ProcessId,omitempty"`

	// Port used for receiving requests from Device Connector Manager by the Device Connector for the Managed Device.
	//
	ServerPort int64 `json:"ServerPort,omitempty"`

	// Maintains the state of the Managed Device, such as Start Success, Start Failure, etc. See ManagedDeviceState for device connection states.
	//
	// Enum: [New StartSent StartSentFailure StartSuccess StartFailure UpdateSentFailure UpdateSent DeleteSentFailure DeleteInProgress DeleteFailure]
	State *string `json:"State,omitempty"`

	// asset managed device status a o0 p0
	AssetManagedDeviceStatusAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *AssetManagedDeviceStatusAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Port used for the connection to the Cloud by the Device Connector for the Managed Device.
		//
		CloudPort int64 `json:"CloudPort,omitempty"`

		// Maintains the reason for the failure of connection to the Device in case of connection failure.
		//
		ConnectionFailureReason string `json:"ConnectionFailureReason,omitempty"`

		// Maintains the status of the connection to the Device.
		//
		// Enum: [Unknown Success Failure]
		ConnectionStatus *string `json:"ConnectionStatus,omitempty"`

		// Maintains code related to error from Device Connector, if any.
		//
		ErrorCode int64 `json:"ErrorCode,omitempty"`

		// Maintains the reason for the error from Device Connector, if any.
		//
		ErrorReason string `json:"ErrorReason,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Maintains the Process pid of the the Device Connector for the Managed Device.
		//
		ProcessID int64 `json:"ProcessId,omitempty"`

		// Port used for receiving requests from Device Connector Manager by the Device Connector for the Managed Device.
		//
		ServerPort int64 `json:"ServerPort,omitempty"`

		// Maintains the state of the Managed Device, such as Start Success, Start Failure, etc. See ManagedDeviceState for device connection states.
		//
		// Enum: [New StartSent StartSentFailure StartSuccess StartFailure UpdateSentFailure UpdateSent DeleteSentFailure DeleteInProgress DeleteFailure]
		State *string `json:"State,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv AssetManagedDeviceStatusAO0P0

	rcv.CloudPort = stage1.CloudPort

	rcv.ConnectionFailureReason = stage1.ConnectionFailureReason

	rcv.ConnectionStatus = stage1.ConnectionStatus

	rcv.ErrorCode = stage1.ErrorCode

	rcv.ErrorReason = stage1.ErrorReason

	rcv.ObjectType = stage1.ObjectType

	rcv.ProcessID = stage1.ProcessID

	rcv.ServerPort = stage1.ServerPort

	rcv.State = stage1.State

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "CloudPort")

	delete(stage2, "ConnectionFailureReason")

	delete(stage2, "ConnectionStatus")

	delete(stage2, "ErrorCode")

	delete(stage2, "ErrorReason")

	delete(stage2, "ObjectType")

	delete(stage2, "ProcessId")

	delete(stage2, "ServerPort")

	delete(stage2, "State")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.AssetManagedDeviceStatusAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m AssetManagedDeviceStatusAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Port used for the connection to the Cloud by the Device Connector for the Managed Device.
		//
		CloudPort int64 `json:"CloudPort,omitempty"`

		// Maintains the reason for the failure of connection to the Device in case of connection failure.
		//
		ConnectionFailureReason string `json:"ConnectionFailureReason,omitempty"`

		// Maintains the status of the connection to the Device.
		//
		// Enum: [Unknown Success Failure]
		ConnectionStatus *string `json:"ConnectionStatus,omitempty"`

		// Maintains code related to error from Device Connector, if any.
		//
		ErrorCode int64 `json:"ErrorCode,omitempty"`

		// Maintains the reason for the error from Device Connector, if any.
		//
		ErrorReason string `json:"ErrorReason,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Maintains the Process pid of the the Device Connector for the Managed Device.
		//
		ProcessID int64 `json:"ProcessId,omitempty"`

		// Port used for receiving requests from Device Connector Manager by the Device Connector for the Managed Device.
		//
		ServerPort int64 `json:"ServerPort,omitempty"`

		// Maintains the state of the Managed Device, such as Start Success, Start Failure, etc. See ManagedDeviceState for device connection states.
		//
		// Enum: [New StartSent StartSentFailure StartSuccess StartFailure UpdateSentFailure UpdateSent DeleteSentFailure DeleteInProgress DeleteFailure]
		State *string `json:"State,omitempty"`
	}

	stage1.CloudPort = m.CloudPort

	stage1.ConnectionFailureReason = m.ConnectionFailureReason

	stage1.ConnectionStatus = m.ConnectionStatus

	stage1.ErrorCode = m.ErrorCode

	stage1.ErrorReason = m.ErrorReason

	stage1.ObjectType = m.ObjectType

	stage1.ProcessID = m.ProcessID

	stage1.ServerPort = m.ServerPort

	stage1.State = m.State

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.AssetManagedDeviceStatusAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.AssetManagedDeviceStatusAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this asset managed device status a o0 p0
func (m *AssetManagedDeviceStatusAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var assetManagedDeviceStatusAO0P0TypeConnectionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Success","Failure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetManagedDeviceStatusAO0P0TypeConnectionStatusPropEnum = append(assetManagedDeviceStatusAO0P0TypeConnectionStatusPropEnum, v)
	}
}

const (

	// AssetManagedDeviceStatusAO0P0ConnectionStatusUnknown captures enum value "Unknown"
	AssetManagedDeviceStatusAO0P0ConnectionStatusUnknown string = "Unknown"

	// AssetManagedDeviceStatusAO0P0ConnectionStatusSuccess captures enum value "Success"
	AssetManagedDeviceStatusAO0P0ConnectionStatusSuccess string = "Success"

	// AssetManagedDeviceStatusAO0P0ConnectionStatusFailure captures enum value "Failure"
	AssetManagedDeviceStatusAO0P0ConnectionStatusFailure string = "Failure"
)

// prop value enum
func (m *AssetManagedDeviceStatusAO0P0) validateConnectionStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, assetManagedDeviceStatusAO0P0TypeConnectionStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AssetManagedDeviceStatusAO0P0) validateConnectionStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateConnectionStatusEnum("ConnectionStatus", "body", *m.ConnectionStatus); err != nil {
		return err
	}

	return nil
}

var assetManagedDeviceStatusAO0P0TypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["New","StartSent","StartSentFailure","StartSuccess","StartFailure","UpdateSentFailure","UpdateSent","DeleteSentFailure","DeleteInProgress","DeleteFailure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetManagedDeviceStatusAO0P0TypeStatePropEnum = append(assetManagedDeviceStatusAO0P0TypeStatePropEnum, v)
	}
}

const (

	// AssetManagedDeviceStatusAO0P0StateNew captures enum value "New"
	AssetManagedDeviceStatusAO0P0StateNew string = "New"

	// AssetManagedDeviceStatusAO0P0StateStartSent captures enum value "StartSent"
	AssetManagedDeviceStatusAO0P0StateStartSent string = "StartSent"

	// AssetManagedDeviceStatusAO0P0StateStartSentFailure captures enum value "StartSentFailure"
	AssetManagedDeviceStatusAO0P0StateStartSentFailure string = "StartSentFailure"

	// AssetManagedDeviceStatusAO0P0StateStartSuccess captures enum value "StartSuccess"
	AssetManagedDeviceStatusAO0P0StateStartSuccess string = "StartSuccess"

	// AssetManagedDeviceStatusAO0P0StateStartFailure captures enum value "StartFailure"
	AssetManagedDeviceStatusAO0P0StateStartFailure string = "StartFailure"

	// AssetManagedDeviceStatusAO0P0StateUpdateSentFailure captures enum value "UpdateSentFailure"
	AssetManagedDeviceStatusAO0P0StateUpdateSentFailure string = "UpdateSentFailure"

	// AssetManagedDeviceStatusAO0P0StateUpdateSent captures enum value "UpdateSent"
	AssetManagedDeviceStatusAO0P0StateUpdateSent string = "UpdateSent"

	// AssetManagedDeviceStatusAO0P0StateDeleteSentFailure captures enum value "DeleteSentFailure"
	AssetManagedDeviceStatusAO0P0StateDeleteSentFailure string = "DeleteSentFailure"

	// AssetManagedDeviceStatusAO0P0StateDeleteInProgress captures enum value "DeleteInProgress"
	AssetManagedDeviceStatusAO0P0StateDeleteInProgress string = "DeleteInProgress"

	// AssetManagedDeviceStatusAO0P0StateDeleteFailure captures enum value "DeleteFailure"
	AssetManagedDeviceStatusAO0P0StateDeleteFailure string = "DeleteFailure"
)

// prop value enum
func (m *AssetManagedDeviceStatusAO0P0) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, assetManagedDeviceStatusAO0P0TypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AssetManagedDeviceStatusAO0P0) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("State", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetManagedDeviceStatusAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetManagedDeviceStatusAO0P0) UnmarshalBinary(b []byte) error {
	var res AssetManagedDeviceStatusAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
