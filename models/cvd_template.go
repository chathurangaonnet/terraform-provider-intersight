// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CvdTemplate Cvd:Template
//
// Template represents a CVD definition
//
// swagger:model cvdTemplate
type CvdTemplate struct {
	MoBaseMo

	// URL pointing to the S3 location of the workflow JSON which performs the deployment task for this CVD
	//
	Deployer string `json:"Deployer,omitempty"`

	// A collection of input name-value pairs
	//
	DeployerInput []*CvdInputMeta `json:"DeployerInput"`

	// A short description for the CVD
	//
	Description []string `json:"Description"`

	// Unique name identifier for the CVD
	//
	Name string `json:"Name,omitempty"`

	// S3 directory location where the CVD definition has been uploaded
	//
	UploadLocation string `json:"UploadLocation,omitempty"`

	// URL pointing to the S3 location of the workflow JSON which performs the validation task for this CVD
	//
	Validator string `json:"Validator,omitempty"`

	// A collection of input name-value pairs
	//
	ValidatorInput []*CvdInputMeta `json:"ValidatorInput"`

	// The version or revision number of the CVD definition
	//
	Version int64 `json:"Version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CvdTemplate) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Deployer string `json:"Deployer,omitempty"`

		DeployerInput []*CvdInputMeta `json:"DeployerInput"`

		Description []string `json:"Description"`

		Name string `json:"Name,omitempty"`

		UploadLocation string `json:"UploadLocation,omitempty"`

		Validator string `json:"Validator,omitempty"`

		ValidatorInput []*CvdInputMeta `json:"ValidatorInput"`

		Version int64 `json:"Version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Deployer = dataAO1.Deployer

	m.DeployerInput = dataAO1.DeployerInput

	m.Description = dataAO1.Description

	m.Name = dataAO1.Name

	m.UploadLocation = dataAO1.UploadLocation

	m.Validator = dataAO1.Validator

	m.ValidatorInput = dataAO1.ValidatorInput

	m.Version = dataAO1.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CvdTemplate) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Deployer string `json:"Deployer,omitempty"`

		DeployerInput []*CvdInputMeta `json:"DeployerInput"`

		Description []string `json:"Description"`

		Name string `json:"Name,omitempty"`

		UploadLocation string `json:"UploadLocation,omitempty"`

		Validator string `json:"Validator,omitempty"`

		ValidatorInput []*CvdInputMeta `json:"ValidatorInput"`

		Version int64 `json:"Version,omitempty"`
	}

	dataAO1.Deployer = m.Deployer

	dataAO1.DeployerInput = m.DeployerInput

	dataAO1.Description = m.Description

	dataAO1.Name = m.Name

	dataAO1.UploadLocation = m.UploadLocation

	dataAO1.Validator = m.Validator

	dataAO1.ValidatorInput = m.ValidatorInput

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this cvd template
func (m *CvdTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployerInput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidatorInput(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CvdTemplate) validateDeployerInput(formats strfmt.Registry) error {

	if swag.IsZero(m.DeployerInput) { // not required
		return nil
	}

	for i := 0; i < len(m.DeployerInput); i++ {
		if swag.IsZero(m.DeployerInput[i]) { // not required
			continue
		}

		if m.DeployerInput[i] != nil {
			if err := m.DeployerInput[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DeployerInput" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CvdTemplate) validateValidatorInput(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidatorInput) { // not required
		return nil
	}

	for i := 0; i < len(m.ValidatorInput); i++ {
		if swag.IsZero(m.ValidatorInput[i]) { // not required
			continue
		}

		if m.ValidatorInput[i] != nil {
			if err := m.ValidatorInput[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ValidatorInput" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CvdTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CvdTemplate) UnmarshalBinary(b []byte) error {
	var res CvdTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
