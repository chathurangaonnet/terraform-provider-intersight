// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ConnectorStreamInput Connector:Stream Input
//
// Write input to a running stream. Cloud services can send input to a running stream. e.g. input to a running pseudoterminal If the requested stream is not running and error will be returned.
//
// swagger:model connectorStreamInput
type ConnectorStreamInput struct {
	ConnectorStreamMessage

	// The input to write to the stream plugin.
	//
	// Format: binary
	Input io.ReadCloser `json:"Input,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ConnectorStreamInput) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ConnectorStreamMessage
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ConnectorStreamMessage = aO0

	// AO1
	var dataAO1 struct {
		Input io.ReadCloser `json:"Input,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Input = dataAO1.Input

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ConnectorStreamInput) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ConnectorStreamMessage)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Input io.ReadCloser `json:"Input,omitempty"`
	}

	dataAO1.Input = m.Input

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this connector stream input
func (m *ConnectorStreamInput) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ConnectorStreamMessage
	if err := m.ConnectorStreamMessage.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ConnectorStreamInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectorStreamInput) UnmarshalBinary(b []byte) error {
	var res ConnectorStreamInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
