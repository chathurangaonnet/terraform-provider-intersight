// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// StorageRemoteKeySetting Remote Key Management
//
// This type models the remote key configurarion required for disks encryptions. KMIP is the only remote key protocol supported in the policy.
//
// swagger:model storageRemoteKeySetting
type StorageRemoteKeySetting struct {
	StorageRemoteKeySettingAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageRemoteKeySetting) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StorageRemoteKeySettingAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.StorageRemoteKeySettingAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageRemoteKeySetting) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.StorageRemoteKeySettingAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage remote key setting
func (m *StorageRemoteKeySetting) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StorageRemoteKeySettingAO0P0
	if err := m.StorageRemoteKeySettingAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *StorageRemoteKeySetting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageRemoteKeySetting) UnmarshalBinary(b []byte) error {
	var res StorageRemoteKeySetting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageRemoteKeySettingAO0P0 storage remote key setting a o0 p0
// swagger:model StorageRemoteKeySettingAO0P0
type StorageRemoteKeySettingAO0P0 struct {

	// is password set
	IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// This property is used to specify password for the KMIP server login.
	//
	Password string `json:"Password,omitempty"`

	// This property is used to port to which the KMIP client should connect.
	//
	Port int64 `json:"Port,omitempty"`

	// This property is used to store the address of the KMIP server. It could be an IPv4 address or an IPv6 address or hostname. Hostnames are valid only when Inband is configured for the CIMC address.
	//
	PrimaryServer string `json:"PrimaryServer,omitempty"`

	// This property is used to store the address of the KMIP server. It could be an IPv4 address or an IPv6 address or hostname. Hostnames are valid only when Inband is configured for the CIMC address.
	//
	SecondaryServer string `json:"SecondaryServer,omitempty"`

	// This property is used to store the certificate/ public key of the KMIP server This is required for initiating secure communication with the server.
	//
	ServerCertificate string `json:"ServerCertificate,omitempty"`

	// This property is used to specify user name for the KMIP server login.
	//
	Username string `json:"Username,omitempty"`

	// storage remote key setting a o0 p0
	StorageRemoteKeySettingAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *StorageRemoteKeySettingAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// is password set
		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// This property is used to specify password for the KMIP server login.
		//
		Password string `json:"Password,omitempty"`

		// This property is used to port to which the KMIP client should connect.
		//
		Port int64 `json:"Port,omitempty"`

		// This property is used to store the address of the KMIP server. It could be an IPv4 address or an IPv6 address or hostname. Hostnames are valid only when Inband is configured for the CIMC address.
		//
		PrimaryServer string `json:"PrimaryServer,omitempty"`

		// This property is used to store the address of the KMIP server. It could be an IPv4 address or an IPv6 address or hostname. Hostnames are valid only when Inband is configured for the CIMC address.
		//
		SecondaryServer string `json:"SecondaryServer,omitempty"`

		// This property is used to store the certificate/ public key of the KMIP server This is required for initiating secure communication with the server.
		//
		ServerCertificate string `json:"ServerCertificate,omitempty"`

		// This property is used to specify user name for the KMIP server login.
		//
		Username string `json:"Username,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv StorageRemoteKeySettingAO0P0

	rcv.IsPasswordSet = stage1.IsPasswordSet

	rcv.ObjectType = stage1.ObjectType

	rcv.Password = stage1.Password

	rcv.Port = stage1.Port

	rcv.PrimaryServer = stage1.PrimaryServer

	rcv.SecondaryServer = stage1.SecondaryServer

	rcv.ServerCertificate = stage1.ServerCertificate

	rcv.Username = stage1.Username

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "IsPasswordSet")

	delete(stage2, "ObjectType")

	delete(stage2, "Password")

	delete(stage2, "Port")

	delete(stage2, "PrimaryServer")

	delete(stage2, "SecondaryServer")

	delete(stage2, "ServerCertificate")

	delete(stage2, "Username")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.StorageRemoteKeySettingAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m StorageRemoteKeySettingAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// is password set
		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// This property is used to specify password for the KMIP server login.
		//
		Password string `json:"Password,omitempty"`

		// This property is used to port to which the KMIP client should connect.
		//
		Port int64 `json:"Port,omitempty"`

		// This property is used to store the address of the KMIP server. It could be an IPv4 address or an IPv6 address or hostname. Hostnames are valid only when Inband is configured for the CIMC address.
		//
		PrimaryServer string `json:"PrimaryServer,omitempty"`

		// This property is used to store the address of the KMIP server. It could be an IPv4 address or an IPv6 address or hostname. Hostnames are valid only when Inband is configured for the CIMC address.
		//
		SecondaryServer string `json:"SecondaryServer,omitempty"`

		// This property is used to store the certificate/ public key of the KMIP server This is required for initiating secure communication with the server.
		//
		ServerCertificate string `json:"ServerCertificate,omitempty"`

		// This property is used to specify user name for the KMIP server login.
		//
		Username string `json:"Username,omitempty"`
	}

	stage1.IsPasswordSet = m.IsPasswordSet

	stage1.ObjectType = m.ObjectType

	stage1.Password = m.Password

	stage1.Port = m.Port

	stage1.PrimaryServer = m.PrimaryServer

	stage1.SecondaryServer = m.SecondaryServer

	stage1.ServerCertificate = m.ServerCertificate

	stage1.Username = m.Username

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.StorageRemoteKeySettingAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.StorageRemoteKeySettingAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this storage remote key setting a o0 p0
func (m *StorageRemoteKeySettingAO0P0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageRemoteKeySettingAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageRemoteKeySettingAO0P0) UnmarshalBinary(b []byte) error {
	var res StorageRemoteKeySettingAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
