// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowAPI API
//
// Intersight Orchestrator supports generic API workflow tasks that can execute
// an API given the request body and response parser specification.
//
// API type models a single API request within a batch of requests that get
// executed within a single workflow task.
//
// swagger:model workflowApi
type WorkflowAPI struct {
	WorkflowAPIAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowAPI) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkflowAPIAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkflowAPIAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowAPI) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WorkflowAPIAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow Api
func (m *WorkflowAPI) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkflowAPIAO0P0
	if err := m.WorkflowAPIAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowAPI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowAPI) UnmarshalBinary(b []byte) error {
	var res WorkflowAPI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkflowAPIAO0P0 workflow API a o0 p0
// swagger:model WorkflowAPIAO0P0
type WorkflowAPIAO0P0 struct {

	// The optional request body that is sent as part of this API request.
	//
	// The request body can contain a golang template that can be populated with task input
	// parameters and previous API output parameters.
	//
	//
	Body string `json:"Body,omitempty"`

	// Intersight Orchestrator, with the support of response parser specification,
	// can extract the values from API responses and map them to task output parameters.
	// The value extraction is supported for response content types XML and JSON.
	//
	// The type of the content that gets passed as payload and response in this
	// API.
	//
	//
	// Enum: [json xml]
	ContentType *string `json:"ContentType,omitempty"`

	// The expected state expression, if provided, allows the Intersight Orchestrator
	// to mark a task status as success/fail by checking the extracted API
	// values against a set of expected values.
	//
	// The expected state is given as a golang template that has to evaluate to a
	// final content true/false.
	//
	// This property is deprecated in favour of Outcomes property.
	//
	//
	ExpectedState string `json:"ExpectedState,omitempty"`

	// A reference name for this API request within the batch API request.
	//
	// This name shall be used to map the API output parameters to subsequent
	// API input parameters within a batch API task.
	//
	//
	Name string `json:"Name,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// All the possible outcomes of this API are captured here. Outcomes property
	// is a collection property of type workflow.Outcome objects.
	//
	// The outcomes can be mapped to the message to be shown. The outcomes are
	// evaluated in the order they are given. At the end of the outcomes list,
	// an catchall success/fail outcome can be added with condition as 'true'.
	//
	// This is an optional
	// property and if not specified the task will be marked as success.
	//
	//
	Outcomes interface{} `json:"Outcomes,omitempty"`

	// The optional grammar specification for parsing the response to extract the
	// required values.
	//
	// The specification should have extraction specification specified for
	// all the API output parameters.
	//
	//
	ResponseSpec *ContentGrammar `json:"ResponseSpec,omitempty"`

	// The duration in seconds by which the API response is expected from the API target.
	//
	// If the end point does not respond for the API request within this timeout
	// duration, the task will be marked as failed.
	//
	//
	Timeout int64 `json:"Timeout,omitempty"`

	// workflow API a o0 p0
	WorkflowAPIAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *WorkflowAPIAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// The optional request body that is sent as part of this API request.
		//
		// The request body can contain a golang template that can be populated with task input
		// parameters and previous API output parameters.
		//
		//
		Body string `json:"Body,omitempty"`

		// Intersight Orchestrator, with the support of response parser specification,
		// can extract the values from API responses and map them to task output parameters.
		// The value extraction is supported for response content types XML and JSON.
		//
		// The type of the content that gets passed as payload and response in this
		// API.
		//
		//
		// Enum: [json xml]
		ContentType *string `json:"ContentType,omitempty"`

		// The expected state expression, if provided, allows the Intersight Orchestrator
		// to mark a task status as success/fail by checking the extracted API
		// values against a set of expected values.
		//
		// The expected state is given as a golang template that has to evaluate to a
		// final content true/false.
		//
		// This property is deprecated in favour of Outcomes property.
		//
		//
		ExpectedState string `json:"ExpectedState,omitempty"`

		// A reference name for this API request within the batch API request.
		//
		// This name shall be used to map the API output parameters to subsequent
		// API input parameters within a batch API task.
		//
		//
		Name string `json:"Name,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// All the possible outcomes of this API are captured here. Outcomes property
		// is a collection property of type workflow.Outcome objects.
		//
		// The outcomes can be mapped to the message to be shown. The outcomes are
		// evaluated in the order they are given. At the end of the outcomes list,
		// an catchall success/fail outcome can be added with condition as 'true'.
		//
		// This is an optional
		// property and if not specified the task will be marked as success.
		//
		//
		Outcomes interface{} `json:"Outcomes,omitempty"`

		// The optional grammar specification for parsing the response to extract the
		// required values.
		//
		// The specification should have extraction specification specified for
		// all the API output parameters.
		//
		//
		ResponseSpec *ContentGrammar `json:"ResponseSpec,omitempty"`

		// The duration in seconds by which the API response is expected from the API target.
		//
		// If the end point does not respond for the API request within this timeout
		// duration, the task will be marked as failed.
		//
		//
		Timeout int64 `json:"Timeout,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv WorkflowAPIAO0P0

	rcv.Body = stage1.Body

	rcv.ContentType = stage1.ContentType

	rcv.ExpectedState = stage1.ExpectedState

	rcv.Name = stage1.Name

	rcv.ObjectType = stage1.ObjectType

	rcv.Outcomes = stage1.Outcomes

	rcv.ResponseSpec = stage1.ResponseSpec

	rcv.Timeout = stage1.Timeout

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Body")

	delete(stage2, "ContentType")

	delete(stage2, "ExpectedState")

	delete(stage2, "Name")

	delete(stage2, "ObjectType")

	delete(stage2, "Outcomes")

	delete(stage2, "ResponseSpec")

	delete(stage2, "Timeout")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.WorkflowAPIAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m WorkflowAPIAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// The optional request body that is sent as part of this API request.
		//
		// The request body can contain a golang template that can be populated with task input
		// parameters and previous API output parameters.
		//
		//
		Body string `json:"Body,omitempty"`

		// Intersight Orchestrator, with the support of response parser specification,
		// can extract the values from API responses and map them to task output parameters.
		// The value extraction is supported for response content types XML and JSON.
		//
		// The type of the content that gets passed as payload and response in this
		// API.
		//
		//
		// Enum: [json xml]
		ContentType *string `json:"ContentType,omitempty"`

		// The expected state expression, if provided, allows the Intersight Orchestrator
		// to mark a task status as success/fail by checking the extracted API
		// values against a set of expected values.
		//
		// The expected state is given as a golang template that has to evaluate to a
		// final content true/false.
		//
		// This property is deprecated in favour of Outcomes property.
		//
		//
		ExpectedState string `json:"ExpectedState,omitempty"`

		// A reference name for this API request within the batch API request.
		//
		// This name shall be used to map the API output parameters to subsequent
		// API input parameters within a batch API task.
		//
		//
		Name string `json:"Name,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// All the possible outcomes of this API are captured here. Outcomes property
		// is a collection property of type workflow.Outcome objects.
		//
		// The outcomes can be mapped to the message to be shown. The outcomes are
		// evaluated in the order they are given. At the end of the outcomes list,
		// an catchall success/fail outcome can be added with condition as 'true'.
		//
		// This is an optional
		// property and if not specified the task will be marked as success.
		//
		//
		Outcomes interface{} `json:"Outcomes,omitempty"`

		// The optional grammar specification for parsing the response to extract the
		// required values.
		//
		// The specification should have extraction specification specified for
		// all the API output parameters.
		//
		//
		ResponseSpec *ContentGrammar `json:"ResponseSpec,omitempty"`

		// The duration in seconds by which the API response is expected from the API target.
		//
		// If the end point does not respond for the API request within this timeout
		// duration, the task will be marked as failed.
		//
		//
		Timeout int64 `json:"Timeout,omitempty"`
	}

	stage1.Body = m.Body

	stage1.ContentType = m.ContentType

	stage1.ExpectedState = m.ExpectedState

	stage1.Name = m.Name

	stage1.ObjectType = m.ObjectType

	stage1.Outcomes = m.Outcomes

	stage1.ResponseSpec = m.ResponseSpec

	stage1.Timeout = m.Timeout

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.WorkflowAPIAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.WorkflowAPIAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this workflow API a o0 p0
func (m *WorkflowAPIAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workflowApiAO0P0TypeContentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["json","xml"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowApiAO0P0TypeContentTypePropEnum = append(workflowApiAO0P0TypeContentTypePropEnum, v)
	}
}

const (

	// WorkflowAPIAO0P0ContentTypeJSON captures enum value "json"
	WorkflowAPIAO0P0ContentTypeJSON string = "json"

	// WorkflowAPIAO0P0ContentTypeXML captures enum value "xml"
	WorkflowAPIAO0P0ContentTypeXML string = "xml"
)

// prop value enum
func (m *WorkflowAPIAO0P0) validateContentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workflowApiAO0P0TypeContentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowAPIAO0P0) validateContentType(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateContentTypeEnum("ContentType", "body", *m.ContentType); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowAPIAO0P0) validateResponseSpec(formats strfmt.Registry) error {

	if swag.IsZero(m.ResponseSpec) { // not required
		return nil
	}

	if m.ResponseSpec != nil {
		if err := m.ResponseSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResponseSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowAPIAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowAPIAO0P0) UnmarshalBinary(b []byte) error {
	var res WorkflowAPIAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
