// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TamAdvisoryDefinition Tam:Advisory Definition
//
// An Intersight Advisory. An advisory represents an identification of a potential issue and may also include  a recommendation for resolving the said issue. Advisories may be of different kind and severity. for e.g. It could be a security vulnerability or a performance issue or a hardware issue with different recommendations for resolving them.
//
// swagger:model tamAdvisoryDefinition
type TamAdvisoryDefinition struct {
	TamBaseAdvisory

	// An array of actions that are to be taken when a given managed object matches the criteria specified for being affected by an alert definition.
	Actions []*TamAction `json:"Actions"`

	// Additional details for the advisory definition. For e.g. if the definition corresponds to a security advisory, the details
	// regarding CVE ids and CVSS score would be available here.
	AdvisoryDetails *TamBaseAdvisoryDetails `json:"AdvisoryDetails,omitempty"`

	// Cisco generated identifier for the published security advisory.
	AdvisoryID string `json:"AdvisoryId,omitempty"`

	// An array of data sources that are used to provide data for queries used to identify an Intersight alert applicability.
	APIDataSources []*TamAPIDataSource `json:"ApiDataSources"`

	// Date when the security advisory was first published by Cisco.
	// Format: date-time
	DatePublished strfmt.DateTime `json:"DatePublished,omitempty"`

	// Date when the security advisory was last updated by Cisco.
	// Format: date-time
	DateUpdated strfmt.DateTime `json:"DateUpdated,omitempty"`

	// A link to an external URL describing security Advisory in more details.
	ExternalURL string `json:"ExternalUrl,omitempty"`

	// Relationship to the Organization that owns the Managed Object.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// Recommended action to resolve the security advisory.
	Recommendation string `json:"Recommendation,omitempty"`

	// The type (field notice, security advisory etc.) of Intersight advisory.
	// Enum: [securityAdvisory fieldNotice]
	Type *string `json:"Type,omitempty"`

	// Cisco assigned advisory version after latest revision.
	Version string `json:"Version,omitempty"`

	// Workarounds available for the advisory.
	Workaround string `json:"Workaround,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TamAdvisoryDefinition) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TamBaseAdvisory
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TamBaseAdvisory = aO0

	// AO1
	var dataAO1 struct {
		Actions []*TamAction `json:"Actions"`

		AdvisoryDetails *TamBaseAdvisoryDetails `json:"AdvisoryDetails,omitempty"`

		AdvisoryID string `json:"AdvisoryId,omitempty"`

		APIDataSources []*TamAPIDataSource `json:"ApiDataSources"`

		DatePublished strfmt.DateTime `json:"DatePublished,omitempty"`

		DateUpdated strfmt.DateTime `json:"DateUpdated,omitempty"`

		ExternalURL string `json:"ExternalUrl,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		Recommendation string `json:"Recommendation,omitempty"`

		Type *string `json:"Type,omitempty"`

		Version string `json:"Version,omitempty"`

		Workaround string `json:"Workaround,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Actions = dataAO1.Actions

	m.AdvisoryDetails = dataAO1.AdvisoryDetails

	m.AdvisoryID = dataAO1.AdvisoryID

	m.APIDataSources = dataAO1.APIDataSources

	m.DatePublished = dataAO1.DatePublished

	m.DateUpdated = dataAO1.DateUpdated

	m.ExternalURL = dataAO1.ExternalURL

	m.Organization = dataAO1.Organization

	m.Recommendation = dataAO1.Recommendation

	m.Type = dataAO1.Type

	m.Version = dataAO1.Version

	m.Workaround = dataAO1.Workaround

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TamAdvisoryDefinition) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.TamBaseAdvisory)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Actions []*TamAction `json:"Actions"`

		AdvisoryDetails *TamBaseAdvisoryDetails `json:"AdvisoryDetails,omitempty"`

		AdvisoryID string `json:"AdvisoryId,omitempty"`

		APIDataSources []*TamAPIDataSource `json:"ApiDataSources"`

		DatePublished strfmt.DateTime `json:"DatePublished,omitempty"`

		DateUpdated strfmt.DateTime `json:"DateUpdated,omitempty"`

		ExternalURL string `json:"ExternalUrl,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		Recommendation string `json:"Recommendation,omitempty"`

		Type *string `json:"Type,omitempty"`

		Version string `json:"Version,omitempty"`

		Workaround string `json:"Workaround,omitempty"`
	}

	dataAO1.Actions = m.Actions

	dataAO1.AdvisoryDetails = m.AdvisoryDetails

	dataAO1.AdvisoryID = m.AdvisoryID

	dataAO1.APIDataSources = m.APIDataSources

	dataAO1.DatePublished = m.DatePublished

	dataAO1.DateUpdated = m.DateUpdated

	dataAO1.ExternalURL = m.ExternalURL

	dataAO1.Organization = m.Organization

	dataAO1.Recommendation = m.Recommendation

	dataAO1.Type = m.Type

	dataAO1.Version = m.Version

	dataAO1.Workaround = m.Workaround

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tam advisory definition
func (m *TamAdvisoryDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TamBaseAdvisory
	if err := m.TamBaseAdvisory.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdvisoryDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIDataSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatePublished(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TamAdvisoryDefinition) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TamAdvisoryDefinition) validateAdvisoryDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.AdvisoryDetails) { // not required
		return nil
	}

	if m.AdvisoryDetails != nil {
		if err := m.AdvisoryDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AdvisoryDetails")
			}
			return err
		}
	}

	return nil
}

func (m *TamAdvisoryDefinition) validateAPIDataSources(formats strfmt.Registry) error {

	if swag.IsZero(m.APIDataSources) { // not required
		return nil
	}

	for i := 0; i < len(m.APIDataSources); i++ {
		if swag.IsZero(m.APIDataSources[i]) { // not required
			continue
		}

		if m.APIDataSources[i] != nil {
			if err := m.APIDataSources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ApiDataSources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TamAdvisoryDefinition) validateDatePublished(formats strfmt.Registry) error {

	if swag.IsZero(m.DatePublished) { // not required
		return nil
	}

	if err := validate.FormatOf("DatePublished", "body", "date-time", m.DatePublished.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TamAdvisoryDefinition) validateDateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("DateUpdated", "body", "date-time", m.DateUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TamAdvisoryDefinition) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

var tamAdvisoryDefinitionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["securityAdvisory","fieldNotice"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tamAdvisoryDefinitionTypeTypePropEnum = append(tamAdvisoryDefinitionTypeTypePropEnum, v)
	}
}

// property enum
func (m *TamAdvisoryDefinition) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tamAdvisoryDefinitionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TamAdvisoryDefinition) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TamAdvisoryDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TamAdvisoryDefinition) UnmarshalBinary(b []byte) error {
	var res TamAdvisoryDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
