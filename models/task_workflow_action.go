// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskWorkflowAction Task:Workflow Action
//
// Start a test workflow using this object.
//
// swagger:model taskWorkflowAction
type TaskWorkflowAction struct {
	MoBaseMo

	// account
	// Read Only: true
	Account *IamAccountRef `json:"Account,omitempty"`

	// Action for test workflow.
	//
	// Enum: [start stop]
	Action *string `json:"Action,omitempty"`

	// Json formatted string input parameters to workflow.
	//
	InputParams string `json:"InputParams,omitempty"`

	// When true, this workflow type will be triggered as a dynamic workflow, if not it will be treated as a static workflow.
	//
	IsDynamic *bool `json:"IsDynamic,omitempty"`

	// When true, the workflow will wait for previous one to complete before starting a new one.
	//
	WaitOnDuplicate *bool `json:"WaitOnDuplicate,omitempty"`

	// Json formatted string that has the contents of the workflow context used when starting a workflow.
	//
	WorkflowContext string `json:"WorkflowContext,omitempty"`

	// Path to workflow metadata file that will be published and started.
	//
	WorkflowFile *TaskFileDownloadInfo `json:"WorkflowFile,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TaskWorkflowAction) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Action *string `json:"Action,omitempty"`

		InputParams string `json:"InputParams,omitempty"`

		IsDynamic *bool `json:"IsDynamic,omitempty"`

		WaitOnDuplicate *bool `json:"WaitOnDuplicate,omitempty"`

		WorkflowContext string `json:"WorkflowContext,omitempty"`

		WorkflowFile *TaskFileDownloadInfo `json:"WorkflowFile,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.Action = dataAO1.Action

	m.InputParams = dataAO1.InputParams

	m.IsDynamic = dataAO1.IsDynamic

	m.WaitOnDuplicate = dataAO1.WaitOnDuplicate

	m.WorkflowContext = dataAO1.WorkflowContext

	m.WorkflowFile = dataAO1.WorkflowFile

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TaskWorkflowAction) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Action *string `json:"Action,omitempty"`

		InputParams string `json:"InputParams,omitempty"`

		IsDynamic *bool `json:"IsDynamic,omitempty"`

		WaitOnDuplicate *bool `json:"WaitOnDuplicate,omitempty"`

		WorkflowContext string `json:"WorkflowContext,omitempty"`

		WorkflowFile *TaskFileDownloadInfo `json:"WorkflowFile,omitempty"`
	}

	dataAO1.Account = m.Account

	dataAO1.Action = m.Action

	dataAO1.InputParams = m.InputParams

	dataAO1.IsDynamic = m.IsDynamic

	dataAO1.WaitOnDuplicate = m.WaitOnDuplicate

	dataAO1.WorkflowContext = m.WorkflowContext

	dataAO1.WorkflowFile = m.WorkflowFile

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this task workflow action
func (m *TaskWorkflowAction) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowFile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskWorkflowAction) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

var taskWorkflowActionTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["start","stop"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskWorkflowActionTypeActionPropEnum = append(taskWorkflowActionTypeActionPropEnum, v)
	}
}

// property enum
func (m *TaskWorkflowAction) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskWorkflowActionTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TaskWorkflowAction) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("Action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *TaskWorkflowAction) validateWorkflowFile(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkflowFile) { // not required
		return nil
	}

	if m.WorkflowFile != nil {
		if err := m.WorkflowFile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WorkflowFile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskWorkflowAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskWorkflowAction) UnmarshalBinary(b []byte) error {
	var res TaskWorkflowAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
