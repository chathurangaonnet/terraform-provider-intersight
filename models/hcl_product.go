// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HclProduct Hcl:Product
//
// Model giving the details of product.
//
// swagger:model hclProduct
type HclProduct struct {
	HclProductAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HclProduct) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 HclProductAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.HclProductAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HclProduct) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.HclProductAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hcl product
func (m *HclProduct) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HclProductAO0P0
	if err := m.HclProductAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *HclProduct) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HclProduct) UnmarshalBinary(b []byte) error {
	var res HclProduct
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HclProductAO0P0 hcl product a o0 p0
// swagger:model HclProductAO0P0
type HclProductAO0P0 struct {

	// Supported driver names of the product.
	//
	DriverNames []string `json:"DriverNames"`

	// Error code indicating the support status.
	//
	// Read Only: true
	// Enum: [Success Unknown UnknownServer InvalidUcsVersion ProcessorNotSupported OSNotSupported OSUnknown UCSVersionNotSupported UcsVersionServerOSCombinationNotSupported ProductUnknown ProductNotSupported DriverNameNotSupported FirmwareVersionNotSupported DriverVersionNotSupported FirmwareVersionDriverVersionCombinationNotSupported FirmwareVersionAndDriverVersionNotSupported FirmwareVersionAndDriverNameNotSupported InternalError MarshallingError Exempted]
	ErrorCode string `json:"ErrorCode,omitempty"`

	// Supported firmwares list of the product.
	//
	Firmwares []*HclFirmware `json:"Firmwares"`

	// Identifier of the product.
	//
	ID string `json:"Id,omitempty"`

	// Model/PID of the product/adapter.
	//
	Model string `json:"Model,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// Revision of the adapter model.
	//
	Revision string `json:"Revision,omitempty"`

	// Type of the product/adapter say OCP, PT, GPU.
	//
	Type string `json:"Type,omitempty"`

	// Vendor of the product or adapter.
	//
	Vendor string `json:"Vendor,omitempty"`

	// hcl product a o0 p0
	HclProductAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *HclProductAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Supported driver names of the product.
		//
		DriverNames []string `json:"DriverNames"`

		// Error code indicating the support status.
		//
		// Read Only: true
		// Enum: [Success Unknown UnknownServer InvalidUcsVersion ProcessorNotSupported OSNotSupported OSUnknown UCSVersionNotSupported UcsVersionServerOSCombinationNotSupported ProductUnknown ProductNotSupported DriverNameNotSupported FirmwareVersionNotSupported DriverVersionNotSupported FirmwareVersionDriverVersionCombinationNotSupported FirmwareVersionAndDriverVersionNotSupported FirmwareVersionAndDriverNameNotSupported InternalError MarshallingError Exempted]
		ErrorCode string `json:"ErrorCode,omitempty"`

		// Supported firmwares list of the product.
		//
		Firmwares []*HclFirmware `json:"Firmwares"`

		// Identifier of the product.
		//
		ID string `json:"Id,omitempty"`

		// Model/PID of the product/adapter.
		//
		Model string `json:"Model,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Revision of the adapter model.
		//
		Revision string `json:"Revision,omitempty"`

		// Type of the product/adapter say OCP, PT, GPU.
		//
		Type string `json:"Type,omitempty"`

		// Vendor of the product or adapter.
		//
		Vendor string `json:"Vendor,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv HclProductAO0P0

	rcv.DriverNames = stage1.DriverNames

	rcv.ErrorCode = stage1.ErrorCode

	rcv.Firmwares = stage1.Firmwares

	rcv.ID = stage1.ID

	rcv.Model = stage1.Model

	rcv.ObjectType = stage1.ObjectType

	rcv.Revision = stage1.Revision

	rcv.Type = stage1.Type

	rcv.Vendor = stage1.Vendor

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "DriverNames")

	delete(stage2, "ErrorCode")

	delete(stage2, "Firmwares")

	delete(stage2, "Id")

	delete(stage2, "Model")

	delete(stage2, "ObjectType")

	delete(stage2, "Revision")

	delete(stage2, "Type")

	delete(stage2, "Vendor")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.HclProductAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m HclProductAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Supported driver names of the product.
		//
		DriverNames []string `json:"DriverNames"`

		// Error code indicating the support status.
		//
		// Read Only: true
		// Enum: [Success Unknown UnknownServer InvalidUcsVersion ProcessorNotSupported OSNotSupported OSUnknown UCSVersionNotSupported UcsVersionServerOSCombinationNotSupported ProductUnknown ProductNotSupported DriverNameNotSupported FirmwareVersionNotSupported DriverVersionNotSupported FirmwareVersionDriverVersionCombinationNotSupported FirmwareVersionAndDriverVersionNotSupported FirmwareVersionAndDriverNameNotSupported InternalError MarshallingError Exempted]
		ErrorCode string `json:"ErrorCode,omitempty"`

		// Supported firmwares list of the product.
		//
		Firmwares []*HclFirmware `json:"Firmwares"`

		// Identifier of the product.
		//
		ID string `json:"Id,omitempty"`

		// Model/PID of the product/adapter.
		//
		Model string `json:"Model,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Revision of the adapter model.
		//
		Revision string `json:"Revision,omitempty"`

		// Type of the product/adapter say OCP, PT, GPU.
		//
		Type string `json:"Type,omitempty"`

		// Vendor of the product or adapter.
		//
		Vendor string `json:"Vendor,omitempty"`
	}

	stage1.DriverNames = m.DriverNames

	stage1.ErrorCode = m.ErrorCode

	stage1.Firmwares = m.Firmwares

	stage1.ID = m.ID

	stage1.Model = m.Model

	stage1.ObjectType = m.ObjectType

	stage1.Revision = m.Revision

	stage1.Type = m.Type

	stage1.Vendor = m.Vendor

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.HclProductAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.HclProductAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this hcl product a o0 p0
func (m *HclProductAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirmwares(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hclProductAO0P0TypeErrorCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Success","Unknown","UnknownServer","InvalidUcsVersion","ProcessorNotSupported","OSNotSupported","OSUnknown","UCSVersionNotSupported","UcsVersionServerOSCombinationNotSupported","ProductUnknown","ProductNotSupported","DriverNameNotSupported","FirmwareVersionNotSupported","DriverVersionNotSupported","FirmwareVersionDriverVersionCombinationNotSupported","FirmwareVersionAndDriverVersionNotSupported","FirmwareVersionAndDriverNameNotSupported","InternalError","MarshallingError","Exempted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hclProductAO0P0TypeErrorCodePropEnum = append(hclProductAO0P0TypeErrorCodePropEnum, v)
	}
}

const (

	// HclProductAO0P0ErrorCodeSuccess captures enum value "Success"
	HclProductAO0P0ErrorCodeSuccess string = "Success"

	// HclProductAO0P0ErrorCodeUnknown captures enum value "Unknown"
	HclProductAO0P0ErrorCodeUnknown string = "Unknown"

	// HclProductAO0P0ErrorCodeUnknownServer captures enum value "UnknownServer"
	HclProductAO0P0ErrorCodeUnknownServer string = "UnknownServer"

	// HclProductAO0P0ErrorCodeInvalidUcsVersion captures enum value "InvalidUcsVersion"
	HclProductAO0P0ErrorCodeInvalidUcsVersion string = "InvalidUcsVersion"

	// HclProductAO0P0ErrorCodeProcessorNotSupported captures enum value "ProcessorNotSupported"
	HclProductAO0P0ErrorCodeProcessorNotSupported string = "ProcessorNotSupported"

	// HclProductAO0P0ErrorCodeOSNotSupported captures enum value "OSNotSupported"
	HclProductAO0P0ErrorCodeOSNotSupported string = "OSNotSupported"

	// HclProductAO0P0ErrorCodeOSUnknown captures enum value "OSUnknown"
	HclProductAO0P0ErrorCodeOSUnknown string = "OSUnknown"

	// HclProductAO0P0ErrorCodeUCSVersionNotSupported captures enum value "UCSVersionNotSupported"
	HclProductAO0P0ErrorCodeUCSVersionNotSupported string = "UCSVersionNotSupported"

	// HclProductAO0P0ErrorCodeUcsVersionServerOSCombinationNotSupported captures enum value "UcsVersionServerOSCombinationNotSupported"
	HclProductAO0P0ErrorCodeUcsVersionServerOSCombinationNotSupported string = "UcsVersionServerOSCombinationNotSupported"

	// HclProductAO0P0ErrorCodeProductUnknown captures enum value "ProductUnknown"
	HclProductAO0P0ErrorCodeProductUnknown string = "ProductUnknown"

	// HclProductAO0P0ErrorCodeProductNotSupported captures enum value "ProductNotSupported"
	HclProductAO0P0ErrorCodeProductNotSupported string = "ProductNotSupported"

	// HclProductAO0P0ErrorCodeDriverNameNotSupported captures enum value "DriverNameNotSupported"
	HclProductAO0P0ErrorCodeDriverNameNotSupported string = "DriverNameNotSupported"

	// HclProductAO0P0ErrorCodeFirmwareVersionNotSupported captures enum value "FirmwareVersionNotSupported"
	HclProductAO0P0ErrorCodeFirmwareVersionNotSupported string = "FirmwareVersionNotSupported"

	// HclProductAO0P0ErrorCodeDriverVersionNotSupported captures enum value "DriverVersionNotSupported"
	HclProductAO0P0ErrorCodeDriverVersionNotSupported string = "DriverVersionNotSupported"

	// HclProductAO0P0ErrorCodeFirmwareVersionDriverVersionCombinationNotSupported captures enum value "FirmwareVersionDriverVersionCombinationNotSupported"
	HclProductAO0P0ErrorCodeFirmwareVersionDriverVersionCombinationNotSupported string = "FirmwareVersionDriverVersionCombinationNotSupported"

	// HclProductAO0P0ErrorCodeFirmwareVersionAndDriverVersionNotSupported captures enum value "FirmwareVersionAndDriverVersionNotSupported"
	HclProductAO0P0ErrorCodeFirmwareVersionAndDriverVersionNotSupported string = "FirmwareVersionAndDriverVersionNotSupported"

	// HclProductAO0P0ErrorCodeFirmwareVersionAndDriverNameNotSupported captures enum value "FirmwareVersionAndDriverNameNotSupported"
	HclProductAO0P0ErrorCodeFirmwareVersionAndDriverNameNotSupported string = "FirmwareVersionAndDriverNameNotSupported"

	// HclProductAO0P0ErrorCodeInternalError captures enum value "InternalError"
	HclProductAO0P0ErrorCodeInternalError string = "InternalError"

	// HclProductAO0P0ErrorCodeMarshallingError captures enum value "MarshallingError"
	HclProductAO0P0ErrorCodeMarshallingError string = "MarshallingError"

	// HclProductAO0P0ErrorCodeExempted captures enum value "Exempted"
	HclProductAO0P0ErrorCodeExempted string = "Exempted"
)

// prop value enum
func (m *HclProductAO0P0) validateErrorCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hclProductAO0P0TypeErrorCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HclProductAO0P0) validateErrorCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateErrorCodeEnum("ErrorCode", "body", m.ErrorCode); err != nil {
		return err
	}

	return nil
}

func (m *HclProductAO0P0) validateFirmwares(formats strfmt.Registry) error {

	if swag.IsZero(m.Firmwares) { // not required
		return nil
	}

	for i := 0; i < len(m.Firmwares); i++ {
		if swag.IsZero(m.Firmwares[i]) { // not required
			continue
		}

		if m.Firmwares[i] != nil {
			if err := m.Firmwares[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Firmwares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HclProductAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HclProductAO0P0) UnmarshalBinary(b []byte) error {
	var res HclProductAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
