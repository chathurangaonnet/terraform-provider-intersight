// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WorkflowWaitTask Workflow:Wait Task
//
// A WaitTask will remain in progress until marked success or failed by an external trigger. The timeout for wait task is 180 days, so a workflow can wait for task status update for upto 180 days. Currently the only supported means to update the task status is through an API that provides the status of the task runtime instance. Once the wait task status has been set the workflow will continue with the execution based on the task status.
//
// swagger:model workflowWaitTask
type WorkflowWaitTask struct {
	WorkflowAbstractWorkerTask

	WorkflowWaitTaskAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowWaitTask) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkflowAbstractWorkerTask
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkflowAbstractWorkerTask = aO0

	// AO1
	var aO1 WorkflowWaitTaskAllOf1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.WorkflowWaitTaskAllOf1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowWaitTask) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.WorkflowAbstractWorkerTask)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.WorkflowWaitTaskAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow wait task
func (m *WorkflowWaitTask) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkflowAbstractWorkerTask
	if err := m.WorkflowAbstractWorkerTask.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with WorkflowWaitTaskAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowWaitTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowWaitTask) UnmarshalBinary(b []byte) error {
	var res WorkflowWaitTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkflowWaitTaskAllOf1 workflow wait task all of1
// swagger:model WorkflowWaitTaskAllOf1
type WorkflowWaitTaskAllOf1 interface{}
