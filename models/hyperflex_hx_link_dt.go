// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HyperflexHxLinkDt Hyperflex:Hx Link Dt
// swagger:model hyperflexHxLinkDt
type HyperflexHxLinkDt struct {
	HyperflexHxLinkDtAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HyperflexHxLinkDt) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 HyperflexHxLinkDtAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.HyperflexHxLinkDtAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HyperflexHxLinkDt) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.HyperflexHxLinkDtAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hyperflex hx link dt
func (m *HyperflexHxLinkDt) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HyperflexHxLinkDtAO0P0
	if err := m.HyperflexHxLinkDtAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *HyperflexHxLinkDt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperflexHxLinkDt) UnmarshalBinary(b []byte) error {
	var res HyperflexHxLinkDt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HyperflexHxLinkDtAO0P0 hyperflex hx link dt a o0 p0
// swagger:model HyperflexHxLinkDtAO0P0
type HyperflexHxLinkDtAO0P0 struct {

	// comments
	// Read Only: true
	Comments string `json:"Comments,omitempty"`

	// href
	// Read Only: true
	Href string `json:"Href,omitempty"`

	// method
	// Read Only: true
	// Enum: [POST GET PUT DELETE]
	Method string `json:"Method,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// rel
	// Read Only: true
	Rel string `json:"Rel,omitempty"`

	// hyperflex hx link dt a o0 p0
	HyperflexHxLinkDtAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *HyperflexHxLinkDtAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// comments
		// Read Only: true
		Comments string `json:"Comments,omitempty"`

		// href
		// Read Only: true
		Href string `json:"Href,omitempty"`

		// method
		// Read Only: true
		// Enum: [POST GET PUT DELETE]
		Method string `json:"Method,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// rel
		// Read Only: true
		Rel string `json:"Rel,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv HyperflexHxLinkDtAO0P0

	rcv.Comments = stage1.Comments

	rcv.Href = stage1.Href

	rcv.Method = stage1.Method

	rcv.ObjectType = stage1.ObjectType

	rcv.Rel = stage1.Rel

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Comments")

	delete(stage2, "Href")

	delete(stage2, "Method")

	delete(stage2, "ObjectType")

	delete(stage2, "Rel")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.HyperflexHxLinkDtAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m HyperflexHxLinkDtAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// comments
		// Read Only: true
		Comments string `json:"Comments,omitempty"`

		// href
		// Read Only: true
		Href string `json:"Href,omitempty"`

		// method
		// Read Only: true
		// Enum: [POST GET PUT DELETE]
		Method string `json:"Method,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// rel
		// Read Only: true
		Rel string `json:"Rel,omitempty"`
	}

	stage1.Comments = m.Comments

	stage1.Href = m.Href

	stage1.Method = m.Method

	stage1.ObjectType = m.ObjectType

	stage1.Rel = m.Rel

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.HyperflexHxLinkDtAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.HyperflexHxLinkDtAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this hyperflex hx link dt a o0 p0
func (m *HyperflexHxLinkDtAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hyperflexHxLinkDtAO0P0TypeMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["POST","GET","PUT","DELETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hyperflexHxLinkDtAO0P0TypeMethodPropEnum = append(hyperflexHxLinkDtAO0P0TypeMethodPropEnum, v)
	}
}

const (

	// HyperflexHxLinkDtAO0P0MethodPOST captures enum value "POST"
	HyperflexHxLinkDtAO0P0MethodPOST string = "POST"

	// HyperflexHxLinkDtAO0P0MethodGET captures enum value "GET"
	HyperflexHxLinkDtAO0P0MethodGET string = "GET"

	// HyperflexHxLinkDtAO0P0MethodPUT captures enum value "PUT"
	HyperflexHxLinkDtAO0P0MethodPUT string = "PUT"

	// HyperflexHxLinkDtAO0P0MethodDELETE captures enum value "DELETE"
	HyperflexHxLinkDtAO0P0MethodDELETE string = "DELETE"
)

// prop value enum
func (m *HyperflexHxLinkDtAO0P0) validateMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hyperflexHxLinkDtAO0P0TypeMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HyperflexHxLinkDtAO0P0) validateMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.Method) { // not required
		return nil
	}

	// value enum
	if err := m.validateMethodEnum("Method", "body", m.Method); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HyperflexHxLinkDtAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperflexHxLinkDtAO0P0) UnmarshalBinary(b []byte) error {
	var res HyperflexHxLinkDtAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
