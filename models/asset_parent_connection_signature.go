// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"io"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetParentConnectionSignature Asset:Parent Connection Signature
//
// A signature generated by a device connector with its private key. Signature is passed to leaf device connectors to authenticate connectivity between devices.
//
// swagger:model assetParentConnectionSignature
type AssetParentConnectionSignature struct {
	AssetParentConnectionSignatureAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AssetParentConnectionSignature) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 AssetParentConnectionSignatureAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.AssetParentConnectionSignatureAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AssetParentConnectionSignature) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.AssetParentConnectionSignatureAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this asset parent connection signature
func (m *AssetParentConnectionSignature) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AssetParentConnectionSignatureAO0P0
	if err := m.AssetParentConnectionSignatureAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *AssetParentConnectionSignature) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetParentConnectionSignature) UnmarshalBinary(b []byte) error {
	var res AssetParentConnectionSignature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetParentConnectionSignatureAO0P0 asset parent connection signature a o0 p0
// swagger:model AssetParentConnectionSignatureAO0P0
type AssetParentConnectionSignatureAO0P0 struct {

	// The moid of the parent device registration.
	//
	DeviceID string `json:"DeviceId,omitempty"`

	// The node identity of the parent device, corresponds to the parents ClusterMember.memberIdentity. Used on connect to establish through which device in a cluster the child is connected through.
	//
	NodeID string `json:"NodeId,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// The result of signing the deviceId appended with the timeStamp fields with the devices private key.
	//
	// Format: binary
	Signature io.ReadCloser `json:"Signature,omitempty"`

	// The time at which the signature was generated. Date is accurate to Intersights clock. Used to expire the signature.
	//
	// Format: date-time
	TimeStamp strfmt.DateTime `json:"TimeStamp,omitempty"`

	// asset parent connection signature a o0 p0
	AssetParentConnectionSignatureAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *AssetParentConnectionSignatureAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// The moid of the parent device registration.
		//
		DeviceID string `json:"DeviceId,omitempty"`

		// The node identity of the parent device, corresponds to the parents ClusterMember.memberIdentity. Used on connect to establish through which device in a cluster the child is connected through.
		//
		NodeID string `json:"NodeId,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// The result of signing the deviceId appended with the timeStamp fields with the devices private key.
		//
		// Format: binary
		Signature io.ReadCloser `json:"Signature,omitempty"`

		// The time at which the signature was generated. Date is accurate to Intersights clock. Used to expire the signature.
		//
		// Format: date-time
		TimeStamp strfmt.DateTime `json:"TimeStamp,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv AssetParentConnectionSignatureAO0P0

	rcv.DeviceID = stage1.DeviceID

	rcv.NodeID = stage1.NodeID

	rcv.ObjectType = stage1.ObjectType

	rcv.Signature = stage1.Signature

	rcv.TimeStamp = stage1.TimeStamp

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "DeviceId")

	delete(stage2, "NodeId")

	delete(stage2, "ObjectType")

	delete(stage2, "Signature")

	delete(stage2, "TimeStamp")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.AssetParentConnectionSignatureAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m AssetParentConnectionSignatureAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// The moid of the parent device registration.
		//
		DeviceID string `json:"DeviceId,omitempty"`

		// The node identity of the parent device, corresponds to the parents ClusterMember.memberIdentity. Used on connect to establish through which device in a cluster the child is connected through.
		//
		NodeID string `json:"NodeId,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// The result of signing the deviceId appended with the timeStamp fields with the devices private key.
		//
		// Format: binary
		Signature io.ReadCloser `json:"Signature,omitempty"`

		// The time at which the signature was generated. Date is accurate to Intersights clock. Used to expire the signature.
		//
		// Format: date-time
		TimeStamp strfmt.DateTime `json:"TimeStamp,omitempty"`
	}

	stage1.DeviceID = m.DeviceID

	stage1.NodeID = m.NodeID

	stage1.ObjectType = m.ObjectType

	stage1.Signature = m.Signature

	stage1.TimeStamp = m.TimeStamp

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.AssetParentConnectionSignatureAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.AssetParentConnectionSignatureAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this asset parent connection signature a o0 p0
func (m *AssetParentConnectionSignatureAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimeStamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetParentConnectionSignatureAO0P0) validateTimeStamp(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeStamp) { // not required
		return nil
	}

	if err := validate.FormatOf("TimeStamp", "body", "date-time", m.TimeStamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetParentConnectionSignatureAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetParentConnectionSignatureAO0P0) UnmarshalBinary(b []byte) error {
	var res AssetParentConnectionSignatureAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
