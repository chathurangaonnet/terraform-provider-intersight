// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnmpUser Snmp:User
//
// Complex type for a User based security model, for communication between an agent and manager. Applicable only for SNMPv3.
//
// swagger:model snmpUser
type SnmpUser struct {
	SnmpUserAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SnmpUser) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SnmpUserAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SnmpUserAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SnmpUser) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.SnmpUserAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this snmp user
func (m *SnmpUser) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SnmpUserAO0P0
	if err := m.SnmpUserAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SnmpUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnmpUser) UnmarshalBinary(b []byte) error {
	var res SnmpUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnmpUserAO0P0 snmp user a o0 p0
// swagger:model SnmpUserAO0P0
type SnmpUserAO0P0 struct {

	// Authorization password for the user.
	//
	AuthPassword string `json:"AuthPassword,omitempty"`

	// Authorization protocol for authenticating the user.
	//
	// Enum: [NA MD5 SHA]
	AuthType *string `json:"AuthType,omitempty"`

	// Indicates whether the value of the 'authPassword' property has been set.
	//
	// Read Only: true
	IsAuthPasswordSet *bool `json:"IsAuthPasswordSet,omitempty"`

	// is privacy password set
	// Read Only: true
	IsPrivacyPasswordSet *bool `json:"IsPrivacyPasswordSet,omitempty"`

	// SNMP username. Must have a minimum of 1 and and a maximum of 31 characters.
	//
	Name string `json:"Name,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// Privacy password for the user.
	//
	PrivacyPassword string `json:"PrivacyPassword,omitempty"`

	// Privacy protocol for the user.
	//
	// Enum: [NA DES AES]
	PrivacyType *string `json:"PrivacyType,omitempty"`

	// Security mechanism used for communication between agent and manager.
	//
	// Enum: [AuthPriv NoAuthNoPriv AuthNoPriv]
	SecurityLevel *string `json:"SecurityLevel,omitempty"`

	// snmp user a o0 p0
	SnmpUserAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *SnmpUserAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Authorization password for the user.
		//
		AuthPassword string `json:"AuthPassword,omitempty"`

		// Authorization protocol for authenticating the user.
		//
		// Enum: [NA MD5 SHA]
		AuthType *string `json:"AuthType,omitempty"`

		// Indicates whether the value of the 'authPassword' property has been set.
		//
		// Read Only: true
		IsAuthPasswordSet *bool `json:"IsAuthPasswordSet,omitempty"`

		// is privacy password set
		// Read Only: true
		IsPrivacyPasswordSet *bool `json:"IsPrivacyPasswordSet,omitempty"`

		// SNMP username. Must have a minimum of 1 and and a maximum of 31 characters.
		//
		Name string `json:"Name,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Privacy password for the user.
		//
		PrivacyPassword string `json:"PrivacyPassword,omitempty"`

		// Privacy protocol for the user.
		//
		// Enum: [NA DES AES]
		PrivacyType *string `json:"PrivacyType,omitempty"`

		// Security mechanism used for communication between agent and manager.
		//
		// Enum: [AuthPriv NoAuthNoPriv AuthNoPriv]
		SecurityLevel *string `json:"SecurityLevel,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv SnmpUserAO0P0

	rcv.AuthPassword = stage1.AuthPassword

	rcv.AuthType = stage1.AuthType

	rcv.IsAuthPasswordSet = stage1.IsAuthPasswordSet

	rcv.IsPrivacyPasswordSet = stage1.IsPrivacyPasswordSet

	rcv.Name = stage1.Name

	rcv.ObjectType = stage1.ObjectType

	rcv.PrivacyPassword = stage1.PrivacyPassword

	rcv.PrivacyType = stage1.PrivacyType

	rcv.SecurityLevel = stage1.SecurityLevel

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "AuthPassword")

	delete(stage2, "AuthType")

	delete(stage2, "IsAuthPasswordSet")

	delete(stage2, "IsPrivacyPasswordSet")

	delete(stage2, "Name")

	delete(stage2, "ObjectType")

	delete(stage2, "PrivacyPassword")

	delete(stage2, "PrivacyType")

	delete(stage2, "SecurityLevel")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.SnmpUserAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m SnmpUserAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Authorization password for the user.
		//
		AuthPassword string `json:"AuthPassword,omitempty"`

		// Authorization protocol for authenticating the user.
		//
		// Enum: [NA MD5 SHA]
		AuthType *string `json:"AuthType,omitempty"`

		// Indicates whether the value of the 'authPassword' property has been set.
		//
		// Read Only: true
		IsAuthPasswordSet *bool `json:"IsAuthPasswordSet,omitempty"`

		// is privacy password set
		// Read Only: true
		IsPrivacyPasswordSet *bool `json:"IsPrivacyPasswordSet,omitempty"`

		// SNMP username. Must have a minimum of 1 and and a maximum of 31 characters.
		//
		Name string `json:"Name,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Privacy password for the user.
		//
		PrivacyPassword string `json:"PrivacyPassword,omitempty"`

		// Privacy protocol for the user.
		//
		// Enum: [NA DES AES]
		PrivacyType *string `json:"PrivacyType,omitempty"`

		// Security mechanism used for communication between agent and manager.
		//
		// Enum: [AuthPriv NoAuthNoPriv AuthNoPriv]
		SecurityLevel *string `json:"SecurityLevel,omitempty"`
	}

	stage1.AuthPassword = m.AuthPassword

	stage1.AuthType = m.AuthType

	stage1.IsAuthPasswordSet = m.IsAuthPasswordSet

	stage1.IsPrivacyPasswordSet = m.IsPrivacyPasswordSet

	stage1.Name = m.Name

	stage1.ObjectType = m.ObjectType

	stage1.PrivacyPassword = m.PrivacyPassword

	stage1.PrivacyType = m.PrivacyType

	stage1.SecurityLevel = m.SecurityLevel

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.SnmpUserAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.SnmpUserAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this snmp user a o0 p0
func (m *SnmpUserAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivacyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var snmpUserAO0P0TypeAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NA","MD5","SHA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snmpUserAO0P0TypeAuthTypePropEnum = append(snmpUserAO0P0TypeAuthTypePropEnum, v)
	}
}

const (

	// SnmpUserAO0P0AuthTypeNA captures enum value "NA"
	SnmpUserAO0P0AuthTypeNA string = "NA"

	// SnmpUserAO0P0AuthTypeMD5 captures enum value "MD5"
	SnmpUserAO0P0AuthTypeMD5 string = "MD5"

	// SnmpUserAO0P0AuthTypeSHA captures enum value "SHA"
	SnmpUserAO0P0AuthTypeSHA string = "SHA"
)

// prop value enum
func (m *SnmpUserAO0P0) validateAuthTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, snmpUserAO0P0TypeAuthTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SnmpUserAO0P0) validateAuthType(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthTypeEnum("AuthType", "body", *m.AuthType); err != nil {
		return err
	}

	return nil
}

var snmpUserAO0P0TypePrivacyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NA","DES","AES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snmpUserAO0P0TypePrivacyTypePropEnum = append(snmpUserAO0P0TypePrivacyTypePropEnum, v)
	}
}

const (

	// SnmpUserAO0P0PrivacyTypeNA captures enum value "NA"
	SnmpUserAO0P0PrivacyTypeNA string = "NA"

	// SnmpUserAO0P0PrivacyTypeDES captures enum value "DES"
	SnmpUserAO0P0PrivacyTypeDES string = "DES"

	// SnmpUserAO0P0PrivacyTypeAES captures enum value "AES"
	SnmpUserAO0P0PrivacyTypeAES string = "AES"
)

// prop value enum
func (m *SnmpUserAO0P0) validatePrivacyTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, snmpUserAO0P0TypePrivacyTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SnmpUserAO0P0) validatePrivacyType(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivacyType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePrivacyTypeEnum("PrivacyType", "body", *m.PrivacyType); err != nil {
		return err
	}

	return nil
}

var snmpUserAO0P0TypeSecurityLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AuthPriv","NoAuthNoPriv","AuthNoPriv"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snmpUserAO0P0TypeSecurityLevelPropEnum = append(snmpUserAO0P0TypeSecurityLevelPropEnum, v)
	}
}

const (

	// SnmpUserAO0P0SecurityLevelAuthPriv captures enum value "AuthPriv"
	SnmpUserAO0P0SecurityLevelAuthPriv string = "AuthPriv"

	// SnmpUserAO0P0SecurityLevelNoAuthNoPriv captures enum value "NoAuthNoPriv"
	SnmpUserAO0P0SecurityLevelNoAuthNoPriv string = "NoAuthNoPriv"

	// SnmpUserAO0P0SecurityLevelAuthNoPriv captures enum value "AuthNoPriv"
	SnmpUserAO0P0SecurityLevelAuthNoPriv string = "AuthNoPriv"
)

// prop value enum
func (m *SnmpUserAO0P0) validateSecurityLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, snmpUserAO0P0TypeSecurityLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SnmpUserAO0P0) validateSecurityLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateSecurityLevelEnum("SecurityLevel", "body", *m.SecurityLevel); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnmpUserAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnmpUserAO0P0) UnmarshalBinary(b []byte) error {
	var res SnmpUserAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
