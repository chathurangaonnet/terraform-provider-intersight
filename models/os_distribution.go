// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OsDistribution Os:Distribution
//
// Intersight has the distribution details for all the Intersight supported OS
// distributions. There will be a Distribution object for each supported OS.
//
// swagger:model osDistribution
type OsDistribution struct {
	MoBaseMo

	// A collection of references to the [os.Catalog](mo://os.Catalog) Managed Object.
	// When this managed object is deleted, the referenced [os.Catalog](mo://os.Catalog) MO unsets its reference to this deleted MO.
	Catalog *OsCatalogRef `json:"Catalog,omitempty"`

	// The name of the OS distribution such as ESXi, CentOS.
	Name string `json:"Name,omitempty"`

	// A Collection of all the Editions of the OS Distribution that is
	// supported within Intersight.
	// Editions available with OS Vendor but not available in this list are not supported
	// for OS Installation through Intersight.
	// Read Only: true
	SupportedEditions []string `json:"SupportedEditions"`

	// A specific version of an OS distribution that is supported within
	// Intersight.
	// Read Only: true
	Version *HclOperatingSystemRef `json:"Version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *OsDistribution) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Catalog *OsCatalogRef `json:"Catalog,omitempty"`

		Name string `json:"Name,omitempty"`

		SupportedEditions []string `json:"SupportedEditions"`

		Version *HclOperatingSystemRef `json:"Version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Catalog = dataAO1.Catalog

	m.Name = dataAO1.Name

	m.SupportedEditions = dataAO1.SupportedEditions

	m.Version = dataAO1.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m OsDistribution) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Catalog *OsCatalogRef `json:"Catalog,omitempty"`

		Name string `json:"Name,omitempty"`

		SupportedEditions []string `json:"SupportedEditions"`

		Version *HclOperatingSystemRef `json:"Version,omitempty"`
	}

	dataAO1.Catalog = m.Catalog

	dataAO1.Name = m.Name

	dataAO1.SupportedEditions = m.SupportedEditions

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this os distribution
func (m *OsDistribution) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsDistribution) validateCatalog(formats strfmt.Registry) error {

	if swag.IsZero(m.Catalog) { // not required
		return nil
	}

	if m.Catalog != nil {
		if err := m.Catalog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Catalog")
			}
			return err
		}
	}

	return nil
}

func (m *OsDistribution) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsDistribution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsDistribution) UnmarshalBinary(b []byte) error {
	var res OsDistribution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
