// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevopsNotificationTrigger Devops:Notification Trigger
//
// This trigger sends a MO change notification for a single MO. It does so by reading the MO from the database, using 'motype' and 'moid', and issuing a change notification with modification type 'modified'.
//
// swagger:model devopsNotificationTrigger
type DevopsNotificationTrigger struct {
	DevopsAbstractTriggerDetails

	// The Moid of the Account to which the MO identified by the 'moid' field belonged. This field is mandatory when modificationType is Delete and is ignored for other values of modificationType.
	//
	//
	Account string `json:"Account,omitempty"`

	// The Moid of the DomainGroup to which the MO identified by the 'moid' field belonged. This field is mandatory when modificationType is Delete and is ignored for other values of modificationType.
	//
	//
	DomainGroup string `json:"DomainGroup,omitempty"`

	// The type of the Managed Object, e.g. iam.Account.
	//
	MoType string `json:"MoType,omitempty"`

	// The type of the MO change notification.
	//
	// Enum: [Update Create Read Delete]
	ModificationType *string `json:"ModificationType,omitempty"`

	// The Moid of the Managed Object.
	//
	Moid string `json:"Moid,omitempty"`

	// A securityContextSubject must be specified when the securityContextType is AccountContext or DeviceContext. The field is the Moid of the respective iam.Account of asset.DeviceRegistration.
	//
	//
	SecurityContextSubject string `json:"SecurityContextSubject,omitempty"`

	// In some scenarios it is necessary for change notifications to be processed in SystemContext. For example, when a device is claimed or unclaimed the notification must execute in SystemContext in order to move MOs related to the device between accounts.
	//
	//
	// Enum: [AccountContext SystemContext DeviceContext]
	SecurityContextType *string `json:"SecurityContextType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DevopsNotificationTrigger) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DevopsAbstractTriggerDetails
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DevopsAbstractTriggerDetails = aO0

	// AO1
	var dataAO1 struct {
		Account string `json:"Account,omitempty"`

		DomainGroup string `json:"DomainGroup,omitempty"`

		MoType string `json:"MoType,omitempty"`

		ModificationType *string `json:"ModificationType,omitempty"`

		Moid string `json:"Moid,omitempty"`

		SecurityContextSubject string `json:"SecurityContextSubject,omitempty"`

		SecurityContextType *string `json:"SecurityContextType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.DomainGroup = dataAO1.DomainGroup

	m.MoType = dataAO1.MoType

	m.ModificationType = dataAO1.ModificationType

	m.Moid = dataAO1.Moid

	m.SecurityContextSubject = dataAO1.SecurityContextSubject

	m.SecurityContextType = dataAO1.SecurityContextType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DevopsNotificationTrigger) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.DevopsAbstractTriggerDetails)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Account string `json:"Account,omitempty"`

		DomainGroup string `json:"DomainGroup,omitempty"`

		MoType string `json:"MoType,omitempty"`

		ModificationType *string `json:"ModificationType,omitempty"`

		Moid string `json:"Moid,omitempty"`

		SecurityContextSubject string `json:"SecurityContextSubject,omitempty"`

		SecurityContextType *string `json:"SecurityContextType,omitempty"`
	}

	dataAO1.Account = m.Account

	dataAO1.DomainGroup = m.DomainGroup

	dataAO1.MoType = m.MoType

	dataAO1.ModificationType = m.ModificationType

	dataAO1.Moid = m.Moid

	dataAO1.SecurityContextSubject = m.SecurityContextSubject

	dataAO1.SecurityContextType = m.SecurityContextType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this devops notification trigger
func (m *DevopsNotificationTrigger) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DevopsAbstractTriggerDetails
	if err := m.DevopsAbstractTriggerDetails.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityContextType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var devopsNotificationTriggerTypeModificationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Update","Create","Read","Delete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devopsNotificationTriggerTypeModificationTypePropEnum = append(devopsNotificationTriggerTypeModificationTypePropEnum, v)
	}
}

// property enum
func (m *DevopsNotificationTrigger) validateModificationTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, devopsNotificationTriggerTypeModificationTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DevopsNotificationTrigger) validateModificationType(formats strfmt.Registry) error {

	if swag.IsZero(m.ModificationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateModificationTypeEnum("ModificationType", "body", *m.ModificationType); err != nil {
		return err
	}

	return nil
}

var devopsNotificationTriggerTypeSecurityContextTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AccountContext","SystemContext","DeviceContext"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devopsNotificationTriggerTypeSecurityContextTypePropEnum = append(devopsNotificationTriggerTypeSecurityContextTypePropEnum, v)
	}
}

// property enum
func (m *DevopsNotificationTrigger) validateSecurityContextTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, devopsNotificationTriggerTypeSecurityContextTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DevopsNotificationTrigger) validateSecurityContextType(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityContextType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSecurityContextTypeEnum("SecurityContextType", "body", *m.SecurityContextType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevopsNotificationTrigger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevopsNotificationTrigger) UnmarshalBinary(b []byte) error {
	var res DevopsNotificationTrigger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
