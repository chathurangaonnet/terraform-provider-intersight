// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ConnectorFetchStreamMessage Connector:Fetch Stream Message
//
// Retrieve a list of cached stream messages by stream id. Cloud services will request stream messages to be re-sent in case of dropped messages (the cloud service receieves an unexpected stream sequence number). On success the device connector will 'replay' the messages, publishing them to the streams response topic, they will not be returned in the response to this message. If any of the requested sequences are not present in the cache an error will be returned.
//
// swagger:model connectorFetchStreamMessage
type ConnectorFetchStreamMessage struct {
	ConnectorStreamMessage

	// List of sequences to retrieve from the stream cache.
	//
	Sequences []int64 `json:"Sequences"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ConnectorFetchStreamMessage) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ConnectorStreamMessage
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ConnectorStreamMessage = aO0

	// AO1
	var dataAO1 struct {
		Sequences []int64 `json:"Sequences"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Sequences = dataAO1.Sequences

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ConnectorFetchStreamMessage) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ConnectorStreamMessage)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Sequences []int64 `json:"Sequences"`
	}

	dataAO1.Sequences = m.Sequences

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this connector fetch stream message
func (m *ConnectorFetchStreamMessage) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ConnectorStreamMessage
	if err := m.ConnectorStreamMessage.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ConnectorFetchStreamMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectorFetchStreamMessage) UnmarshalBinary(b []byte) error {
	var res ConnectorFetchStreamMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
