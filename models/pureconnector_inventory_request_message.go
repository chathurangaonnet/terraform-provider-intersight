// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PureconnectorInventoryRequestMessage Pureconnector:Inventory Request Message
//
// Pure inventory request message.
//
// swagger:model pureconnectorInventoryRequestMessage
type PureconnectorInventoryRequestMessage struct {
	PureconnectorInventoryRequestMessageAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PureconnectorInventoryRequestMessage) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PureconnectorInventoryRequestMessageAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PureconnectorInventoryRequestMessageAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PureconnectorInventoryRequestMessage) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.PureconnectorInventoryRequestMessageAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this pureconnector inventory request message
func (m *PureconnectorInventoryRequestMessage) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PureconnectorInventoryRequestMessageAO0P0
	if err := m.PureconnectorInventoryRequestMessageAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PureconnectorInventoryRequestMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PureconnectorInventoryRequestMessage) UnmarshalBinary(b []byte) error {
	var res PureconnectorInventoryRequestMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PureconnectorInventoryRequestMessageAO0P0 pureconnector inventory request message a o0 p0
// swagger:model PureconnectorInventoryRequestMessageAO0P0
type PureconnectorInventoryRequestMessageAO0P0 struct {

	// Relative url used to fetch inventory from Pure storage array.
	//
	APIName string `json:"ApiName,omitempty"`

	// Dependent or child inventory jobs.
	//
	DependentJobs []*PureconnectorInventoryRequestMessage `json:"DependentJobs"`

	// Inventory job name. This will be sent back along with inventory response.
	//
	JobName string `json:"JobName,omitempty"`

	// Maximum number of objects to be retrieved in a singel get request. Itis intented for pagination.
	//
	Limit int64 `json:"Limit,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// Pure storage inventory response topic.It is a topic where device connector sends inventory response to.
	//
	ResponseTopic string `json:"ResponseTopic,omitempty"`

	// pureconnector inventory request message a o0 p0
	PureconnectorInventoryRequestMessageAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *PureconnectorInventoryRequestMessageAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Relative url used to fetch inventory from Pure storage array.
		//
		APIName string `json:"ApiName,omitempty"`

		// Dependent or child inventory jobs.
		//
		DependentJobs []*PureconnectorInventoryRequestMessage `json:"DependentJobs"`

		// Inventory job name. This will be sent back along with inventory response.
		//
		JobName string `json:"JobName,omitempty"`

		// Maximum number of objects to be retrieved in a singel get request. Itis intented for pagination.
		//
		Limit int64 `json:"Limit,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Pure storage inventory response topic.It is a topic where device connector sends inventory response to.
		//
		ResponseTopic string `json:"ResponseTopic,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv PureconnectorInventoryRequestMessageAO0P0

	rcv.APIName = stage1.APIName

	rcv.DependentJobs = stage1.DependentJobs

	rcv.JobName = stage1.JobName

	rcv.Limit = stage1.Limit

	rcv.ObjectType = stage1.ObjectType

	rcv.ResponseTopic = stage1.ResponseTopic

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "ApiName")

	delete(stage2, "DependentJobs")

	delete(stage2, "JobName")

	delete(stage2, "Limit")

	delete(stage2, "ObjectType")

	delete(stage2, "ResponseTopic")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.PureconnectorInventoryRequestMessageAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m PureconnectorInventoryRequestMessageAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Relative url used to fetch inventory from Pure storage array.
		//
		APIName string `json:"ApiName,omitempty"`

		// Dependent or child inventory jobs.
		//
		DependentJobs []*PureconnectorInventoryRequestMessage `json:"DependentJobs"`

		// Inventory job name. This will be sent back along with inventory response.
		//
		JobName string `json:"JobName,omitempty"`

		// Maximum number of objects to be retrieved in a singel get request. Itis intented for pagination.
		//
		Limit int64 `json:"Limit,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Pure storage inventory response topic.It is a topic where device connector sends inventory response to.
		//
		ResponseTopic string `json:"ResponseTopic,omitempty"`
	}

	stage1.APIName = m.APIName

	stage1.DependentJobs = m.DependentJobs

	stage1.JobName = m.JobName

	stage1.Limit = m.Limit

	stage1.ObjectType = m.ObjectType

	stage1.ResponseTopic = m.ResponseTopic

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.PureconnectorInventoryRequestMessageAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.PureconnectorInventoryRequestMessageAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this pureconnector inventory request message a o0 p0
func (m *PureconnectorInventoryRequestMessageAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDependentJobs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PureconnectorInventoryRequestMessageAO0P0) validateDependentJobs(formats strfmt.Registry) error {

	if swag.IsZero(m.DependentJobs) { // not required
		return nil
	}

	for i := 0; i < len(m.DependentJobs); i++ {
		if swag.IsZero(m.DependentJobs[i]) { // not required
			continue
		}

		if m.DependentJobs[i] != nil {
			if err := m.DependentJobs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DependentJobs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PureconnectorInventoryRequestMessageAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PureconnectorInventoryRequestMessageAO0P0) UnmarshalBinary(b []byte) error {
	var res PureconnectorInventoryRequestMessageAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
