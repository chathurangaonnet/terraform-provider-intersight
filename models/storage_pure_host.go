// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoragePureHost Storage:Pure Host
//
// A host entity in PureStorage FlashArray. It is an abstraction used by PureStorage to organize the storage network addresses (Fibre Channel worldwide names or iSCSI qualified names) of client computers and to control communications between clients and volumes.
//
// swagger:model storagePureHost
type StoragePureHost struct {
	StorageHost

	// A collection of references to the [storage.PureHost](mo://storage.PureHost) Managed Object.
	//
	// When this managed object is deleted, the referenced [storage.PureHost](mo://storage.PureHost) MO unsets its reference to this deleted MO.
	//
	// Read Only: true
	HostGroup *StoragePureHostRef `json:"HostGroup,omitempty"`

	// Name of host group where the host belongs to. Empty if HostType is set as HostGroup.
	//
	// Read Only: true
	HostGroupName string `json:"HostGroupName,omitempty"`

	// Names of the host which are associated with the host group. Empty if HostType is set as Host.
	//
	// Read Only: true
	HostNames []string `json:"HostNames"`

	// List of host object associated to the host group.
	//
	// Read Only: true
	Hosts []*StoragePureHostRef `json:"Hosts"`

	// Device registration managed object that represents this storage array connection to Intersight.
	//
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// Storage space utilized by the host entity.
	//
	// Read Only: true
	StorageUtilization *StorageHostUtilization `json:"StorageUtilization,omitempty"`

	// Type of host entity whether it is a single host or host group (collection of host).
	//
	// Read Only: true
	// Enum: [Host HostGroup]
	Type string `json:"Type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StoragePureHost) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StorageHost
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.StorageHost = aO0

	// AO1
	var dataAO1 struct {
		HostGroup *StoragePureHostRef `json:"HostGroup,omitempty"`

		HostGroupName string `json:"HostGroupName,omitempty"`

		HostNames []string `json:"HostNames"`

		Hosts []*StoragePureHostRef `json:"Hosts"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		StorageUtilization *StorageHostUtilization `json:"StorageUtilization,omitempty"`

		Type string `json:"Type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.HostGroup = dataAO1.HostGroup

	m.HostGroupName = dataAO1.HostGroupName

	m.HostNames = dataAO1.HostNames

	m.Hosts = dataAO1.Hosts

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.StorageUtilization = dataAO1.StorageUtilization

	m.Type = dataAO1.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StoragePureHost) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.StorageHost)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		HostGroup *StoragePureHostRef `json:"HostGroup,omitempty"`

		HostGroupName string `json:"HostGroupName,omitempty"`

		HostNames []string `json:"HostNames"`

		Hosts []*StoragePureHostRef `json:"Hosts"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		StorageUtilization *StorageHostUtilization `json:"StorageUtilization,omitempty"`

		Type string `json:"Type,omitempty"`
	}

	dataAO1.HostGroup = m.HostGroup

	dataAO1.HostGroupName = m.HostGroupName

	dataAO1.HostNames = m.HostNames

	dataAO1.Hosts = m.Hosts

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.StorageUtilization = m.StorageUtilization

	dataAO1.Type = m.Type

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage pure host
func (m *StoragePureHost) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StorageHost
	if err := m.StorageHost.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageUtilization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePureHost) validateHostGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.HostGroup) { // not required
		return nil
	}

	if m.HostGroup != nil {
		if err := m.HostGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HostGroup")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePureHost) validateHosts(formats strfmt.Registry) error {

	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	for i := 0; i < len(m.Hosts); i++ {
		if swag.IsZero(m.Hosts[i]) { // not required
			continue
		}

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StoragePureHost) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePureHost) validateStorageUtilization(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageUtilization) { // not required
		return nil
	}

	if m.StorageUtilization != nil {
		if err := m.StorageUtilization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StorageUtilization")
			}
			return err
		}
	}

	return nil
}

var storagePureHostTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Host","HostGroup"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storagePureHostTypeTypePropEnum = append(storagePureHostTypeTypePropEnum, v)
	}
}

// property enum
func (m *StoragePureHost) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storagePureHostTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StoragePureHost) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePureHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePureHost) UnmarshalBinary(b []byte) error {
	var res StoragePureHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
