// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageBasePhysicalPort Storage:Base Physical Port
//
// Common attributes for a physical port in a storage array.
//
// swagger:model storageBasePhysicalPort
type StorageBasePhysicalPort struct {
	MoBaseMo

	// ISCSI qualified name applicable for ethernet port. Example - 'iqn.2008-05.com.storage:fnm00151300643-514f0c50141faf05'.
	// Read Only: true
	Iqn string `json:"Iqn,omitempty"`

	// Name of the physical port available in storage array.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// Operational speed of physical port measured in Gbps.
	// Read Only: true
	Speed int64 `json:"Speed,omitempty"`

	// Status of storage array port.
	// Read Only: true
	// Enum: [Unknown Ok Degraded Critical Offline Identifying NotAvailable Updating Unrecognized]
	Status string `json:"Status,omitempty"`

	// Port type - possible values are FC, FCoE and iSCSI.
	// Read Only: true
	// Enum: [FC iSCSI FCoE]
	Type string `json:"Type,omitempty"`

	// World wide name of FC port. It is a combination of WWNN and WWPN represented in 128 bit hexadecimal formatted with colon.
	// Example: '51:4f:0c:50:14:1f:af:01:51:4f:0c:51:14:1f:af:01'.
	// Read Only: true
	Wwn string `json:"Wwn,omitempty"`

	// World wide node name of FC port. Represented in 64 bit hex digits, formatted with colon. Example - '51:4f:0c:50:14:1f:af:01'.
	// Read Only: true
	Wwnn string `json:"Wwnn,omitempty"`

	// World wide port name of FC port. Represented in 64 bit hex digits, formatted with colon. Example - '51:4f:0c:51:14:1f:af:01'.
	// Read Only: true
	Wwpn string `json:"Wwpn,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageBasePhysicalPort) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Iqn string `json:"Iqn,omitempty"`

		Name string `json:"Name,omitempty"`

		Speed int64 `json:"Speed,omitempty"`

		Status string `json:"Status,omitempty"`

		Type string `json:"Type,omitempty"`

		Wwn string `json:"Wwn,omitempty"`

		Wwnn string `json:"Wwnn,omitempty"`

		Wwpn string `json:"Wwpn,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Iqn = dataAO1.Iqn

	m.Name = dataAO1.Name

	m.Speed = dataAO1.Speed

	m.Status = dataAO1.Status

	m.Type = dataAO1.Type

	m.Wwn = dataAO1.Wwn

	m.Wwnn = dataAO1.Wwnn

	m.Wwpn = dataAO1.Wwpn

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageBasePhysicalPort) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Iqn string `json:"Iqn,omitempty"`

		Name string `json:"Name,omitempty"`

		Speed int64 `json:"Speed,omitempty"`

		Status string `json:"Status,omitempty"`

		Type string `json:"Type,omitempty"`

		Wwn string `json:"Wwn,omitempty"`

		Wwnn string `json:"Wwnn,omitempty"`

		Wwpn string `json:"Wwpn,omitempty"`
	}

	dataAO1.Iqn = m.Iqn

	dataAO1.Name = m.Name

	dataAO1.Speed = m.Speed

	dataAO1.Status = m.Status

	dataAO1.Type = m.Type

	dataAO1.Wwn = m.Wwn

	dataAO1.Wwnn = m.Wwnn

	dataAO1.Wwpn = m.Wwpn

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage base physical port
func (m *StorageBasePhysicalPort) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageBasePhysicalPortTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Ok","Degraded","Critical","Offline","Identifying","NotAvailable","Updating","Unrecognized"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBasePhysicalPortTypeStatusPropEnum = append(storageBasePhysicalPortTypeStatusPropEnum, v)
	}
}

// property enum
func (m *StorageBasePhysicalPort) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageBasePhysicalPortTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageBasePhysicalPort) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var storageBasePhysicalPortTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FC","iSCSI","FCoE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBasePhysicalPortTypeTypePropEnum = append(storageBasePhysicalPortTypeTypePropEnum, v)
	}
}

// property enum
func (m *StorageBasePhysicalPort) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageBasePhysicalPortTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageBasePhysicalPort) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageBasePhysicalPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBasePhysicalPort) UnmarshalBinary(b []byte) error {
	var res StorageBasePhysicalPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
