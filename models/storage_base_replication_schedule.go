// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StorageBaseReplicationSchedule Storage:Base Replication Schedule
//
// Configuration parameters for snapshot creation on target arrays.
//
// swagger:model storageBaseReplicationSchedule
type StorageBaseReplicationSchedule struct {
	MoBaseMo

	// Replication frequency. It is an interval at which replication is set to trigger.
	// Examples:
	//     PT2H, Snapshot is generated every 2 hours.
	//     P30D, Snapshot is scheduled for every 30 days.
	//     PT2H34M56.123S is 2 hours, 34 minutes, 56 seconds and 123 milliseconds.
	// Read Only: true
	Frequency string `json:"Frequency,omitempty"`

	// Replication schedule name.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// Preferred time of day at which to replicate the snapshots on target array.
	// It is applicable only if the replication frequency is set for a day or more.
	// Format: hh:mm:ss
	// Example: 15:00:00, Replication is set for 3:00 PM.
	// Read Only: true
	ReplicationTime string `json:"ReplicationTime,omitempty"`

	// Duration to keep the replicated snapshots on the targets.
	// Replicated snapshots are deleted from target array once the retention period has elapsed.
	// Examples:
	// P30D, Snapshots are available for 30 days.
	// PT2H34M56.123S, 2 hours, 34 minutes, 56 seconds and 123 milliseconds.
	// Read Only: true
	RetentionTime string `json:"RetentionTime,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageBaseReplicationSchedule) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Frequency string `json:"Frequency,omitempty"`

		Name string `json:"Name,omitempty"`

		ReplicationTime string `json:"ReplicationTime,omitempty"`

		RetentionTime string `json:"RetentionTime,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Frequency = dataAO1.Frequency

	m.Name = dataAO1.Name

	m.ReplicationTime = dataAO1.ReplicationTime

	m.RetentionTime = dataAO1.RetentionTime

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageBaseReplicationSchedule) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Frequency string `json:"Frequency,omitempty"`

		Name string `json:"Name,omitempty"`

		ReplicationTime string `json:"ReplicationTime,omitempty"`

		RetentionTime string `json:"RetentionTime,omitempty"`
	}

	dataAO1.Frequency = m.Frequency

	dataAO1.Name = m.Name

	dataAO1.ReplicationTime = m.ReplicationTime

	dataAO1.RetentionTime = m.RetentionTime

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage base replication schedule
func (m *StorageBaseReplicationSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *StorageBaseReplicationSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBaseReplicationSchedule) UnmarshalBinary(b []byte) error {
	var res StorageBaseReplicationSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
