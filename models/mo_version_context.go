// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MoVersionContext Mo:Version Context
//
// VersionContext contains the versioning info for an object.
//
// swagger:model moVersionContext
type MoVersionContext struct {
	MoVersionContextAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MoVersionContext) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoVersionContextAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoVersionContextAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MoVersionContext) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.MoVersionContextAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this mo version context
func (m *MoVersionContext) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoVersionContextAO0P0
	if err := m.MoVersionContextAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *MoVersionContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MoVersionContext) UnmarshalBinary(b []byte) error {
	var res MoVersionContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MoVersionContextAO0P0 mo version context a o0 p0
// swagger:model MoVersionContextAO0P0
type MoVersionContextAO0P0 struct {

	// A collection of objects that have reference to this versioned object.
	// The lifecycle of the versioned object is based on the interestedMos list;
	// the versioned object will be purged when interestedMos is empty.
	//
	//
	// Read Only: true
	InterestedMos []*MoMoRef `json:"InterestedMos"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// A reference to the original Managed Object.
	//
	// Read Only: true
	RefMo *MoMoRef `json:"RefMo,omitempty"`

	// The time this versioned Managed Object was created.
	//
	// Read Only: true
	// Format: date-time
	Timestamp strfmt.DateTime `json:"Timestamp,omitempty"`

	// The version of the Managed Object, e.g. an incrementing number or a hash id.
	//
	// Read Only: true
	Version string `json:"Version,omitempty"`

	// Specifies type of version. Currently the only supported value is "Configured"
	// that is used to keep track of snapshots of policies and profiles that are intended
	// to be configured to target endpoints.
	//
	//
	// Read Only: true
	// Enum: [Modified Configured Deployed]
	VersionType string `json:"VersionType,omitempty"`

	// mo version context a o0 p0
	MoVersionContextAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *MoVersionContextAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// A collection of objects that have reference to this versioned object.
		// The lifecycle of the versioned object is based on the interestedMos list;
		// the versioned object will be purged when interestedMos is empty.
		//
		//
		// Read Only: true
		InterestedMos []*MoMoRef `json:"InterestedMos"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// A reference to the original Managed Object.
		//
		// Read Only: true
		RefMo *MoMoRef `json:"RefMo,omitempty"`

		// The time this versioned Managed Object was created.
		//
		// Read Only: true
		// Format: date-time
		Timestamp strfmt.DateTime `json:"Timestamp,omitempty"`

		// The version of the Managed Object, e.g. an incrementing number or a hash id.
		//
		// Read Only: true
		Version string `json:"Version,omitempty"`

		// Specifies type of version. Currently the only supported value is "Configured"
		// that is used to keep track of snapshots of policies and profiles that are intended
		// to be configured to target endpoints.
		//
		//
		// Read Only: true
		// Enum: [Modified Configured Deployed]
		VersionType string `json:"VersionType,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv MoVersionContextAO0P0

	rcv.InterestedMos = stage1.InterestedMos

	rcv.ObjectType = stage1.ObjectType

	rcv.RefMo = stage1.RefMo

	rcv.Timestamp = stage1.Timestamp

	rcv.Version = stage1.Version

	rcv.VersionType = stage1.VersionType

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "InterestedMos")

	delete(stage2, "ObjectType")

	delete(stage2, "RefMo")

	delete(stage2, "Timestamp")

	delete(stage2, "Version")

	delete(stage2, "VersionType")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.MoVersionContextAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m MoVersionContextAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// A collection of objects that have reference to this versioned object.
		// The lifecycle of the versioned object is based on the interestedMos list;
		// the versioned object will be purged when interestedMos is empty.
		//
		//
		// Read Only: true
		InterestedMos []*MoMoRef `json:"InterestedMos"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// A reference to the original Managed Object.
		//
		// Read Only: true
		RefMo *MoMoRef `json:"RefMo,omitempty"`

		// The time this versioned Managed Object was created.
		//
		// Read Only: true
		// Format: date-time
		Timestamp strfmt.DateTime `json:"Timestamp,omitempty"`

		// The version of the Managed Object, e.g. an incrementing number or a hash id.
		//
		// Read Only: true
		Version string `json:"Version,omitempty"`

		// Specifies type of version. Currently the only supported value is "Configured"
		// that is used to keep track of snapshots of policies and profiles that are intended
		// to be configured to target endpoints.
		//
		//
		// Read Only: true
		// Enum: [Modified Configured Deployed]
		VersionType string `json:"VersionType,omitempty"`
	}

	stage1.InterestedMos = m.InterestedMos

	stage1.ObjectType = m.ObjectType

	stage1.RefMo = m.RefMo

	stage1.Timestamp = m.Timestamp

	stage1.Version = m.Version

	stage1.VersionType = m.VersionType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.MoVersionContextAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.MoVersionContextAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this mo version context a o0 p0
func (m *MoVersionContextAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterestedMos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefMo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MoVersionContextAO0P0) validateInterestedMos(formats strfmt.Registry) error {

	if swag.IsZero(m.InterestedMos) { // not required
		return nil
	}

	for i := 0; i < len(m.InterestedMos); i++ {
		if swag.IsZero(m.InterestedMos[i]) { // not required
			continue
		}

		if m.InterestedMos[i] != nil {
			if err := m.InterestedMos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("InterestedMos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MoVersionContextAO0P0) validateRefMo(formats strfmt.Registry) error {

	if swag.IsZero(m.RefMo) { // not required
		return nil
	}

	if m.RefMo != nil {
		if err := m.RefMo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RefMo")
			}
			return err
		}
	}

	return nil
}

func (m *MoVersionContextAO0P0) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("Timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

var moVersionContextAO0P0TypeVersionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Modified","Configured","Deployed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		moVersionContextAO0P0TypeVersionTypePropEnum = append(moVersionContextAO0P0TypeVersionTypePropEnum, v)
	}
}

const (

	// MoVersionContextAO0P0VersionTypeModified captures enum value "Modified"
	MoVersionContextAO0P0VersionTypeModified string = "Modified"

	// MoVersionContextAO0P0VersionTypeConfigured captures enum value "Configured"
	MoVersionContextAO0P0VersionTypeConfigured string = "Configured"

	// MoVersionContextAO0P0VersionTypeDeployed captures enum value "Deployed"
	MoVersionContextAO0P0VersionTypeDeployed string = "Deployed"
)

// prop value enum
func (m *MoVersionContextAO0P0) validateVersionTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, moVersionContextAO0P0TypeVersionTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MoVersionContextAO0P0) validateVersionType(formats strfmt.Registry) error {

	if swag.IsZero(m.VersionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateVersionTypeEnum("VersionType", "body", m.VersionType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MoVersionContextAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MoVersionContextAO0P0) UnmarshalBinary(b []byte) error {
	var res MoVersionContextAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
