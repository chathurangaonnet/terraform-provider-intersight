// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotifsCondition Notifs:Condition
//
// A condition under which a MO Change Notification should be sent. The changeType, filter and changeSet conditions must all evaluate to True for a notification to be sent.
//
// swagger:model notifsCondition
type NotifsCondition struct {
	NotifsConditionAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NotifsCondition) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 NotifsConditionAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.NotifsConditionAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NotifsCondition) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.NotifsConditionAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this notifs condition
func (m *NotifsCondition) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with NotifsConditionAO0P0
	if err := m.NotifsConditionAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *NotifsCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotifsCondition) UnmarshalBinary(b []byte) error {
	var res NotifsCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NotifsConditionAO0P0 notifs condition a o0 p0
// swagger:model NotifsConditionAO0P0
type NotifsConditionAO0P0 struct {

	// The list of properties which have been modified while processing a REST request.
	// Applicable only for MO updates, ignored for creation/deletion. Evaluates to True if any of the listed properties have changed or if the list is empty. For example, the list may be set to ['ConnectorStatus', 'ConnectorVersion'].
	//
	//
	ChangeSet []string `json:"ChangeSet"`

	// The type of change (create, update, delete) performed on the MO.
	//
	//
	// Enum: [None Created Modified Deleted]
	ChangeType *string `json:"ChangeType,omitempty"`

	// The OData-style filter which is evaluated against the state of an MO at the time of transaction commit. An empty filter string evaluates to True. For example, the value may be set to 'ConnectionStatus eq 'Connected'.
	//
	//
	Filter string `json:"Filter,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// notifs condition a o0 p0
	NotifsConditionAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *NotifsConditionAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// The list of properties which have been modified while processing a REST request.
		// Applicable only for MO updates, ignored for creation/deletion. Evaluates to True if any of the listed properties have changed or if the list is empty. For example, the list may be set to ['ConnectorStatus', 'ConnectorVersion'].
		//
		//
		ChangeSet []string `json:"ChangeSet"`

		// The type of change (create, update, delete) performed on the MO.
		//
		//
		// Enum: [None Created Modified Deleted]
		ChangeType *string `json:"ChangeType,omitempty"`

		// The OData-style filter which is evaluated against the state of an MO at the time of transaction commit. An empty filter string evaluates to True. For example, the value may be set to 'ConnectionStatus eq 'Connected'.
		//
		//
		Filter string `json:"Filter,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv NotifsConditionAO0P0

	rcv.ChangeSet = stage1.ChangeSet

	rcv.ChangeType = stage1.ChangeType

	rcv.Filter = stage1.Filter

	rcv.ObjectType = stage1.ObjectType

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "ChangeSet")

	delete(stage2, "ChangeType")

	delete(stage2, "Filter")

	delete(stage2, "ObjectType")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.NotifsConditionAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m NotifsConditionAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// The list of properties which have been modified while processing a REST request.
		// Applicable only for MO updates, ignored for creation/deletion. Evaluates to True if any of the listed properties have changed or if the list is empty. For example, the list may be set to ['ConnectorStatus', 'ConnectorVersion'].
		//
		//
		ChangeSet []string `json:"ChangeSet"`

		// The type of change (create, update, delete) performed on the MO.
		//
		//
		// Enum: [None Created Modified Deleted]
		ChangeType *string `json:"ChangeType,omitempty"`

		// The OData-style filter which is evaluated against the state of an MO at the time of transaction commit. An empty filter string evaluates to True. For example, the value may be set to 'ConnectionStatus eq 'Connected'.
		//
		//
		Filter string `json:"Filter,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`
	}

	stage1.ChangeSet = m.ChangeSet

	stage1.ChangeType = m.ChangeType

	stage1.Filter = m.Filter

	stage1.ObjectType = m.ObjectType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.NotifsConditionAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.NotifsConditionAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this notifs condition a o0 p0
func (m *NotifsConditionAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChangeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var notifsConditionAO0P0TypeChangeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Created","Modified","Deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notifsConditionAO0P0TypeChangeTypePropEnum = append(notifsConditionAO0P0TypeChangeTypePropEnum, v)
	}
}

const (

	// NotifsConditionAO0P0ChangeTypeNone captures enum value "None"
	NotifsConditionAO0P0ChangeTypeNone string = "None"

	// NotifsConditionAO0P0ChangeTypeCreated captures enum value "Created"
	NotifsConditionAO0P0ChangeTypeCreated string = "Created"

	// NotifsConditionAO0P0ChangeTypeModified captures enum value "Modified"
	NotifsConditionAO0P0ChangeTypeModified string = "Modified"

	// NotifsConditionAO0P0ChangeTypeDeleted captures enum value "Deleted"
	NotifsConditionAO0P0ChangeTypeDeleted string = "Deleted"
)

// prop value enum
func (m *NotifsConditionAO0P0) validateChangeTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, notifsConditionAO0P0TypeChangeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NotifsConditionAO0P0) validateChangeType(formats strfmt.Registry) error {

	if swag.IsZero(m.ChangeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateChangeTypeEnum("ChangeType", "body", *m.ChangeType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NotifsConditionAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotifsConditionAO0P0) UnmarshalBinary(b []byte) error {
	var res NotifsConditionAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
