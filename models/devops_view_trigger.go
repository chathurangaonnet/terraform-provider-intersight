// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DevopsViewTrigger Devops:View Trigger
//
// This trigger implements reprocessing of a View by reading an object from the database based on the provided REST input and 1) if the MO exists then performs view processing on the MO or 2) if the MO does not exist then deletes the View document.
//
// swagger:model devopsViewTrigger
type DevopsViewTrigger struct {
	DevopsAbstractTriggerDetails

	// The type of the Managed Object, e.g. compute.RackUnit.
	//
	MoType string `json:"MoType,omitempty"`

	// The Moid of the Managed Object.
	//
	Moid string `json:"Moid,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DevopsViewTrigger) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DevopsAbstractTriggerDetails
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DevopsAbstractTriggerDetails = aO0

	// AO1
	var dataAO1 struct {
		MoType string `json:"MoType,omitempty"`

		Moid string `json:"Moid,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.MoType = dataAO1.MoType

	m.Moid = dataAO1.Moid

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DevopsViewTrigger) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.DevopsAbstractTriggerDetails)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		MoType string `json:"MoType,omitempty"`

		Moid string `json:"Moid,omitempty"`
	}

	dataAO1.MoType = m.MoType

	dataAO1.Moid = m.Moid

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this devops view trigger
func (m *DevopsViewTrigger) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DevopsAbstractTriggerDetails
	if err := m.DevopsAbstractTriggerDetails.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DevopsViewTrigger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevopsViewTrigger) UnmarshalBinary(b []byte) error {
	var res DevopsViewTrigger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
