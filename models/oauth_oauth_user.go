// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// OauthOauthUser Oauth:Oauth User
//
// Oauth user
//
// swagger:model oauthOauthUser
type OauthOauthUser struct {
	MoBaseMo

	// List of api access tokens
	//
	AccessTokens []*OauthAccessToken `json:"AccessTokens"`

	// account
	Account *IamAccountRef `json:"Account,omitempty"`

	// User name
	//
	UserID string `json:"UserId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *OauthOauthUser) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		AccessTokens []*OauthAccessToken `json:"AccessTokens"`

		Account *IamAccountRef `json:"Account,omitempty"`

		UserID string `json:"UserId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AccessTokens = dataAO1.AccessTokens

	m.Account = dataAO1.Account

	m.UserID = dataAO1.UserID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m OauthOauthUser) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		AccessTokens []*OauthAccessToken `json:"AccessTokens"`

		Account *IamAccountRef `json:"Account,omitempty"`

		UserID string `json:"UserId,omitempty"`
	}

	dataAO1.AccessTokens = m.AccessTokens

	dataAO1.Account = m.Account

	dataAO1.UserID = m.UserID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this oauth oauth user
func (m *OauthOauthUser) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessTokens(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OauthOauthUser) validateAccessTokens(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessTokens) { // not required
		return nil
	}

	for i := 0; i < len(m.AccessTokens); i++ {
		if swag.IsZero(m.AccessTokens[i]) { // not required
			continue
		}

		if m.AccessTokens[i] != nil {
			if err := m.AccessTokens[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AccessTokens" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OauthOauthUser) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OauthOauthUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OauthOauthUser) UnmarshalBinary(b []byte) error {
	var res OauthOauthUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
