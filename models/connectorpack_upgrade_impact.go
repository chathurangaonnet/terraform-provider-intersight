// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConnectorpackUpgradeImpact Connectorpack:Upgrade Impact
//
// Used to determine the list of connector packs to be installed on a target UCS Director in its next upgrade cycle. Accepts the moid of the target UcsdInfo as part of the filter query. Given below is a sample url :- https://{{target}}/api/v1/connectorpack/UpgradeImpacts?$filter=(UcsdInfo.Moid eq <<MoId>>).
//
// swagger:model connectorpackUpgradeImpact
type ConnectorpackUpgradeImpact struct {
	MoBaseMo

	// Information about connector pack updates available in the next upgrade cycle.
	// Read Only: true
	ConnectorPack []*ConnectorpackConnectorPackUpdate `json:"ConnectorPack"`

	// States whether the UCS Director is eligible for an upgrade. Set to true if connector packs are available for upgrade, else set to false.
	// Read Only: true
	IsEligibleForUpgrade *bool `json:"IsEligibleForUpgrade,omitempty"`

	// States whether all the requisite updates have been downloaded to the target UCS Director. Set to true if all connector packs required to upgrade UCS Director to the next iteration have been downloaded, else set to false.
	// Read Only: true
	IsUpdateDownloaded *bool `json:"IsUpdateDownloaded,omitempty"`

	// Relationship to UCS Director for which connector packs are to be estimated.
	UcsdInfo *IaasUcsdInfoRef `json:"UcsdInfo,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ConnectorpackUpgradeImpact) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		ConnectorPack []*ConnectorpackConnectorPackUpdate `json:"ConnectorPack"`

		IsEligibleForUpgrade *bool `json:"IsEligibleForUpgrade,omitempty"`

		IsUpdateDownloaded *bool `json:"IsUpdateDownloaded,omitempty"`

		UcsdInfo *IaasUcsdInfoRef `json:"UcsdInfo,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ConnectorPack = dataAO1.ConnectorPack

	m.IsEligibleForUpgrade = dataAO1.IsEligibleForUpgrade

	m.IsUpdateDownloaded = dataAO1.IsUpdateDownloaded

	m.UcsdInfo = dataAO1.UcsdInfo

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ConnectorpackUpgradeImpact) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ConnectorPack []*ConnectorpackConnectorPackUpdate `json:"ConnectorPack"`

		IsEligibleForUpgrade *bool `json:"IsEligibleForUpgrade,omitempty"`

		IsUpdateDownloaded *bool `json:"IsUpdateDownloaded,omitempty"`

		UcsdInfo *IaasUcsdInfoRef `json:"UcsdInfo,omitempty"`
	}

	dataAO1.ConnectorPack = m.ConnectorPack

	dataAO1.IsEligibleForUpgrade = m.IsEligibleForUpgrade

	dataAO1.IsUpdateDownloaded = m.IsUpdateDownloaded

	dataAO1.UcsdInfo = m.UcsdInfo

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this connectorpack upgrade impact
func (m *ConnectorpackUpgradeImpact) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectorPack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUcsdInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectorpackUpgradeImpact) validateConnectorPack(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectorPack) { // not required
		return nil
	}

	for i := 0; i < len(m.ConnectorPack); i++ {
		if swag.IsZero(m.ConnectorPack[i]) { // not required
			continue
		}

		if m.ConnectorPack[i] != nil {
			if err := m.ConnectorPack[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ConnectorPack" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConnectorpackUpgradeImpact) validateUcsdInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.UcsdInfo) { // not required
		return nil
	}

	if m.UcsdInfo != nil {
		if err := m.UcsdInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UcsdInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectorpackUpgradeImpact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectorpackUpgradeImpact) UnmarshalBinary(b []byte) error {
	var res ConnectorpackUpgradeImpact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
