// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IamLdapBaseProperties Iam:Ldap Base Properties
//
// Base settings of LDAP required while configuring LDAP policy.
//
// swagger:model iamLdapBaseProperties
type IamLdapBaseProperties struct {
	IamLdapBasePropertiesAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamLdapBaseProperties) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 IamLdapBasePropertiesAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.IamLdapBasePropertiesAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamLdapBaseProperties) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.IamLdapBasePropertiesAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam ldap base properties
func (m *IamLdapBaseProperties) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with IamLdapBasePropertiesAO0P0
	if err := m.IamLdapBasePropertiesAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *IamLdapBaseProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamLdapBaseProperties) UnmarshalBinary(b []byte) error {
	var res IamLdapBaseProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IamLdapBasePropertiesAO0P0 iam ldap base properties a o0 p0
// swagger:model IamLdapBasePropertiesAO0P0
type IamLdapBasePropertiesAO0P0 struct {

	// Role and locale information of the user.
	//
	Attribute string `json:"Attribute,omitempty"`

	// Base Distinguished Name (DN). Starting point from where server will search for users and groups.
	//
	BaseDn string `json:"BaseDn,omitempty"`

	// Distinguished Name (DN) of the user, that is used to authenticate against LDAP servers.
	//
	BindDn string `json:"BindDn,omitempty"`

	// Authentication method to access LDAP servers.
	//
	// Enum: [LoginCredentials Anonymous ConfiguredCredentials]
	BindMethod *string `json:"BindMethod,omitempty"`

	// The IPv4 domain that all users must be in.
	//
	Domain string `json:"Domain,omitempty"`

	// If enabled, the endpoint encrypts all information it sends to the LDAP server.
	//
	EnableEncryption *bool `json:"EnableEncryption,omitempty"`

	// If enabled, user authorization is also done at the group level for LDAP users not in the local user database.
	//
	EnableGroupAuthorization *bool `json:"EnableGroupAuthorization,omitempty"`

	// Criteria to identify entries in search requests.
	//
	Filter string `json:"Filter,omitempty"`

	// Groups to which an LDAP entry belongs.
	//
	GroupAttribute string `json:"GroupAttribute,omitempty"`

	// is password set
	// Read Only: true
	IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

	// Search depth to look for a nested LDAP group in an LDAP group map.
	//
	NestedGroupSearchDepth int64 `json:"NestedGroupSearchDepth,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// Password of the user, that is used to authenticate.
	//
	Password string `json:"Password,omitempty"`

	// LDAP authentication timeout duration, in seconds.
	//
	Timeout int64 `json:"Timeout,omitempty"`

	// iam ldap base properties a o0 p0
	IamLdapBasePropertiesAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *IamLdapBasePropertiesAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Role and locale information of the user.
		//
		Attribute string `json:"Attribute,omitempty"`

		// Base Distinguished Name (DN). Starting point from where server will search for users and groups.
		//
		BaseDn string `json:"BaseDn,omitempty"`

		// Distinguished Name (DN) of the user, that is used to authenticate against LDAP servers.
		//
		BindDn string `json:"BindDn,omitempty"`

		// Authentication method to access LDAP servers.
		//
		// Enum: [LoginCredentials Anonymous ConfiguredCredentials]
		BindMethod *string `json:"BindMethod,omitempty"`

		// The IPv4 domain that all users must be in.
		//
		Domain string `json:"Domain,omitempty"`

		// If enabled, the endpoint encrypts all information it sends to the LDAP server.
		//
		EnableEncryption *bool `json:"EnableEncryption,omitempty"`

		// If enabled, user authorization is also done at the group level for LDAP users not in the local user database.
		//
		EnableGroupAuthorization *bool `json:"EnableGroupAuthorization,omitempty"`

		// Criteria to identify entries in search requests.
		//
		Filter string `json:"Filter,omitempty"`

		// Groups to which an LDAP entry belongs.
		//
		GroupAttribute string `json:"GroupAttribute,omitempty"`

		// is password set
		// Read Only: true
		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		// Search depth to look for a nested LDAP group in an LDAP group map.
		//
		NestedGroupSearchDepth int64 `json:"NestedGroupSearchDepth,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Password of the user, that is used to authenticate.
		//
		Password string `json:"Password,omitempty"`

		// LDAP authentication timeout duration, in seconds.
		//
		Timeout int64 `json:"Timeout,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv IamLdapBasePropertiesAO0P0

	rcv.Attribute = stage1.Attribute

	rcv.BaseDn = stage1.BaseDn

	rcv.BindDn = stage1.BindDn

	rcv.BindMethod = stage1.BindMethod

	rcv.Domain = stage1.Domain

	rcv.EnableEncryption = stage1.EnableEncryption

	rcv.EnableGroupAuthorization = stage1.EnableGroupAuthorization

	rcv.Filter = stage1.Filter

	rcv.GroupAttribute = stage1.GroupAttribute

	rcv.IsPasswordSet = stage1.IsPasswordSet

	rcv.NestedGroupSearchDepth = stage1.NestedGroupSearchDepth

	rcv.ObjectType = stage1.ObjectType

	rcv.Password = stage1.Password

	rcv.Timeout = stage1.Timeout

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Attribute")

	delete(stage2, "BaseDn")

	delete(stage2, "BindDn")

	delete(stage2, "BindMethod")

	delete(stage2, "Domain")

	delete(stage2, "EnableEncryption")

	delete(stage2, "EnableGroupAuthorization")

	delete(stage2, "Filter")

	delete(stage2, "GroupAttribute")

	delete(stage2, "IsPasswordSet")

	delete(stage2, "NestedGroupSearchDepth")

	delete(stage2, "ObjectType")

	delete(stage2, "Password")

	delete(stage2, "Timeout")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.IamLdapBasePropertiesAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m IamLdapBasePropertiesAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Role and locale information of the user.
		//
		Attribute string `json:"Attribute,omitempty"`

		// Base Distinguished Name (DN). Starting point from where server will search for users and groups.
		//
		BaseDn string `json:"BaseDn,omitempty"`

		// Distinguished Name (DN) of the user, that is used to authenticate against LDAP servers.
		//
		BindDn string `json:"BindDn,omitempty"`

		// Authentication method to access LDAP servers.
		//
		// Enum: [LoginCredentials Anonymous ConfiguredCredentials]
		BindMethod *string `json:"BindMethod,omitempty"`

		// The IPv4 domain that all users must be in.
		//
		Domain string `json:"Domain,omitempty"`

		// If enabled, the endpoint encrypts all information it sends to the LDAP server.
		//
		EnableEncryption *bool `json:"EnableEncryption,omitempty"`

		// If enabled, user authorization is also done at the group level for LDAP users not in the local user database.
		//
		EnableGroupAuthorization *bool `json:"EnableGroupAuthorization,omitempty"`

		// Criteria to identify entries in search requests.
		//
		Filter string `json:"Filter,omitempty"`

		// Groups to which an LDAP entry belongs.
		//
		GroupAttribute string `json:"GroupAttribute,omitempty"`

		// is password set
		// Read Only: true
		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		// Search depth to look for a nested LDAP group in an LDAP group map.
		//
		NestedGroupSearchDepth int64 `json:"NestedGroupSearchDepth,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Password of the user, that is used to authenticate.
		//
		Password string `json:"Password,omitempty"`

		// LDAP authentication timeout duration, in seconds.
		//
		Timeout int64 `json:"Timeout,omitempty"`
	}

	stage1.Attribute = m.Attribute

	stage1.BaseDn = m.BaseDn

	stage1.BindDn = m.BindDn

	stage1.BindMethod = m.BindMethod

	stage1.Domain = m.Domain

	stage1.EnableEncryption = m.EnableEncryption

	stage1.EnableGroupAuthorization = m.EnableGroupAuthorization

	stage1.Filter = m.Filter

	stage1.GroupAttribute = m.GroupAttribute

	stage1.IsPasswordSet = m.IsPasswordSet

	stage1.NestedGroupSearchDepth = m.NestedGroupSearchDepth

	stage1.ObjectType = m.ObjectType

	stage1.Password = m.Password

	stage1.Timeout = m.Timeout

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.IamLdapBasePropertiesAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.IamLdapBasePropertiesAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this iam ldap base properties a o0 p0
func (m *IamLdapBasePropertiesAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBindMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var iamLdapBasePropertiesAO0P0TypeBindMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LoginCredentials","Anonymous","ConfiguredCredentials"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iamLdapBasePropertiesAO0P0TypeBindMethodPropEnum = append(iamLdapBasePropertiesAO0P0TypeBindMethodPropEnum, v)
	}
}

const (

	// IamLdapBasePropertiesAO0P0BindMethodLoginCredentials captures enum value "LoginCredentials"
	IamLdapBasePropertiesAO0P0BindMethodLoginCredentials string = "LoginCredentials"

	// IamLdapBasePropertiesAO0P0BindMethodAnonymous captures enum value "Anonymous"
	IamLdapBasePropertiesAO0P0BindMethodAnonymous string = "Anonymous"

	// IamLdapBasePropertiesAO0P0BindMethodConfiguredCredentials captures enum value "ConfiguredCredentials"
	IamLdapBasePropertiesAO0P0BindMethodConfiguredCredentials string = "ConfiguredCredentials"
)

// prop value enum
func (m *IamLdapBasePropertiesAO0P0) validateBindMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, iamLdapBasePropertiesAO0P0TypeBindMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IamLdapBasePropertiesAO0P0) validateBindMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.BindMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateBindMethodEnum("BindMethod", "body", *m.BindMethod); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamLdapBasePropertiesAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamLdapBasePropertiesAO0P0) UnmarshalBinary(b []byte) error {
	var res IamLdapBasePropertiesAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
