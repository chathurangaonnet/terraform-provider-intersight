// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigImportedItem Config:Imported Item
//
// A single managed object that is being imported.
//
// swagger:model configImportedItem
type ConfigImportedItem struct {
	MoBaseMo

	// A collection of references to the [config.Importer](mo://config.Importer) Managed Object.
	// When this managed object is deleted, the referenced [config.Importer](mo://config.Importer) MO unsets its reference to this deleted MO.
	// Read Only: true
	Importer *ConfigImporterRef `json:"Importer,omitempty"`

	// Specifies whether this item MO was in shared scope or user scope when exported.
	// Read Only: true
	IsShared *bool `json:"IsShared,omitempty"`

	// Specifies whether this item MO was updated or created while importing in desired service.
	// Read Only: true
	IsUpdated *bool `json:"IsUpdated,omitempty"`

	// Identity of the MO that is being imported.
	// Read Only: true
	Item *ConfigMoRef `json:"Item,omitempty"`

	// MO item identity (the moref corresponding to item) expressed as a string.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// Moid of the MO created/updated during import for the item.
	// Read Only: true
	NewMoid string `json:"NewMoid,omitempty"`

	// Version of the service that owned the item MO when the item was exported.
	// Read Only: true
	ServiceVersion string `json:"ServiceVersion,omitempty"`

	// Status of the item's import operation.
	// Read Only: true
	// Enum: [ InProgress Success Failed RollBackInitiated RollBackFailed RollbackCompleted RollbackAborted OperationTimedOut]
	Status string `json:"Status,omitempty"`

	// Progress or error message for the MO's import operation.
	// Read Only: true
	StatusMessage string `json:"StatusMessage,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ConfigImportedItem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Importer *ConfigImporterRef `json:"Importer,omitempty"`

		IsShared *bool `json:"IsShared,omitempty"`

		IsUpdated *bool `json:"IsUpdated,omitempty"`

		Item *ConfigMoRef `json:"Item,omitempty"`

		Name string `json:"Name,omitempty"`

		NewMoid string `json:"NewMoid,omitempty"`

		ServiceVersion string `json:"ServiceVersion,omitempty"`

		Status string `json:"Status,omitempty"`

		StatusMessage string `json:"StatusMessage,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Importer = dataAO1.Importer

	m.IsShared = dataAO1.IsShared

	m.IsUpdated = dataAO1.IsUpdated

	m.Item = dataAO1.Item

	m.Name = dataAO1.Name

	m.NewMoid = dataAO1.NewMoid

	m.ServiceVersion = dataAO1.ServiceVersion

	m.Status = dataAO1.Status

	m.StatusMessage = dataAO1.StatusMessage

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ConfigImportedItem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Importer *ConfigImporterRef `json:"Importer,omitempty"`

		IsShared *bool `json:"IsShared,omitempty"`

		IsUpdated *bool `json:"IsUpdated,omitempty"`

		Item *ConfigMoRef `json:"Item,omitempty"`

		Name string `json:"Name,omitempty"`

		NewMoid string `json:"NewMoid,omitempty"`

		ServiceVersion string `json:"ServiceVersion,omitempty"`

		Status string `json:"Status,omitempty"`

		StatusMessage string `json:"StatusMessage,omitempty"`
	}

	dataAO1.Importer = m.Importer

	dataAO1.IsShared = m.IsShared

	dataAO1.IsUpdated = m.IsUpdated

	dataAO1.Item = m.Item

	dataAO1.Name = m.Name

	dataAO1.NewMoid = m.NewMoid

	dataAO1.ServiceVersion = m.ServiceVersion

	dataAO1.Status = m.Status

	dataAO1.StatusMessage = m.StatusMessage

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this config imported item
func (m *ConfigImportedItem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImporter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigImportedItem) validateImporter(formats strfmt.Registry) error {

	if swag.IsZero(m.Importer) { // not required
		return nil
	}

	if m.Importer != nil {
		if err := m.Importer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Importer")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigImportedItem) validateItem(formats strfmt.Registry) error {

	if swag.IsZero(m.Item) { // not required
		return nil
	}

	if m.Item != nil {
		if err := m.Item.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Item")
			}
			return err
		}
	}

	return nil
}

var configImportedItemTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","InProgress","Success","Failed","RollBackInitiated","RollBackFailed","RollbackCompleted","RollbackAborted","OperationTimedOut"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configImportedItemTypeStatusPropEnum = append(configImportedItemTypeStatusPropEnum, v)
	}
}

// property enum
func (m *ConfigImportedItem) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, configImportedItemTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConfigImportedItem) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigImportedItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigImportedItem) UnmarshalBinary(b []byte) error {
	var res ConfigImportedItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
