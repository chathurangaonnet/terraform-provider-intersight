// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OauthAccessToken Oauth:Access Token
// swagger:model oauthAccessToken
type OauthAccessToken struct {
	OauthAccessTokenAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *OauthAccessToken) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 OauthAccessTokenAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.OauthAccessTokenAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m OauthAccessToken) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.OauthAccessTokenAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this oauth access token
func (m *OauthAccessToken) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with OauthAccessTokenAO0P0
	if err := m.OauthAccessTokenAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *OauthAccessToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OauthAccessToken) UnmarshalBinary(b []byte) error {
	var res OauthAccessToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OauthAccessTokenAO0P0 oauth access token a o0 p0
// swagger:model OauthAccessTokenAO0P0
type OauthAccessTokenAO0P0 struct {

	// Oauth api type
	//
	// Enum: [Unknown License]
	APIType *string `json:"ApiType,omitempty"`

	// Access token expiry time
	//
	// Read Only: true
	// Format: date-time
	ExpiryTime strfmt.DateTime `json:"ExpiryTime,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// Access token status
	//
	// Enum: [Inactive Active Expired]
	Status *string `json:"Status,omitempty"`

	// Access token
	//
	// Read Only: true
	Token string `json:"Token,omitempty"`

	// oauth access token a o0 p0
	OauthAccessTokenAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *OauthAccessTokenAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Oauth api type
		//
		// Enum: [Unknown License]
		APIType *string `json:"ApiType,omitempty"`

		// Access token expiry time
		//
		// Read Only: true
		// Format: date-time
		ExpiryTime strfmt.DateTime `json:"ExpiryTime,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Access token status
		//
		// Enum: [Inactive Active Expired]
		Status *string `json:"Status,omitempty"`

		// Access token
		//
		// Read Only: true
		Token string `json:"Token,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv OauthAccessTokenAO0P0

	rcv.APIType = stage1.APIType

	rcv.ExpiryTime = stage1.ExpiryTime

	rcv.ObjectType = stage1.ObjectType

	rcv.Status = stage1.Status

	rcv.Token = stage1.Token

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "ApiType")

	delete(stage2, "ExpiryTime")

	delete(stage2, "ObjectType")

	delete(stage2, "Status")

	delete(stage2, "Token")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.OauthAccessTokenAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m OauthAccessTokenAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Oauth api type
		//
		// Enum: [Unknown License]
		APIType *string `json:"ApiType,omitempty"`

		// Access token expiry time
		//
		// Read Only: true
		// Format: date-time
		ExpiryTime strfmt.DateTime `json:"ExpiryTime,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Access token status
		//
		// Enum: [Inactive Active Expired]
		Status *string `json:"Status,omitempty"`

		// Access token
		//
		// Read Only: true
		Token string `json:"Token,omitempty"`
	}

	stage1.APIType = m.APIType

	stage1.ExpiryTime = m.ExpiryTime

	stage1.ObjectType = m.ObjectType

	stage1.Status = m.Status

	stage1.Token = m.Token

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.OauthAccessTokenAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.OauthAccessTokenAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this oauth access token a o0 p0
func (m *OauthAccessTokenAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oauthAccessTokenAO0P0TypeAPITypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","License"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oauthAccessTokenAO0P0TypeAPITypePropEnum = append(oauthAccessTokenAO0P0TypeAPITypePropEnum, v)
	}
}

const (

	// OauthAccessTokenAO0P0APITypeUnknown captures enum value "Unknown"
	OauthAccessTokenAO0P0APITypeUnknown string = "Unknown"

	// OauthAccessTokenAO0P0APITypeLicense captures enum value "License"
	OauthAccessTokenAO0P0APITypeLicense string = "License"
)

// prop value enum
func (m *OauthAccessTokenAO0P0) validateAPITypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, oauthAccessTokenAO0P0TypeAPITypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OauthAccessTokenAO0P0) validateAPIType(formats strfmt.Registry) error {

	if swag.IsZero(m.APIType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAPITypeEnum("ApiType", "body", *m.APIType); err != nil {
		return err
	}

	return nil
}

func (m *OauthAccessTokenAO0P0) validateExpiryTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpiryTime) { // not required
		return nil
	}

	if err := validate.FormatOf("ExpiryTime", "body", "date-time", m.ExpiryTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var oauthAccessTokenAO0P0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Inactive","Active","Expired"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oauthAccessTokenAO0P0TypeStatusPropEnum = append(oauthAccessTokenAO0P0TypeStatusPropEnum, v)
	}
}

const (

	// OauthAccessTokenAO0P0StatusInactive captures enum value "Inactive"
	OauthAccessTokenAO0P0StatusInactive string = "Inactive"

	// OauthAccessTokenAO0P0StatusActive captures enum value "Active"
	OauthAccessTokenAO0P0StatusActive string = "Active"

	// OauthAccessTokenAO0P0StatusExpired captures enum value "Expired"
	OauthAccessTokenAO0P0StatusExpired string = "Expired"
)

// prop value enum
func (m *OauthAccessTokenAO0P0) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, oauthAccessTokenAO0P0TypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OauthAccessTokenAO0P0) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OauthAccessTokenAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OauthAccessTokenAO0P0) UnmarshalBinary(b []byte) error {
	var res OauthAccessTokenAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
