// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigExporter Config:Exporter
//
// All export operations are captured as Exporter instances. Users shall use this Exporter
// mo to track the export operation progress.
//
// swagger:model configExporter
type ConfigExporter struct {
	MoBaseMo

	// Pre-signed URL to download the exported package, if the export operation has completed successfully. Regenerated during a GET request, if the existing pre-signed URL has expired.
	// Read Only: true
	DownloadPath string `json:"DownloadPath,omitempty"`

	// Reference to export candidates.
	// Read Only: true
	ExportCandidates []*ConfigExportCandidateRef `json:"ExportCandidates"`

	// Reference to individual exported managed objects.
	// Read Only: true
	ExportedItems []*ConfigExportedItemRef `json:"ExportedItems"`

	// List of MOs to be exported.
	Items []*ConfigMoRef `json:"Items"`

	// An identifier for the exporter instance.
	Name string `json:"Name,omitempty"`

	// Relationship to the Organization that owns the Managed Object.
	Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

	// Status of the export operation.
	// Read Only: true
	// Enum: [ InProgress Success Failed RollBackInitiated RollBackFailed RollbackCompleted RollbackAborted OperationTimedOut]
	Status string `json:"Status,omitempty"`

	// Status message associated with failures or progress indication.
	// Read Only: true
	StatusMessage string `json:"StatusMessage,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ConfigExporter) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		DownloadPath string `json:"DownloadPath,omitempty"`

		ExportCandidates []*ConfigExportCandidateRef `json:"ExportCandidates"`

		ExportedItems []*ConfigExportedItemRef `json:"ExportedItems"`

		Items []*ConfigMoRef `json:"Items"`

		Name string `json:"Name,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		Status string `json:"Status,omitempty"`

		StatusMessage string `json:"StatusMessage,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.DownloadPath = dataAO1.DownloadPath

	m.ExportCandidates = dataAO1.ExportCandidates

	m.ExportedItems = dataAO1.ExportedItems

	m.Items = dataAO1.Items

	m.Name = dataAO1.Name

	m.Organization = dataAO1.Organization

	m.Status = dataAO1.Status

	m.StatusMessage = dataAO1.StatusMessage

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ConfigExporter) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		DownloadPath string `json:"DownloadPath,omitempty"`

		ExportCandidates []*ConfigExportCandidateRef `json:"ExportCandidates"`

		ExportedItems []*ConfigExportedItemRef `json:"ExportedItems"`

		Items []*ConfigMoRef `json:"Items"`

		Name string `json:"Name,omitempty"`

		Organization *OrganizationOrganizationRef `json:"Organization,omitempty"`

		Status string `json:"Status,omitempty"`

		StatusMessage string `json:"StatusMessage,omitempty"`
	}

	dataAO1.DownloadPath = m.DownloadPath

	dataAO1.ExportCandidates = m.ExportCandidates

	dataAO1.ExportedItems = m.ExportedItems

	dataAO1.Items = m.Items

	dataAO1.Name = m.Name

	dataAO1.Organization = m.Organization

	dataAO1.Status = m.Status

	dataAO1.StatusMessage = m.StatusMessage

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this config exporter
func (m *ConfigExporter) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExportCandidates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExportedItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigExporter) validateExportCandidates(formats strfmt.Registry) error {

	if swag.IsZero(m.ExportCandidates) { // not required
		return nil
	}

	for i := 0; i < len(m.ExportCandidates); i++ {
		if swag.IsZero(m.ExportCandidates[i]) { // not required
			continue
		}

		if m.ExportCandidates[i] != nil {
			if err := m.ExportCandidates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ExportCandidates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigExporter) validateExportedItems(formats strfmt.Registry) error {

	if swag.IsZero(m.ExportedItems) { // not required
		return nil
	}

	for i := 0; i < len(m.ExportedItems); i++ {
		if swag.IsZero(m.ExportedItems[i]) { // not required
			continue
		}

		if m.ExportedItems[i] != nil {
			if err := m.ExportedItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ExportedItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigExporter) validateItems(formats strfmt.Registry) error {

	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigExporter) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

var configExporterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","InProgress","Success","Failed","RollBackInitiated","RollBackFailed","RollbackCompleted","RollbackAborted","OperationTimedOut"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configExporterTypeStatusPropEnum = append(configExporterTypeStatusPropEnum, v)
	}
}

// property enum
func (m *ConfigExporter) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, configExporterTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConfigExporter) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigExporter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigExporter) UnmarshalBinary(b []byte) error {
	var res ConfigExporter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
