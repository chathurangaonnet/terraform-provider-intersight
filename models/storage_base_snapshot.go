// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageBaseSnapshot Storage:Base Snapshot
//
// Reference marker for volume. It is a point-in-time copy of the volume.
//
// swagger:model storageBaseSnapshot
type StorageBaseSnapshot struct {
	MoBaseMo

	// Exact date and time at which snapshot was created.
	// Read Only: true
	// Format: date-time
	CreatedTime strfmt.DateTime `json:"CreatedTime,omitempty"`

	// Name of the snapshot which represents point-in-time copy of volume.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// Name of the protection group to which the snapshot belongs. Value is empty, if the snapshot is created directly on volume.
	// Read Only: true
	ProtectionGroupName string `json:"ProtectionGroupName,omitempty"`

	// Snapshot size represented in bytes.
	// Read Only: true
	Size int64 `json:"Size,omitempty"`

	// Source object on which the snapshot is created. It is the name of the originating volume.
	// Read Only: true
	Source string `json:"Source,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageBaseSnapshot) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		CreatedTime strfmt.DateTime `json:"CreatedTime,omitempty"`

		Name string `json:"Name,omitempty"`

		ProtectionGroupName string `json:"ProtectionGroupName,omitempty"`

		Size int64 `json:"Size,omitempty"`

		Source string `json:"Source,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CreatedTime = dataAO1.CreatedTime

	m.Name = dataAO1.Name

	m.ProtectionGroupName = dataAO1.ProtectionGroupName

	m.Size = dataAO1.Size

	m.Source = dataAO1.Source

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageBaseSnapshot) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CreatedTime strfmt.DateTime `json:"CreatedTime,omitempty"`

		Name string `json:"Name,omitempty"`

		ProtectionGroupName string `json:"ProtectionGroupName,omitempty"`

		Size int64 `json:"Size,omitempty"`

		Source string `json:"Source,omitempty"`
	}

	dataAO1.CreatedTime = m.CreatedTime

	dataAO1.Name = m.Name

	dataAO1.ProtectionGroupName = m.ProtectionGroupName

	dataAO1.Size = m.Size

	dataAO1.Source = m.Source

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage base snapshot
func (m *StorageBaseSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageBaseSnapshot) validateCreatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedTime", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageBaseSnapshot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBaseSnapshot) UnmarshalBinary(b []byte) error {
	var res StorageBaseSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
