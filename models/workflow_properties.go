// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowProperties Workflow:Properties
//
// Properties for the task definition like the inputs, outputs, timeout and retry policies. Tasks are the building blocks for workflows.
//
// swagger:model workflowProperties
type WorkflowProperties struct {
	WorkflowPropertiesAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowProperties) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkflowPropertiesAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkflowPropertiesAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowProperties) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.WorkflowPropertiesAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow properties
func (m *WorkflowProperties) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkflowPropertiesAO0P0
	if err := m.WorkflowPropertiesAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowProperties) UnmarshalBinary(b []byte) error {
	var res WorkflowProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkflowPropertiesAO0P0 workflow properties a o0 p0
// swagger:model WorkflowPropertiesAO0P0
type WorkflowPropertiesAO0P0 struct {

	// The schema expected for input parameters for this task.
	//
	InputDefinition []*WorkflowBaseDataType `json:"InputDefinition"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// The schema expected for output parameters for this task.
	//
	OutputDefinition []*WorkflowBaseDataType `json:"OutputDefinition"`

	// The number of times a task should be tried before marking as failed.
	//
	RetryCount int64 `json:"RetryCount,omitempty"`

	// The delay in seconds after which the the task is re-tried.
	//
	RetryDelay int64 `json:"RetryDelay,omitempty"`

	// The retry policy for the task.
	//
	// Enum: [Fixed]
	RetryPolicy *string `json:"RetryPolicy,omitempty"`

	// The timeout value in seconds after which task will be marked as timed out. Max allowed value is 7 days.
	//
	Timeout int64 `json:"Timeout,omitempty"`

	// The timeout policy for the task.
	//
	// Enum: [Timeout Retry]
	TimeoutPolicy *string `json:"TimeoutPolicy,omitempty"`

	// workflow properties a o0 p0
	WorkflowPropertiesAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *WorkflowPropertiesAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// The schema expected for input parameters for this task.
		//
		InputDefinition []*WorkflowBaseDataType `json:"InputDefinition"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// The schema expected for output parameters for this task.
		//
		OutputDefinition []*WorkflowBaseDataType `json:"OutputDefinition"`

		// The number of times a task should be tried before marking as failed.
		//
		RetryCount int64 `json:"RetryCount,omitempty"`

		// The delay in seconds after which the the task is re-tried.
		//
		RetryDelay int64 `json:"RetryDelay,omitempty"`

		// The retry policy for the task.
		//
		// Enum: [Fixed]
		RetryPolicy *string `json:"RetryPolicy,omitempty"`

		// The timeout value in seconds after which task will be marked as timed out. Max allowed value is 7 days.
		//
		Timeout int64 `json:"Timeout,omitempty"`

		// The timeout policy for the task.
		//
		// Enum: [Timeout Retry]
		TimeoutPolicy *string `json:"TimeoutPolicy,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv WorkflowPropertiesAO0P0

	rcv.InputDefinition = stage1.InputDefinition

	rcv.ObjectType = stage1.ObjectType

	rcv.OutputDefinition = stage1.OutputDefinition

	rcv.RetryCount = stage1.RetryCount

	rcv.RetryDelay = stage1.RetryDelay

	rcv.RetryPolicy = stage1.RetryPolicy

	rcv.Timeout = stage1.Timeout

	rcv.TimeoutPolicy = stage1.TimeoutPolicy

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "InputDefinition")

	delete(stage2, "ObjectType")

	delete(stage2, "OutputDefinition")

	delete(stage2, "RetryCount")

	delete(stage2, "RetryDelay")

	delete(stage2, "RetryPolicy")

	delete(stage2, "Timeout")

	delete(stage2, "TimeoutPolicy")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.WorkflowPropertiesAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m WorkflowPropertiesAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// The schema expected for input parameters for this task.
		//
		InputDefinition []*WorkflowBaseDataType `json:"InputDefinition"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// The schema expected for output parameters for this task.
		//
		OutputDefinition []*WorkflowBaseDataType `json:"OutputDefinition"`

		// The number of times a task should be tried before marking as failed.
		//
		RetryCount int64 `json:"RetryCount,omitempty"`

		// The delay in seconds after which the the task is re-tried.
		//
		RetryDelay int64 `json:"RetryDelay,omitempty"`

		// The retry policy for the task.
		//
		// Enum: [Fixed]
		RetryPolicy *string `json:"RetryPolicy,omitempty"`

		// The timeout value in seconds after which task will be marked as timed out. Max allowed value is 7 days.
		//
		Timeout int64 `json:"Timeout,omitempty"`

		// The timeout policy for the task.
		//
		// Enum: [Timeout Retry]
		TimeoutPolicy *string `json:"TimeoutPolicy,omitempty"`
	}

	stage1.InputDefinition = m.InputDefinition

	stage1.ObjectType = m.ObjectType

	stage1.OutputDefinition = m.OutputDefinition

	stage1.RetryCount = m.RetryCount

	stage1.RetryDelay = m.RetryDelay

	stage1.RetryPolicy = m.RetryPolicy

	stage1.Timeout = m.Timeout

	stage1.TimeoutPolicy = m.TimeoutPolicy

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.WorkflowPropertiesAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.WorkflowPropertiesAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this workflow properties a o0 p0
func (m *WorkflowPropertiesAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetryPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeoutPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowPropertiesAO0P0) validateInputDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.InputDefinition) { // not required
		return nil
	}

	for i := 0; i < len(m.InputDefinition); i++ {
		if swag.IsZero(m.InputDefinition[i]) { // not required
			continue
		}

		if m.InputDefinition[i] != nil {
			if err := m.InputDefinition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("InputDefinition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowPropertiesAO0P0) validateOutputDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.OutputDefinition) { // not required
		return nil
	}

	for i := 0; i < len(m.OutputDefinition); i++ {
		if swag.IsZero(m.OutputDefinition[i]) { // not required
			continue
		}

		if m.OutputDefinition[i] != nil {
			if err := m.OutputDefinition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OutputDefinition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var workflowPropertiesAO0P0TypeRetryPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Fixed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowPropertiesAO0P0TypeRetryPolicyPropEnum = append(workflowPropertiesAO0P0TypeRetryPolicyPropEnum, v)
	}
}

const (

	// WorkflowPropertiesAO0P0RetryPolicyFixed captures enum value "Fixed"
	WorkflowPropertiesAO0P0RetryPolicyFixed string = "Fixed"
)

// prop value enum
func (m *WorkflowPropertiesAO0P0) validateRetryPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workflowPropertiesAO0P0TypeRetryPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowPropertiesAO0P0) validateRetryPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.RetryPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateRetryPolicyEnum("RetryPolicy", "body", *m.RetryPolicy); err != nil {
		return err
	}

	return nil
}

var workflowPropertiesAO0P0TypeTimeoutPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Timeout","Retry"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowPropertiesAO0P0TypeTimeoutPolicyPropEnum = append(workflowPropertiesAO0P0TypeTimeoutPolicyPropEnum, v)
	}
}

const (

	// WorkflowPropertiesAO0P0TimeoutPolicyTimeout captures enum value "Timeout"
	WorkflowPropertiesAO0P0TimeoutPolicyTimeout string = "Timeout"

	// WorkflowPropertiesAO0P0TimeoutPolicyRetry captures enum value "Retry"
	WorkflowPropertiesAO0P0TimeoutPolicyRetry string = "Retry"
)

// prop value enum
func (m *WorkflowPropertiesAO0P0) validateTimeoutPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workflowPropertiesAO0P0TypeTimeoutPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowPropertiesAO0P0) validateTimeoutPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeoutPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeoutPolicyEnum("TimeoutPolicy", "body", *m.TimeoutPolicy); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowPropertiesAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowPropertiesAO0P0) UnmarshalBinary(b []byte) error {
	var res WorkflowPropertiesAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
