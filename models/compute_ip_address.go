// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComputeIPAddress Compute:Ip Address
//
// Complex type representing an ip address in UCSM.
//
// swagger:model computeIpAddress
type ComputeIPAddress struct {
	ComputeIPAddressAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ComputeIPAddress) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ComputeIPAddressAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ComputeIPAddressAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ComputeIPAddress) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ComputeIPAddressAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this compute Ip address
func (m *ComputeIPAddress) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ComputeIPAddressAO0P0
	if err := m.ComputeIPAddressAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ComputeIPAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputeIPAddress) UnmarshalBinary(b []byte) error {
	var res ComputeIPAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputeIPAddressAO0P0 compute IP address a o0 p0
// swagger:model ComputeIPAddressAO0P0
type ComputeIPAddressAO0P0 struct {

	// address
	// Read Only: true
	Address string `json:"Address,omitempty"`

	// category
	// Read Only: true
	// Enum: [Equipment ServiceProfile]
	Category string `json:"Category,omitempty"`

	// default gateway
	// Read Only: true
	DefaultGateway string `json:"DefaultGateway,omitempty"`

	// dn
	// Read Only: true
	Dn string `json:"Dn,omitempty"`

	// Http port
	// Read Only: true
	HTTPPort int64 `json:"HttpPort,omitempty"`

	// Https port
	// Read Only: true
	HTTPSPort int64 `json:"HttpsPort,omitempty"`

	// kvm port
	// Read Only: true
	KvmPort int64 `json:"KvmPort,omitempty"`

	// name
	// Read Only: true
	// Enum: [Outband Inband]
	Name string `json:"Name,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// subnet
	// Read Only: true
	Subnet string `json:"Subnet,omitempty"`

	// type
	// Read Only: true
	// Enum: [MgmtInterface VnicIpV4StaticAddr VnicIpV4PooledAddr VnicIpV4MgmtPooledAddr VnicIpV6StaticAddr VnicIpV6MgmtPooledAddr VnicIpV4ProfDerivedAddr]
	Type string `json:"Type,omitempty"`

	// compute IP address a o0 p0
	ComputeIPAddressAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *ComputeIPAddressAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// address
		// Read Only: true
		Address string `json:"Address,omitempty"`

		// category
		// Read Only: true
		// Enum: [Equipment ServiceProfile]
		Category string `json:"Category,omitempty"`

		// default gateway
		// Read Only: true
		DefaultGateway string `json:"DefaultGateway,omitempty"`

		// dn
		// Read Only: true
		Dn string `json:"Dn,omitempty"`

		// Http port
		// Read Only: true
		HTTPPort int64 `json:"HttpPort,omitempty"`

		// Https port
		// Read Only: true
		HTTPSPort int64 `json:"HttpsPort,omitempty"`

		// kvm port
		// Read Only: true
		KvmPort int64 `json:"KvmPort,omitempty"`

		// name
		// Read Only: true
		// Enum: [Outband Inband]
		Name string `json:"Name,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// subnet
		// Read Only: true
		Subnet string `json:"Subnet,omitempty"`

		// type
		// Read Only: true
		// Enum: [MgmtInterface VnicIpV4StaticAddr VnicIpV4PooledAddr VnicIpV4MgmtPooledAddr VnicIpV6StaticAddr VnicIpV6MgmtPooledAddr VnicIpV4ProfDerivedAddr]
		Type string `json:"Type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv ComputeIPAddressAO0P0

	rcv.Address = stage1.Address

	rcv.Category = stage1.Category

	rcv.DefaultGateway = stage1.DefaultGateway

	rcv.Dn = stage1.Dn

	rcv.HTTPPort = stage1.HTTPPort

	rcv.HTTPSPort = stage1.HTTPSPort

	rcv.KvmPort = stage1.KvmPort

	rcv.Name = stage1.Name

	rcv.ObjectType = stage1.ObjectType

	rcv.Subnet = stage1.Subnet

	rcv.Type = stage1.Type

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Address")

	delete(stage2, "Category")

	delete(stage2, "DefaultGateway")

	delete(stage2, "Dn")

	delete(stage2, "HttpPort")

	delete(stage2, "HttpsPort")

	delete(stage2, "KvmPort")

	delete(stage2, "Name")

	delete(stage2, "ObjectType")

	delete(stage2, "Subnet")

	delete(stage2, "Type")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.ComputeIPAddressAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m ComputeIPAddressAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// address
		// Read Only: true
		Address string `json:"Address,omitempty"`

		// category
		// Read Only: true
		// Enum: [Equipment ServiceProfile]
		Category string `json:"Category,omitempty"`

		// default gateway
		// Read Only: true
		DefaultGateway string `json:"DefaultGateway,omitempty"`

		// dn
		// Read Only: true
		Dn string `json:"Dn,omitempty"`

		// Http port
		// Read Only: true
		HTTPPort int64 `json:"HttpPort,omitempty"`

		// Https port
		// Read Only: true
		HTTPSPort int64 `json:"HttpsPort,omitempty"`

		// kvm port
		// Read Only: true
		KvmPort int64 `json:"KvmPort,omitempty"`

		// name
		// Read Only: true
		// Enum: [Outband Inband]
		Name string `json:"Name,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// subnet
		// Read Only: true
		Subnet string `json:"Subnet,omitempty"`

		// type
		// Read Only: true
		// Enum: [MgmtInterface VnicIpV4StaticAddr VnicIpV4PooledAddr VnicIpV4MgmtPooledAddr VnicIpV6StaticAddr VnicIpV6MgmtPooledAddr VnicIpV4ProfDerivedAddr]
		Type string `json:"Type,omitempty"`
	}

	stage1.Address = m.Address

	stage1.Category = m.Category

	stage1.DefaultGateway = m.DefaultGateway

	stage1.Dn = m.Dn

	stage1.HTTPPort = m.HTTPPort

	stage1.HTTPSPort = m.HTTPSPort

	stage1.KvmPort = m.KvmPort

	stage1.Name = m.Name

	stage1.ObjectType = m.ObjectType

	stage1.Subnet = m.Subnet

	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.ComputeIPAddressAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.ComputeIPAddressAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this compute IP address a o0 p0
func (m *ComputeIPAddressAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var computeIpAddressAO0P0TypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Equipment","ServiceProfile"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		computeIpAddressAO0P0TypeCategoryPropEnum = append(computeIpAddressAO0P0TypeCategoryPropEnum, v)
	}
}

const (

	// ComputeIPAddressAO0P0CategoryEquipment captures enum value "Equipment"
	ComputeIPAddressAO0P0CategoryEquipment string = "Equipment"

	// ComputeIPAddressAO0P0CategoryServiceProfile captures enum value "ServiceProfile"
	ComputeIPAddressAO0P0CategoryServiceProfile string = "ServiceProfile"
)

// prop value enum
func (m *ComputeIPAddressAO0P0) validateCategoryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, computeIpAddressAO0P0TypeCategoryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComputeIPAddressAO0P0) validateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("Category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

var computeIpAddressAO0P0TypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Outband","Inband"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		computeIpAddressAO0P0TypeNamePropEnum = append(computeIpAddressAO0P0TypeNamePropEnum, v)
	}
}

const (

	// ComputeIPAddressAO0P0NameOutband captures enum value "Outband"
	ComputeIPAddressAO0P0NameOutband string = "Outband"

	// ComputeIPAddressAO0P0NameInband captures enum value "Inband"
	ComputeIPAddressAO0P0NameInband string = "Inband"
)

// prop value enum
func (m *ComputeIPAddressAO0P0) validateNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, computeIpAddressAO0P0TypeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComputeIPAddressAO0P0) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var computeIpAddressAO0P0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MgmtInterface","VnicIpV4StaticAddr","VnicIpV4PooledAddr","VnicIpV4MgmtPooledAddr","VnicIpV6StaticAddr","VnicIpV6MgmtPooledAddr","VnicIpV4ProfDerivedAddr"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		computeIpAddressAO0P0TypeTypePropEnum = append(computeIpAddressAO0P0TypeTypePropEnum, v)
	}
}

const (

	// ComputeIPAddressAO0P0TypeMgmtInterface captures enum value "MgmtInterface"
	ComputeIPAddressAO0P0TypeMgmtInterface string = "MgmtInterface"

	// ComputeIPAddressAO0P0TypeVnicIPV4StaticAddr captures enum value "VnicIpV4StaticAddr"
	ComputeIPAddressAO0P0TypeVnicIPV4StaticAddr string = "VnicIpV4StaticAddr"

	// ComputeIPAddressAO0P0TypeVnicIPV4PooledAddr captures enum value "VnicIpV4PooledAddr"
	ComputeIPAddressAO0P0TypeVnicIPV4PooledAddr string = "VnicIpV4PooledAddr"

	// ComputeIPAddressAO0P0TypeVnicIPV4MgmtPooledAddr captures enum value "VnicIpV4MgmtPooledAddr"
	ComputeIPAddressAO0P0TypeVnicIPV4MgmtPooledAddr string = "VnicIpV4MgmtPooledAddr"

	// ComputeIPAddressAO0P0TypeVnicIPV6StaticAddr captures enum value "VnicIpV6StaticAddr"
	ComputeIPAddressAO0P0TypeVnicIPV6StaticAddr string = "VnicIpV6StaticAddr"

	// ComputeIPAddressAO0P0TypeVnicIPV6MgmtPooledAddr captures enum value "VnicIpV6MgmtPooledAddr"
	ComputeIPAddressAO0P0TypeVnicIPV6MgmtPooledAddr string = "VnicIpV6MgmtPooledAddr"

	// ComputeIPAddressAO0P0TypeVnicIPV4ProfDerivedAddr captures enum value "VnicIpV4ProfDerivedAddr"
	ComputeIPAddressAO0P0TypeVnicIPV4ProfDerivedAddr string = "VnicIpV4ProfDerivedAddr"
)

// prop value enum
func (m *ComputeIPAddressAO0P0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, computeIpAddressAO0P0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComputeIPAddressAO0P0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputeIPAddressAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputeIPAddressAO0P0) UnmarshalBinary(b []byte) error {
	var res ComputeIPAddressAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
