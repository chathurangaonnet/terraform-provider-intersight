// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnmpTrap Snmp:Trap
//
// Complex type that models a trap message sent from an agent to the manager.
//
// swagger:model snmpTrap
type SnmpTrap struct {
	SnmpTrapAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SnmpTrap) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SnmpTrapAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SnmpTrapAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SnmpTrap) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.SnmpTrapAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this snmp trap
func (m *SnmpTrap) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SnmpTrapAO0P0
	if err := m.SnmpTrapAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SnmpTrap) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnmpTrap) UnmarshalBinary(b []byte) error {
	var res SnmpTrap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnmpTrapAO0P0 snmp trap a o0 p0
// swagger:model SnmpTrapAO0P0
type SnmpTrapAO0P0 struct {

	// Address to which the SNMP trap information is sent.
	//
	Destination string `json:"Destination,omitempty"`

	// Enables/disables the trap on the server If enabled, trap is active on the server.
	//
	Enabled *bool `json:"Enabled,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// Port used by the server to communicate with trap destination. Enter a value between 1-65535.
	//
	Port int64 `json:"Port,omitempty"`

	// Type of trap which decides whether to receive a notification when a trap is received at the destination.
	//
	// Enum: [Trap Inform]
	Type *string `json:"Type,omitempty"`

	// SNMP user for the trap. Applicable only to SNMPv3.
	//
	User string `json:"User,omitempty"`

	// SNMP version used for the trap.
	//
	// Enum: [V3 V2]
	Version *string `json:"Version,omitempty"`

	// snmp trap a o0 p0
	SnmpTrapAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *SnmpTrapAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Address to which the SNMP trap information is sent.
		//
		Destination string `json:"Destination,omitempty"`

		// Enables/disables the trap on the server If enabled, trap is active on the server.
		//
		Enabled *bool `json:"Enabled,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Port used by the server to communicate with trap destination. Enter a value between 1-65535.
		//
		Port int64 `json:"Port,omitempty"`

		// Type of trap which decides whether to receive a notification when a trap is received at the destination.
		//
		// Enum: [Trap Inform]
		Type *string `json:"Type,omitempty"`

		// SNMP user for the trap. Applicable only to SNMPv3.
		//
		User string `json:"User,omitempty"`

		// SNMP version used for the trap.
		//
		// Enum: [V3 V2]
		Version *string `json:"Version,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv SnmpTrapAO0P0

	rcv.Destination = stage1.Destination

	rcv.Enabled = stage1.Enabled

	rcv.ObjectType = stage1.ObjectType

	rcv.Port = stage1.Port

	rcv.Type = stage1.Type

	rcv.User = stage1.User

	rcv.Version = stage1.Version

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Destination")

	delete(stage2, "Enabled")

	delete(stage2, "ObjectType")

	delete(stage2, "Port")

	delete(stage2, "Type")

	delete(stage2, "User")

	delete(stage2, "Version")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.SnmpTrapAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m SnmpTrapAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Address to which the SNMP trap information is sent.
		//
		Destination string `json:"Destination,omitempty"`

		// Enables/disables the trap on the server If enabled, trap is active on the server.
		//
		Enabled *bool `json:"Enabled,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Port used by the server to communicate with trap destination. Enter a value between 1-65535.
		//
		Port int64 `json:"Port,omitempty"`

		// Type of trap which decides whether to receive a notification when a trap is received at the destination.
		//
		// Enum: [Trap Inform]
		Type *string `json:"Type,omitempty"`

		// SNMP user for the trap. Applicable only to SNMPv3.
		//
		User string `json:"User,omitempty"`

		// SNMP version used for the trap.
		//
		// Enum: [V3 V2]
		Version *string `json:"Version,omitempty"`
	}

	stage1.Destination = m.Destination

	stage1.Enabled = m.Enabled

	stage1.ObjectType = m.ObjectType

	stage1.Port = m.Port

	stage1.Type = m.Type

	stage1.User = m.User

	stage1.Version = m.Version

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.SnmpTrapAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.SnmpTrapAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this snmp trap a o0 p0
func (m *SnmpTrapAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var snmpTrapAO0P0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Trap","Inform"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snmpTrapAO0P0TypeTypePropEnum = append(snmpTrapAO0P0TypeTypePropEnum, v)
	}
}

const (

	// SnmpTrapAO0P0TypeTrap captures enum value "Trap"
	SnmpTrapAO0P0TypeTrap string = "Trap"

	// SnmpTrapAO0P0TypeInform captures enum value "Inform"
	SnmpTrapAO0P0TypeInform string = "Inform"
)

// prop value enum
func (m *SnmpTrapAO0P0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, snmpTrapAO0P0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SnmpTrapAO0P0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var snmpTrapAO0P0TypeVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["V3","V2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snmpTrapAO0P0TypeVersionPropEnum = append(snmpTrapAO0P0TypeVersionPropEnum, v)
	}
}

const (

	// SnmpTrapAO0P0VersionV3 captures enum value "V3"
	SnmpTrapAO0P0VersionV3 string = "V3"

	// SnmpTrapAO0P0VersionV2 captures enum value "V2"
	SnmpTrapAO0P0VersionV2 string = "V2"
)

// prop value enum
func (m *SnmpTrapAO0P0) validateVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, snmpTrapAO0P0TypeVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SnmpTrapAO0P0) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	// value enum
	if err := m.validateVersionEnum("Version", "body", *m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnmpTrapAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnmpTrapAO0P0) UnmarshalBinary(b []byte) error {
	var res SnmpTrapAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
