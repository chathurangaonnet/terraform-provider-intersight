// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetService Asset:Service
//
// A service that is enabled on a managed target. For example, Intersight Orchestration or Intersight Workload Optimizer.
//
// swagger:model assetService
type AssetService struct {
	MoBaseComplexType

	AssetServiceAO1P1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AssetService) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseComplexType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseComplexType = aO0

	// AO1
	var aO1 AssetServiceAO1P1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.AssetServiceAO1P1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AssetService) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseComplexType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.AssetServiceAO1P1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this asset service
func (m *AssetService) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseComplexType
	if err := m.MoBaseComplexType.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with AssetServiceAO1P1
	if err := m.AssetServiceAO1P1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *AssetService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetService) UnmarshalBinary(b []byte) error {
	var res AssetService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetServiceAO1P1 asset service a o1 p1
//
// swagger:model AssetServiceAO1P1
type AssetServiceAO1P1 struct {

	// Captures configuration that is specific to a target type for a specific service.
	Options *AssetServiceOptions `json:"Options,omitempty"`

	// Status indicates if the respective Service can establish a connection and authenticate with the managed target. Status does not include information about the functional health of the target.
	// Enum: [ Connected NotConnected ClaimInProgress Unclaimed]
	Status string `json:"Status,omitempty"`

	// When 'Status' is not Connected, statusErrorReason provides further details about why the device is not connected with Intersight.
	StatusErrorReason string `json:"StatusErrorReason,omitempty"`

	// asset service a o1 p1
	AssetServiceAO1P1 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *AssetServiceAO1P1) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Captures configuration that is specific to a target type for a specific service.
		Options *AssetServiceOptions `json:"Options,omitempty"`

		// Status indicates if the respective Service can establish a connection and authenticate with the managed target. Status does not include information about the functional health of the target.
		// Enum: [ Connected NotConnected ClaimInProgress Unclaimed]
		Status string `json:"Status,omitempty"`

		// When 'Status' is not Connected, statusErrorReason provides further details about why the device is not connected with Intersight.
		StatusErrorReason string `json:"StatusErrorReason,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv AssetServiceAO1P1

	rcv.Options = stage1.Options
	rcv.Status = stage1.Status
	rcv.StatusErrorReason = stage1.StatusErrorReason
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Options")
	delete(stage2, "Status")
	delete(stage2, "StatusErrorReason")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.AssetServiceAO1P1 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m AssetServiceAO1P1) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Captures configuration that is specific to a target type for a specific service.
		Options *AssetServiceOptions `json:"Options,omitempty"`

		// Status indicates if the respective Service can establish a connection and authenticate with the managed target. Status does not include information about the functional health of the target.
		// Enum: [ Connected NotConnected ClaimInProgress Unclaimed]
		Status string `json:"Status,omitempty"`

		// When 'Status' is not Connected, statusErrorReason provides further details about why the device is not connected with Intersight.
		StatusErrorReason string `json:"StatusErrorReason,omitempty"`
	}

	stage1.Options = m.Options
	stage1.Status = m.Status
	stage1.StatusErrorReason = m.StatusErrorReason

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.AssetServiceAO1P1) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.AssetServiceAO1P1)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this asset service a o1 p1
func (m *AssetServiceAO1P1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetServiceAO1P1) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Options")
			}
			return err
		}
	}

	return nil
}

var assetServiceAO1P1TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","Connected","NotConnected","ClaimInProgress","Unclaimed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetServiceAO1P1TypeStatusPropEnum = append(assetServiceAO1P1TypeStatusPropEnum, v)
	}
}

const (

	// AssetServiceAO1P1StatusEmpty captures enum value ""
	AssetServiceAO1P1StatusEmpty string = ""

	// AssetServiceAO1P1StatusConnected captures enum value "Connected"
	AssetServiceAO1P1StatusConnected string = "Connected"

	// AssetServiceAO1P1StatusNotConnected captures enum value "NotConnected"
	AssetServiceAO1P1StatusNotConnected string = "NotConnected"

	// AssetServiceAO1P1StatusClaimInProgress captures enum value "ClaimInProgress"
	AssetServiceAO1P1StatusClaimInProgress string = "ClaimInProgress"

	// AssetServiceAO1P1StatusUnclaimed captures enum value "Unclaimed"
	AssetServiceAO1P1StatusUnclaimed string = "Unclaimed"
)

// prop value enum
func (m *AssetServiceAO1P1) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, assetServiceAO1P1TypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AssetServiceAO1P1) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetServiceAO1P1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetServiceAO1P1) UnmarshalBinary(b []byte) error {
	var res AssetServiceAO1P1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
