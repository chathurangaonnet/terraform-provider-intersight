// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirmwareNetworkShare Firmware:Network Share
//
// Firmware upgrade where the image is located in remote shared machine.
//
// swagger:model firmwareNetworkShare
type FirmwareNetworkShare struct {
	FirmwareNetworkShareAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *FirmwareNetworkShare) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 FirmwareNetworkShareAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.FirmwareNetworkShareAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m FirmwareNetworkShare) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.FirmwareNetworkShareAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this firmware network share
func (m *FirmwareNetworkShare) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with FirmwareNetworkShareAO0P0
	if err := m.FirmwareNetworkShareAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareNetworkShare) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareNetworkShare) UnmarshalBinary(b []byte) error {
	var res FirmwareNetworkShare
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FirmwareNetworkShareAO0P0 firmware network share a o0 p0
// swagger:model FirmwareNetworkShareAO0P0
type FirmwareNetworkShareAO0P0 struct {

	// CIFS file server option for network share upgrade.
	//
	CifsServer *FirmwareCifsServer `json:"CifsServer,omitempty"`

	// HTTP (for WWW) file server option for network share upgrade.
	//
	HTTPServer *FirmwareHTTPServer `json:"HttpServer,omitempty"`

	// is password set
	IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

	// File server protocols like CIFS, NFS, WWW for HTTP (S) that hosts the image.
	//
	// Enum: [nfs cifs www]
	MapType *string `json:"MapType,omitempty"`

	// NFS file server option for network share upgrade.
	//
	NfsServer *FirmwareNfsServer `json:"NfsServer,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// Password as configured on the file server.
	//
	Password string `json:"Password,omitempty"`

	// Option to control the upgrade, e.g., 1) nw_upgrade_mount_only - mount the image from a file server and run upgrade on-next server boot 2) nw_upgrade_full - mount the image and run upgrade immediately.
	//
	// Enum: [nw_upgrade_full nw_upgrade_mount_only]
	Upgradeoption *string `json:"Upgradeoption,omitempty"`

	// Username as configured on the file server.
	//
	Username string `json:"Username,omitempty"`

	// firmware network share a o0 p0
	FirmwareNetworkShareAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *FirmwareNetworkShareAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// CIFS file server option for network share upgrade.
		//
		CifsServer *FirmwareCifsServer `json:"CifsServer,omitempty"`

		// HTTP (for WWW) file server option for network share upgrade.
		//
		HTTPServer *FirmwareHTTPServer `json:"HttpServer,omitempty"`

		// is password set
		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		// File server protocols like CIFS, NFS, WWW for HTTP (S) that hosts the image.
		//
		// Enum: [nfs cifs www]
		MapType *string `json:"MapType,omitempty"`

		// NFS file server option for network share upgrade.
		//
		NfsServer *FirmwareNfsServer `json:"NfsServer,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Password as configured on the file server.
		//
		Password string `json:"Password,omitempty"`

		// Option to control the upgrade, e.g., 1) nw_upgrade_mount_only - mount the image from a file server and run upgrade on-next server boot 2) nw_upgrade_full - mount the image and run upgrade immediately.
		//
		// Enum: [nw_upgrade_full nw_upgrade_mount_only]
		Upgradeoption *string `json:"Upgradeoption,omitempty"`

		// Username as configured on the file server.
		//
		Username string `json:"Username,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv FirmwareNetworkShareAO0P0

	rcv.CifsServer = stage1.CifsServer

	rcv.HTTPServer = stage1.HTTPServer

	rcv.IsPasswordSet = stage1.IsPasswordSet

	rcv.MapType = stage1.MapType

	rcv.NfsServer = stage1.NfsServer

	rcv.ObjectType = stage1.ObjectType

	rcv.Password = stage1.Password

	rcv.Upgradeoption = stage1.Upgradeoption

	rcv.Username = stage1.Username

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "CifsServer")

	delete(stage2, "HttpServer")

	delete(stage2, "IsPasswordSet")

	delete(stage2, "MapType")

	delete(stage2, "NfsServer")

	delete(stage2, "ObjectType")

	delete(stage2, "Password")

	delete(stage2, "Upgradeoption")

	delete(stage2, "Username")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.FirmwareNetworkShareAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m FirmwareNetworkShareAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// CIFS file server option for network share upgrade.
		//
		CifsServer *FirmwareCifsServer `json:"CifsServer,omitempty"`

		// HTTP (for WWW) file server option for network share upgrade.
		//
		HTTPServer *FirmwareHTTPServer `json:"HttpServer,omitempty"`

		// is password set
		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		// File server protocols like CIFS, NFS, WWW for HTTP (S) that hosts the image.
		//
		// Enum: [nfs cifs www]
		MapType *string `json:"MapType,omitempty"`

		// NFS file server option for network share upgrade.
		//
		NfsServer *FirmwareNfsServer `json:"NfsServer,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Password as configured on the file server.
		//
		Password string `json:"Password,omitempty"`

		// Option to control the upgrade, e.g., 1) nw_upgrade_mount_only - mount the image from a file server and run upgrade on-next server boot 2) nw_upgrade_full - mount the image and run upgrade immediately.
		//
		// Enum: [nw_upgrade_full nw_upgrade_mount_only]
		Upgradeoption *string `json:"Upgradeoption,omitempty"`

		// Username as configured on the file server.
		//
		Username string `json:"Username,omitempty"`
	}

	stage1.CifsServer = m.CifsServer

	stage1.HTTPServer = m.HTTPServer

	stage1.IsPasswordSet = m.IsPasswordSet

	stage1.MapType = m.MapType

	stage1.NfsServer = m.NfsServer

	stage1.ObjectType = m.ObjectType

	stage1.Password = m.Password

	stage1.Upgradeoption = m.Upgradeoption

	stage1.Username = m.Username

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.FirmwareNetworkShareAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.FirmwareNetworkShareAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this firmware network share a o0 p0
func (m *FirmwareNetworkShareAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCifsServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMapType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeoption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirmwareNetworkShareAO0P0) validateCifsServer(formats strfmt.Registry) error {

	if swag.IsZero(m.CifsServer) { // not required
		return nil
	}

	if m.CifsServer != nil {
		if err := m.CifsServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CifsServer")
			}
			return err
		}
	}

	return nil
}

func (m *FirmwareNetworkShareAO0P0) validateHTTPServer(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPServer) { // not required
		return nil
	}

	if m.HTTPServer != nil {
		if err := m.HTTPServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HttpServer")
			}
			return err
		}
	}

	return nil
}

var firmwareNetworkShareAO0P0TypeMapTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nfs","cifs","www"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firmwareNetworkShareAO0P0TypeMapTypePropEnum = append(firmwareNetworkShareAO0P0TypeMapTypePropEnum, v)
	}
}

const (

	// FirmwareNetworkShareAO0P0MapTypeNfs captures enum value "nfs"
	FirmwareNetworkShareAO0P0MapTypeNfs string = "nfs"

	// FirmwareNetworkShareAO0P0MapTypeCifs captures enum value "cifs"
	FirmwareNetworkShareAO0P0MapTypeCifs string = "cifs"

	// FirmwareNetworkShareAO0P0MapTypeWww captures enum value "www"
	FirmwareNetworkShareAO0P0MapTypeWww string = "www"
)

// prop value enum
func (m *FirmwareNetworkShareAO0P0) validateMapTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, firmwareNetworkShareAO0P0TypeMapTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FirmwareNetworkShareAO0P0) validateMapType(formats strfmt.Registry) error {

	if swag.IsZero(m.MapType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMapTypeEnum("MapType", "body", *m.MapType); err != nil {
		return err
	}

	return nil
}

func (m *FirmwareNetworkShareAO0P0) validateNfsServer(formats strfmt.Registry) error {

	if swag.IsZero(m.NfsServer) { // not required
		return nil
	}

	if m.NfsServer != nil {
		if err := m.NfsServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NfsServer")
			}
			return err
		}
	}

	return nil
}

var firmwareNetworkShareAO0P0TypeUpgradeoptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nw_upgrade_full","nw_upgrade_mount_only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firmwareNetworkShareAO0P0TypeUpgradeoptionPropEnum = append(firmwareNetworkShareAO0P0TypeUpgradeoptionPropEnum, v)
	}
}

const (

	// FirmwareNetworkShareAO0P0UpgradeoptionNwUpgradeFull captures enum value "nw_upgrade_full"
	FirmwareNetworkShareAO0P0UpgradeoptionNwUpgradeFull string = "nw_upgrade_full"

	// FirmwareNetworkShareAO0P0UpgradeoptionNwUpgradeMountOnly captures enum value "nw_upgrade_mount_only"
	FirmwareNetworkShareAO0P0UpgradeoptionNwUpgradeMountOnly string = "nw_upgrade_mount_only"
)

// prop value enum
func (m *FirmwareNetworkShareAO0P0) validateUpgradeoptionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, firmwareNetworkShareAO0P0TypeUpgradeoptionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FirmwareNetworkShareAO0P0) validateUpgradeoption(formats strfmt.Registry) error {

	if swag.IsZero(m.Upgradeoption) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpgradeoptionEnum("Upgradeoption", "body", *m.Upgradeoption); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareNetworkShareAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareNetworkShareAO0P0) UnmarshalBinary(b []byte) error {
	var res FirmwareNetworkShareAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
