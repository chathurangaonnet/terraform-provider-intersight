// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageInitiator Storage:Initiator
//
// An initiator is the consumer of storage, typically a server with an adapter card in it called a Host Bus Adapter (HBA). The initiator "initiates" a connection over the fabric to one or more ports on storage system target ports.
//
// swagger:model storageInitiator
type StorageInitiator struct {
	StorageInitiatorAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageInitiator) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StorageInitiatorAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.StorageInitiatorAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageInitiator) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.StorageInitiatorAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage initiator
func (m *StorageInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StorageInitiatorAO0P0
	if err := m.StorageInitiatorAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *StorageInitiator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageInitiator) UnmarshalBinary(b []byte) error {
	var res StorageInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageInitiatorAO0P0 storage initiator a o0 p0
// swagger:model StorageInitiatorAO0P0
type StorageInitiatorAO0P0 struct {

	// IQN (iSCSI qualified name). Can be up to 255 characters long and has the following format, iqn.yyyy-mm.naming-authority:unique name.
	//
	// Read Only: true
	Iqn string `json:"Iqn,omitempty"`

	// Name of the initiator represented in storage array.
	//
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// Initiator type, it can be FC or iSCSI.
	//
	// Read Only: true
	// Enum: [FC iSCSI]
	Type string `json:"Type,omitempty"`

	// World wide name, 128 bit address represented in hexa decimal notation. (51:4f:0c:50:14:1f:af:01:51:4f:0c:51:14:1f:af:01).
	//
	// Read Only: true
	Wwn string `json:"Wwn,omitempty"`

	// storage initiator a o0 p0
	StorageInitiatorAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *StorageInitiatorAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// IQN (iSCSI qualified name). Can be up to 255 characters long and has the following format, iqn.yyyy-mm.naming-authority:unique name.
		//
		// Read Only: true
		Iqn string `json:"Iqn,omitempty"`

		// Name of the initiator represented in storage array.
		//
		// Read Only: true
		Name string `json:"Name,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Initiator type, it can be FC or iSCSI.
		//
		// Read Only: true
		// Enum: [FC iSCSI]
		Type string `json:"Type,omitempty"`

		// World wide name, 128 bit address represented in hexa decimal notation. (51:4f:0c:50:14:1f:af:01:51:4f:0c:51:14:1f:af:01).
		//
		// Read Only: true
		Wwn string `json:"Wwn,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv StorageInitiatorAO0P0

	rcv.Iqn = stage1.Iqn

	rcv.Name = stage1.Name

	rcv.ObjectType = stage1.ObjectType

	rcv.Type = stage1.Type

	rcv.Wwn = stage1.Wwn

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Iqn")

	delete(stage2, "Name")

	delete(stage2, "ObjectType")

	delete(stage2, "Type")

	delete(stage2, "Wwn")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.StorageInitiatorAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m StorageInitiatorAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// IQN (iSCSI qualified name). Can be up to 255 characters long and has the following format, iqn.yyyy-mm.naming-authority:unique name.
		//
		// Read Only: true
		Iqn string `json:"Iqn,omitempty"`

		// Name of the initiator represented in storage array.
		//
		// Read Only: true
		Name string `json:"Name,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// Initiator type, it can be FC or iSCSI.
		//
		// Read Only: true
		// Enum: [FC iSCSI]
		Type string `json:"Type,omitempty"`

		// World wide name, 128 bit address represented in hexa decimal notation. (51:4f:0c:50:14:1f:af:01:51:4f:0c:51:14:1f:af:01).
		//
		// Read Only: true
		Wwn string `json:"Wwn,omitempty"`
	}

	stage1.Iqn = m.Iqn

	stage1.Name = m.Name

	stage1.ObjectType = m.ObjectType

	stage1.Type = m.Type

	stage1.Wwn = m.Wwn

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.StorageInitiatorAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.StorageInitiatorAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this storage initiator a o0 p0
func (m *StorageInitiatorAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageInitiatorAO0P0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FC","iSCSI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageInitiatorAO0P0TypeTypePropEnum = append(storageInitiatorAO0P0TypeTypePropEnum, v)
	}
}

const (

	// StorageInitiatorAO0P0TypeFC captures enum value "FC"
	StorageInitiatorAO0P0TypeFC string = "FC"

	// StorageInitiatorAO0P0TypeISCSI captures enum value "iSCSI"
	StorageInitiatorAO0P0TypeISCSI string = "iSCSI"
)

// prop value enum
func (m *StorageInitiatorAO0P0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageInitiatorAO0P0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageInitiatorAO0P0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageInitiatorAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageInitiatorAO0P0) UnmarshalBinary(b []byte) error {
	var res StorageInitiatorAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
