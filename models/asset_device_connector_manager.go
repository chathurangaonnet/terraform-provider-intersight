// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AssetDeviceConnectorManager Device Connector Manager
//
// Maintains the Device Connector Manager, other attributes and its Managed Device Status information.
//
// swagger:model assetDeviceConnectorManager
type AssetDeviceConnectorManager struct {
	MoBaseMo

	// The hostname of the Device Connector Manager. This will match the deviceHostname in the asset DeviceRegistration.
	//
	// Read Only: true
	DeviceHostname []string `json:"DeviceHostname"`

	// Identifiers for the Managed Devices managed by this Device Connector Manager.
	//
	// Read Only: true
	ManagedDevices []*AssetManagedDeviceRef `json:"ManagedDevices"`

	// Registered Device Connector Manager within asset Device Registration.
	//
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// Version of the Device Connector Manager. Version format is same as that of Equinox Device Connector.
	//
	// Read Only: true
	Version string `json:"Version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AssetDeviceConnectorManager) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		DeviceHostname []string `json:"DeviceHostname"`

		ManagedDevices []*AssetManagedDeviceRef `json:"ManagedDevices"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Version string `json:"Version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.DeviceHostname = dataAO1.DeviceHostname

	m.ManagedDevices = dataAO1.ManagedDevices

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.Version = dataAO1.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AssetDeviceConnectorManager) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		DeviceHostname []string `json:"DeviceHostname"`

		ManagedDevices []*AssetManagedDeviceRef `json:"ManagedDevices"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		Version string `json:"Version,omitempty"`
	}

	dataAO1.DeviceHostname = m.DeviceHostname

	dataAO1.ManagedDevices = m.ManagedDevices

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this asset device connector manager
func (m *AssetDeviceConnectorManager) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagedDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetDeviceConnectorManager) validateManagedDevices(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagedDevices) { // not required
		return nil
	}

	for i := 0; i < len(m.ManagedDevices); i++ {
		if swag.IsZero(m.ManagedDevices[i]) { // not required
			continue
		}

		if m.ManagedDevices[i] != nil {
			if err := m.ManagedDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ManagedDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssetDeviceConnectorManager) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetDeviceConnectorManager) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetDeviceConnectorManager) UnmarshalBinary(b []byte) error {
	var res AssetDeviceConnectorManager
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
