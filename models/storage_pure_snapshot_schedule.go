// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StoragePureSnapshotSchedule Storage:Pure Snapshot Schedule
//
// PureStorage FlashArray snapshot schedule configuration entity.
//
// swagger:model storagePureSnapshotSchedule
type StoragePureSnapshotSchedule struct {
	StorageBaseSnapshotSchedule

	// Storage array managed object.
	// Read Only: true
	Array *StoragePureArrayRef `json:"Array,omitempty"`

	// Total number of snapshots per day to be available on source above and over the specified retention time. PureStorage FlashArray maintains all created snapshot until retention period. Daily limit is applied only on the snapshots once retention time is expired. In case of, daily limit is less than the number of snapshot available on source, system select snapshots evenly spaced out throughout the day.
	// Read Only: true
	DailyLimit int64 `json:"DailyLimit,omitempty"`

	// Protection group relationship object.
	// Read Only: true
	ProtectionGroup *StoragePureProtectionGroupRef `json:"ProtectionGroup,omitempty"`

	// Device registration managed object that represents this storage array connection to Intersight.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// Duration to keep the daily limit snapshots on source array. StorageArray deletes the snapshots permanently from source beyond this period.
	// Read Only: true
	SnapshotExpiryTime string `json:"SnapshotExpiryTime,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StoragePureSnapshotSchedule) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StorageBaseSnapshotSchedule
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.StorageBaseSnapshotSchedule = aO0

	// AO1
	var dataAO1 struct {
		Array *StoragePureArrayRef `json:"Array,omitempty"`

		DailyLimit int64 `json:"DailyLimit,omitempty"`

		ProtectionGroup *StoragePureProtectionGroupRef `json:"ProtectionGroup,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SnapshotExpiryTime string `json:"SnapshotExpiryTime,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Array = dataAO1.Array

	m.DailyLimit = dataAO1.DailyLimit

	m.ProtectionGroup = dataAO1.ProtectionGroup

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.SnapshotExpiryTime = dataAO1.SnapshotExpiryTime

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StoragePureSnapshotSchedule) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.StorageBaseSnapshotSchedule)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Array *StoragePureArrayRef `json:"Array,omitempty"`

		DailyLimit int64 `json:"DailyLimit,omitempty"`

		ProtectionGroup *StoragePureProtectionGroupRef `json:"ProtectionGroup,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SnapshotExpiryTime string `json:"SnapshotExpiryTime,omitempty"`
	}

	dataAO1.Array = m.Array

	dataAO1.DailyLimit = m.DailyLimit

	dataAO1.ProtectionGroup = m.ProtectionGroup

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.SnapshotExpiryTime = m.SnapshotExpiryTime

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage pure snapshot schedule
func (m *StoragePureSnapshotSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StorageBaseSnapshotSchedule
	if err := m.StorageBaseSnapshotSchedule.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArray(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePureSnapshotSchedule) validateArray(formats strfmt.Registry) error {

	if swag.IsZero(m.Array) { // not required
		return nil
	}

	if m.Array != nil {
		if err := m.Array.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Array")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePureSnapshotSchedule) validateProtectionGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ProtectionGroup) { // not required
		return nil
	}

	if m.ProtectionGroup != nil {
		if err := m.ProtectionGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProtectionGroup")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePureSnapshotSchedule) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePureSnapshotSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePureSnapshotSchedule) UnmarshalBinary(b []byte) error {
	var res StoragePureSnapshotSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
