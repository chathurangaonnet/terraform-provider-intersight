// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetTarget Asset:Target
//
// Target represents an entity which can be managed by Intersight. This includes physical entities like UCS and HyperFlex servers and software entities like VMware vCenter and Microsoft Azure cloud accounts.
//
// swagger:model assetTarget
type AssetTarget struct {
	MoBaseMo

	// The account which owns the managed target.
	Account *IamAccountRef `json:"Account,omitempty"`

	// The Intersight Assist which facilitates management of the target, if applicable. Some targets like UCS servers are managed via embedded Intersight Device Connectors, while other targets like Microsoft Azure cloud accounts are managed directly from Intersight without the need for additional components to be installed on a customers premise. If there is a single Intersight Assist registered in a customer's Intersight account, Intersight will automatically set the 'Assist' relationship if one is required based on the 'TargetType' of the managed target.
	Assist *AssetDeviceRegistrationRef `json:"Assist,omitempty"`

	// A list of methods for connecting to the managed target.
	Connections []*AssetConnection `json:"Connections"`

	// A list of services which are enabled for the managed target.
	Services []*AssetService `json:"Services"`

	// Status indicates if Intersight can establish a connection and authenticate with the managed target. Status does not include information about the functional health of the target.
	// Read Only: true
	// Enum: [ Connected NotConnected ClaimInProgress Unclaimed]
	Status string `json:"Status,omitempty"`

	// StatusErrorReason provides additional context for the Status.
	// Read Only: true
	StatusErrorReason string `json:"StatusErrorReason,omitempty"`

	// The type of the managed target. For example a UCS Server or Vmware Vcenter target.
	// Enum: [ APIC DCNM UCSFI UCSFIISM IMC IMCM4 IMCM5 UCSIOM HX HyperFlexAP UCSD IntersightAppliance PureStorageFlashArray NetAppOntap EmcScaleIo EmcVmax EmcVplex EmcXtremIo VmwareVcenter MicrosoftHyperV AppDynamics Dynatrace MicrosoftSqlServer Kubernetes MicrosoftAzure ServiceEngine IMCBlade]
	TargetType string `json:"TargetType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AssetTarget) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Assist *AssetDeviceRegistrationRef `json:"Assist,omitempty"`

		Connections []*AssetConnection `json:"Connections"`

		Services []*AssetService `json:"Services"`

		Status string `json:"Status,omitempty"`

		StatusErrorReason string `json:"StatusErrorReason,omitempty"`

		TargetType string `json:"TargetType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Account = dataAO1.Account

	m.Assist = dataAO1.Assist

	m.Connections = dataAO1.Connections

	m.Services = dataAO1.Services

	m.Status = dataAO1.Status

	m.StatusErrorReason = dataAO1.StatusErrorReason

	m.TargetType = dataAO1.TargetType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AssetTarget) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Account *IamAccountRef `json:"Account,omitempty"`

		Assist *AssetDeviceRegistrationRef `json:"Assist,omitempty"`

		Connections []*AssetConnection `json:"Connections"`

		Services []*AssetService `json:"Services"`

		Status string `json:"Status,omitempty"`

		StatusErrorReason string `json:"StatusErrorReason,omitempty"`

		TargetType string `json:"TargetType,omitempty"`
	}

	dataAO1.Account = m.Account

	dataAO1.Assist = m.Assist

	dataAO1.Connections = m.Connections

	dataAO1.Services = m.Services

	dataAO1.Status = m.Status

	dataAO1.StatusErrorReason = m.StatusErrorReason

	dataAO1.TargetType = m.TargetType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this asset target
func (m *AssetTarget) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetTarget) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Account")
			}
			return err
		}
	}

	return nil
}

func (m *AssetTarget) validateAssist(formats strfmt.Registry) error {

	if swag.IsZero(m.Assist) { // not required
		return nil
	}

	if m.Assist != nil {
		if err := m.Assist.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Assist")
			}
			return err
		}
	}

	return nil
}

func (m *AssetTarget) validateConnections(formats strfmt.Registry) error {

	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	for i := 0; i < len(m.Connections); i++ {
		if swag.IsZero(m.Connections[i]) { // not required
			continue
		}

		if m.Connections[i] != nil {
			if err := m.Connections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssetTarget) validateServices(formats strfmt.Registry) error {

	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var assetTargetTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","Connected","NotConnected","ClaimInProgress","Unclaimed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetTargetTypeStatusPropEnum = append(assetTargetTypeStatusPropEnum, v)
	}
}

// property enum
func (m *AssetTarget) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, assetTargetTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AssetTarget) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var assetTargetTypeTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","APIC","DCNM","UCSFI","UCSFIISM","IMC","IMCM4","IMCM5","UCSIOM","HX","HyperFlexAP","UCSD","IntersightAppliance","PureStorageFlashArray","NetAppOntap","EmcScaleIo","EmcVmax","EmcVplex","EmcXtremIo","VmwareVcenter","MicrosoftHyperV","AppDynamics","Dynatrace","MicrosoftSqlServer","Kubernetes","MicrosoftAzure","ServiceEngine","IMCBlade"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetTargetTypeTargetTypePropEnum = append(assetTargetTypeTargetTypePropEnum, v)
	}
}

// property enum
func (m *AssetTarget) validateTargetTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, assetTargetTypeTargetTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AssetTarget) validateTargetType(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTargetTypeEnum("TargetType", "body", m.TargetType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetTarget) UnmarshalBinary(b []byte) error {
	var res AssetTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
