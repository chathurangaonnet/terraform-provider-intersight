// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ConnectorAuthMessage Connector:Auth Message
//
// A base abstract message for connector messages that require authentication to be passed from the Intersight services.
//
// swagger:model connectorAuthMessage
type ConnectorAuthMessage struct {
	ConnectorBaseMessage

	// The platform locale to assign user. A locale defines one or more organizations (domains) the user is allowed access, and access is limited to the organizations specified in the locale.
	//
	RemoteUserLocale string `json:"RemoteUserLocale,omitempty"`

	// The user name passed to the platform for use in platform audit logs.
	//
	RemoteUserName string `json:"RemoteUserName,omitempty"`

	// The list of roles to pass to the platform to validate the action against.
	//
	RemoteUserRoles string `json:"RemoteUserRoles,omitempty"`

	// The session Id passed to the platform for use in platforms auditing.
	//
	RemoteUserSessionID string `json:"RemoteUserSessionId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ConnectorAuthMessage) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ConnectorBaseMessage
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ConnectorBaseMessage = aO0

	// AO1
	var dataAO1 struct {
		RemoteUserLocale string `json:"RemoteUserLocale,omitempty"`

		RemoteUserName string `json:"RemoteUserName,omitempty"`

		RemoteUserRoles string `json:"RemoteUserRoles,omitempty"`

		RemoteUserSessionID string `json:"RemoteUserSessionId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.RemoteUserLocale = dataAO1.RemoteUserLocale

	m.RemoteUserName = dataAO1.RemoteUserName

	m.RemoteUserRoles = dataAO1.RemoteUserRoles

	m.RemoteUserSessionID = dataAO1.RemoteUserSessionID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ConnectorAuthMessage) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ConnectorBaseMessage)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		RemoteUserLocale string `json:"RemoteUserLocale,omitempty"`

		RemoteUserName string `json:"RemoteUserName,omitempty"`

		RemoteUserRoles string `json:"RemoteUserRoles,omitempty"`

		RemoteUserSessionID string `json:"RemoteUserSessionId,omitempty"`
	}

	dataAO1.RemoteUserLocale = m.RemoteUserLocale

	dataAO1.RemoteUserName = m.RemoteUserName

	dataAO1.RemoteUserRoles = m.RemoteUserRoles

	dataAO1.RemoteUserSessionID = m.RemoteUserSessionID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this connector auth message
func (m *ConnectorAuthMessage) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ConnectorBaseMessage
	if err := m.ConnectorBaseMessage.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ConnectorAuthMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectorAuthMessage) UnmarshalBinary(b []byte) error {
	var res ConnectorAuthMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
