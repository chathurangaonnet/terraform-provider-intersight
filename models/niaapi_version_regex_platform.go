// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NiaapiVersionRegexPlatform Niaapi:Version Regex Platform
//
// The regular expression to parse the software version strings for specific platform.
//
// swagger:model niaapiVersionRegexPlatform
type NiaapiVersionRegexPlatform struct {
	NiaapiVersionRegexPlatformAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NiaapiVersionRegexPlatform) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 NiaapiVersionRegexPlatformAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.NiaapiVersionRegexPlatformAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NiaapiVersionRegexPlatform) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.NiaapiVersionRegexPlatformAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this niaapi version regex platform
func (m *NiaapiVersionRegexPlatform) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with NiaapiVersionRegexPlatformAO0P0
	if err := m.NiaapiVersionRegexPlatformAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *NiaapiVersionRegexPlatform) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NiaapiVersionRegexPlatform) UnmarshalBinary(b []byte) error {
	var res NiaapiVersionRegexPlatform
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NiaapiVersionRegexPlatformAO0P0 niaapi version regex platform a o0 p0
// swagger:model NiaapiVersionRegexPlatformAO0P0
type NiaapiVersionRegexPlatformAO0P0 struct {

	// All long live version Regex pattern.
	//
	Anyllregex string `json:"Anyllregex,omitempty"`

	// Current long live version Regex pattern.
	//
	Currentlltrain *NiaapiSoftwareRegex `json:"Currentlltrain,omitempty"`

	// Latest short live version Regex pattern.
	//
	Latestsltrain *NiaapiSoftwareRegex `json:"Latestsltrain,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// List of short lived verison and Regex pattern.
	//
	Sltrain []*NiaapiSoftwareRegex `json:"Sltrain"`

	// Upcoming short live version Regex pattern.
	//
	Upcominglltrain *NiaapiSoftwareRegex `json:"Upcominglltrain,omitempty"`

	// niaapi version regex platform a o0 p0
	NiaapiVersionRegexPlatformAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *NiaapiVersionRegexPlatformAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// All long live version Regex pattern.
		//
		Anyllregex string `json:"Anyllregex,omitempty"`

		// Current long live version Regex pattern.
		//
		Currentlltrain *NiaapiSoftwareRegex `json:"Currentlltrain,omitempty"`

		// Latest short live version Regex pattern.
		//
		Latestsltrain *NiaapiSoftwareRegex `json:"Latestsltrain,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// List of short lived verison and Regex pattern.
		//
		Sltrain []*NiaapiSoftwareRegex `json:"Sltrain"`

		// Upcoming short live version Regex pattern.
		//
		Upcominglltrain *NiaapiSoftwareRegex `json:"Upcominglltrain,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv NiaapiVersionRegexPlatformAO0P0

	rcv.Anyllregex = stage1.Anyllregex

	rcv.Currentlltrain = stage1.Currentlltrain

	rcv.Latestsltrain = stage1.Latestsltrain

	rcv.ObjectType = stage1.ObjectType

	rcv.Sltrain = stage1.Sltrain

	rcv.Upcominglltrain = stage1.Upcominglltrain

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "Anyllregex")

	delete(stage2, "Currentlltrain")

	delete(stage2, "Latestsltrain")

	delete(stage2, "ObjectType")

	delete(stage2, "Sltrain")

	delete(stage2, "Upcominglltrain")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.NiaapiVersionRegexPlatformAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m NiaapiVersionRegexPlatformAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// All long live version Regex pattern.
		//
		Anyllregex string `json:"Anyllregex,omitempty"`

		// Current long live version Regex pattern.
		//
		Currentlltrain *NiaapiSoftwareRegex `json:"Currentlltrain,omitempty"`

		// Latest short live version Regex pattern.
		//
		Latestsltrain *NiaapiSoftwareRegex `json:"Latestsltrain,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`

		// List of short lived verison and Regex pattern.
		//
		Sltrain []*NiaapiSoftwareRegex `json:"Sltrain"`

		// Upcoming short live version Regex pattern.
		//
		Upcominglltrain *NiaapiSoftwareRegex `json:"Upcominglltrain,omitempty"`
	}

	stage1.Anyllregex = m.Anyllregex

	stage1.Currentlltrain = m.Currentlltrain

	stage1.Latestsltrain = m.Latestsltrain

	stage1.ObjectType = m.ObjectType

	stage1.Sltrain = m.Sltrain

	stage1.Upcominglltrain = m.Upcominglltrain

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.NiaapiVersionRegexPlatformAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.NiaapiVersionRegexPlatformAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this niaapi version regex platform a o0 p0
func (m *NiaapiVersionRegexPlatformAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentlltrain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestsltrain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSltrain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpcominglltrain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NiaapiVersionRegexPlatformAO0P0) validateCurrentlltrain(formats strfmt.Registry) error {

	if swag.IsZero(m.Currentlltrain) { // not required
		return nil
	}

	if m.Currentlltrain != nil {
		if err := m.Currentlltrain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Currentlltrain")
			}
			return err
		}
	}

	return nil
}

func (m *NiaapiVersionRegexPlatformAO0P0) validateLatestsltrain(formats strfmt.Registry) error {

	if swag.IsZero(m.Latestsltrain) { // not required
		return nil
	}

	if m.Latestsltrain != nil {
		if err := m.Latestsltrain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Latestsltrain")
			}
			return err
		}
	}

	return nil
}

func (m *NiaapiVersionRegexPlatformAO0P0) validateSltrain(formats strfmt.Registry) error {

	if swag.IsZero(m.Sltrain) { // not required
		return nil
	}

	for i := 0; i < len(m.Sltrain); i++ {
		if swag.IsZero(m.Sltrain[i]) { // not required
			continue
		}

		if m.Sltrain[i] != nil {
			if err := m.Sltrain[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Sltrain" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NiaapiVersionRegexPlatformAO0P0) validateUpcominglltrain(formats strfmt.Registry) error {

	if swag.IsZero(m.Upcominglltrain) { // not required
		return nil
	}

	if m.Upcominglltrain != nil {
		if err := m.Upcominglltrain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Upcominglltrain")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NiaapiVersionRegexPlatformAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NiaapiVersionRegexPlatformAO0P0) UnmarshalBinary(b []byte) error {
	var res NiaapiVersionRegexPlatformAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
