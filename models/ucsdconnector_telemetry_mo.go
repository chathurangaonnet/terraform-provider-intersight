// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// UcsdconnectorTelemetryMo Ucsdconnector:Telemetry Mo
//
// It represents MO name, Field names and corresponding queries.
//
// swagger:model ucsdconnectorTelemetryMo
type UcsdconnectorTelemetryMo struct {
	UcsdconnectorTelemetryMoAO0P0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *UcsdconnectorTelemetryMo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 UcsdconnectorTelemetryMoAO0P0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.UcsdconnectorTelemetryMoAO0P0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m UcsdconnectorTelemetryMo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.UcsdconnectorTelemetryMoAO0P0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this ucsdconnector telemetry mo
func (m *UcsdconnectorTelemetryMo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with UcsdconnectorTelemetryMoAO0P0
	if err := m.UcsdconnectorTelemetryMoAO0P0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *UcsdconnectorTelemetryMo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UcsdconnectorTelemetryMo) UnmarshalBinary(b []byte) error {
	var res UcsdconnectorTelemetryMo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UcsdconnectorTelemetryMoAO0P0 ucsdconnector telemetry mo a o0 p0
// swagger:model UcsdconnectorTelemetryMoAO0P0
type UcsdconnectorTelemetryMoAO0P0 struct {

	// Its a collection of FieldQuery objects.
	//
	FieldQueries []*UcsdconnectorFieldQuery `json:"FieldQueries"`

	// MoName corresponds to Fanwood telemetry MO.
	//
	MoName string `json:"MoName,omitempty"`

	// It contains a single SQL Query that collects all the properties of a Mo.
	//
	ObjectQuery *UcsdconnectorSQLQuery `json:"ObjectQuery,omitempty"`

	// The concrete type of this complex type.
	//
	// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
	// ObjectType is optional.
	// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
	// are heterogeneous, i.e. the array can contain nested documents of different types.
	//
	//
	ObjectType string `json:"ObjectType,omitempty"`

	// ucsdconnector telemetry mo a o0 p0
	UcsdconnectorTelemetryMoAO0P0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *UcsdconnectorTelemetryMoAO0P0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Its a collection of FieldQuery objects.
		//
		FieldQueries []*UcsdconnectorFieldQuery `json:"FieldQueries"`

		// MoName corresponds to Fanwood telemetry MO.
		//
		MoName string `json:"MoName,omitempty"`

		// It contains a single SQL Query that collects all the properties of a Mo.
		//
		ObjectQuery *UcsdconnectorSQLQuery `json:"ObjectQuery,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv UcsdconnectorTelemetryMoAO0P0

	rcv.FieldQueries = stage1.FieldQueries

	rcv.MoName = stage1.MoName

	rcv.ObjectQuery = stage1.ObjectQuery

	rcv.ObjectType = stage1.ObjectType

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "FieldQueries")

	delete(stage2, "MoName")

	delete(stage2, "ObjectQuery")

	delete(stage2, "ObjectType")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.UcsdconnectorTelemetryMoAO0P0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m UcsdconnectorTelemetryMoAO0P0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Its a collection of FieldQuery objects.
		//
		FieldQueries []*UcsdconnectorFieldQuery `json:"FieldQueries"`

		// MoName corresponds to Fanwood telemetry MO.
		//
		MoName string `json:"MoName,omitempty"`

		// It contains a single SQL Query that collects all the properties of a Mo.
		//
		ObjectQuery *UcsdconnectorSQLQuery `json:"ObjectQuery,omitempty"`

		// The concrete type of this complex type.
		//
		// The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the
		// ObjectType is optional.
		// The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array
		// are heterogeneous, i.e. the array can contain nested documents of different types.
		//
		//
		ObjectType string `json:"ObjectType,omitempty"`
	}

	stage1.FieldQueries = m.FieldQueries

	stage1.MoName = m.MoName

	stage1.ObjectQuery = m.ObjectQuery

	stage1.ObjectType = m.ObjectType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.UcsdconnectorTelemetryMoAO0P0) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.UcsdconnectorTelemetryMoAO0P0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this ucsdconnector telemetry mo a o0 p0
func (m *UcsdconnectorTelemetryMoAO0P0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFieldQueries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UcsdconnectorTelemetryMoAO0P0) validateFieldQueries(formats strfmt.Registry) error {

	if swag.IsZero(m.FieldQueries) { // not required
		return nil
	}

	for i := 0; i < len(m.FieldQueries); i++ {
		if swag.IsZero(m.FieldQueries[i]) { // not required
			continue
		}

		if m.FieldQueries[i] != nil {
			if err := m.FieldQueries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FieldQueries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UcsdconnectorTelemetryMoAO0P0) validateObjectQuery(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectQuery) { // not required
		return nil
	}

	if m.ObjectQuery != nil {
		if err := m.ObjectQuery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ObjectQuery")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UcsdconnectorTelemetryMoAO0P0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UcsdconnectorTelemetryMoAO0P0) UnmarshalBinary(b []byte) error {
	var res UcsdconnectorTelemetryMoAO0P0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
