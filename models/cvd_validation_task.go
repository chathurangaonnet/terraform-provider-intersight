// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CvdValidationTask Cvd:Validation Task
//
// Represents an instance of a validation task for a eCVD
//
// swagger:model cvdValidationTask
type CvdValidationTask struct {
	MoBaseMo

	// Input data set to be provided to the validation workflow
	//
	InputData interface{} `json:"InputData,omitempty"`

	// Relationship to the Organization that owns the Managed Object.
	//
	Organization *IamAccountRef `json:"Organization,omitempty"`

	// Result of the validation operation
	//
	// Read Only: true
	Result interface{} `json:"Result,omitempty"`

	// eCVD instance for which the validation task is being run
	//
	Template *CvdTemplateRef `json:"Template,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CvdValidationTask) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		InputData interface{} `json:"InputData,omitempty"`

		Organization *IamAccountRef `json:"Organization,omitempty"`

		Result interface{} `json:"Result,omitempty"`

		Template *CvdTemplateRef `json:"Template,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.InputData = dataAO1.InputData

	m.Organization = dataAO1.Organization

	m.Result = dataAO1.Result

	m.Template = dataAO1.Template

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CvdValidationTask) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		InputData interface{} `json:"InputData,omitempty"`

		Organization *IamAccountRef `json:"Organization,omitempty"`

		Result interface{} `json:"Result,omitempty"`

		Template *CvdTemplateRef `json:"Template,omitempty"`
	}

	dataAO1.InputData = m.InputData

	dataAO1.Organization = m.Organization

	dataAO1.Result = m.Result

	dataAO1.Template = m.Template

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this cvd validation task
func (m *CvdValidationTask) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CvdValidationTask) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *CvdValidationTask) validateTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CvdValidationTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CvdValidationTask) UnmarshalBinary(b []byte) error {
	var res CvdValidationTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
