// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectorpackConnectorPackUpgrade Connectorpack:Connector Pack Upgrade
//
// Used to download or install connector packs on the target device.
//
// swagger:model connectorpackConnectorPackUpgrade
type ConnectorpackConnectorPackUpgrade struct {
	MoBaseMo

	// The type of operation to be performed on UCS Director.
	// Enum: [Install Push]
	ConnectorPackOpType *string `json:"ConnectorPackOpType,omitempty"`

	// UCS Director to/on which connector packs are to pushed/installed.
	UcsdInfo *IaasUcsdInfoRef `json:"UcsdInfo,omitempty"`

	// The run time instance of the workflow for this upgrade operation.
	// Read Only: true
	Workflow *WorkflowWorkflowInfoRef `json:"Workflow,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ConnectorpackConnectorPackUpgrade) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		ConnectorPackOpType *string `json:"ConnectorPackOpType,omitempty"`

		UcsdInfo *IaasUcsdInfoRef `json:"UcsdInfo,omitempty"`

		Workflow *WorkflowWorkflowInfoRef `json:"Workflow,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ConnectorPackOpType = dataAO1.ConnectorPackOpType

	m.UcsdInfo = dataAO1.UcsdInfo

	m.Workflow = dataAO1.Workflow

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ConnectorpackConnectorPackUpgrade) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ConnectorPackOpType *string `json:"ConnectorPackOpType,omitempty"`

		UcsdInfo *IaasUcsdInfoRef `json:"UcsdInfo,omitempty"`

		Workflow *WorkflowWorkflowInfoRef `json:"Workflow,omitempty"`
	}

	dataAO1.ConnectorPackOpType = m.ConnectorPackOpType

	dataAO1.UcsdInfo = m.UcsdInfo

	dataAO1.Workflow = m.Workflow

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this connectorpack connector pack upgrade
func (m *ConnectorpackConnectorPackUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectorPackOpType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUcsdInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var connectorpackConnectorPackUpgradeTypeConnectorPackOpTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Install","Push"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		connectorpackConnectorPackUpgradeTypeConnectorPackOpTypePropEnum = append(connectorpackConnectorPackUpgradeTypeConnectorPackOpTypePropEnum, v)
	}
}

// property enum
func (m *ConnectorpackConnectorPackUpgrade) validateConnectorPackOpTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, connectorpackConnectorPackUpgradeTypeConnectorPackOpTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConnectorpackConnectorPackUpgrade) validateConnectorPackOpType(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectorPackOpType) { // not required
		return nil
	}

	// value enum
	if err := m.validateConnectorPackOpTypeEnum("ConnectorPackOpType", "body", *m.ConnectorPackOpType); err != nil {
		return err
	}

	return nil
}

func (m *ConnectorpackConnectorPackUpgrade) validateUcsdInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.UcsdInfo) { // not required
		return nil
	}

	if m.UcsdInfo != nil {
		if err := m.UcsdInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UcsdInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ConnectorpackConnectorPackUpgrade) validateWorkflow(formats strfmt.Registry) error {

	if swag.IsZero(m.Workflow) { // not required
		return nil
	}

	if m.Workflow != nil {
		if err := m.Workflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Workflow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectorpackConnectorPackUpgrade) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectorpackConnectorPackUpgrade) UnmarshalBinary(b []byte) error {
	var res ConnectorpackConnectorPackUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
