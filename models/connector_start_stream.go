// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ConnectorStartStream Connector:Start Stream
//
// Start a stream. Cloud services sends the configuration for a stream to be opened within this message. If there already exists a stream with the given ID the connector will return its current sequence number, or if the cloud requests the stream can be rebuilt from scratch.
//
// swagger:model connectorStartStream
type ConnectorStartStream struct {
	ConnectorStreamMessage

	// The number of outputs from a plugin to collect into a single message. Applicable only to streams that involve polling plugins and plugins which support emitting batchable data. Default value of zero indicates no batching.
	//
	BatchSize int64 `json:"BatchSize,omitempty"`

	// Flag to force a rebuild of an existing stream. To be used if a stream is unable to recover itself in response to dropped messages.
	//
	ForceRebuild *bool `json:"ForceRebuild,omitempty"`

	// Input to the plugin to start the start the stream or collect stream messages.
	//
	// Format: binary
	Input io.ReadCloser `json:"Input,omitempty"`

	// The plugin to run the stream on.
	//
	PluginName string `json:"PluginName,omitempty"`

	// The desired interval to emit messages from this stream. The stream plugin will poll plugins at this interval to create a stream event.
	//
	PollInterval int64 `json:"PollInterval,omitempty"`

	// The priority level to apply to messages emitted by this stream.
	//
	Priority int64 `json:"Priority,omitempty"`

	// The topic for the device connector to publish messages to.
	//
	ResponseTopic string `json:"ResponseTopic,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ConnectorStartStream) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ConnectorStreamMessage
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ConnectorStreamMessage = aO0

	// AO1
	var dataAO1 struct {
		BatchSize int64 `json:"BatchSize,omitempty"`

		ForceRebuild *bool `json:"ForceRebuild,omitempty"`

		Input io.ReadCloser `json:"Input,omitempty"`

		PluginName string `json:"PluginName,omitempty"`

		PollInterval int64 `json:"PollInterval,omitempty"`

		Priority int64 `json:"Priority,omitempty"`

		ResponseTopic string `json:"ResponseTopic,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.BatchSize = dataAO1.BatchSize

	m.ForceRebuild = dataAO1.ForceRebuild

	m.Input = dataAO1.Input

	m.PluginName = dataAO1.PluginName

	m.PollInterval = dataAO1.PollInterval

	m.Priority = dataAO1.Priority

	m.ResponseTopic = dataAO1.ResponseTopic

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ConnectorStartStream) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ConnectorStreamMessage)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		BatchSize int64 `json:"BatchSize,omitempty"`

		ForceRebuild *bool `json:"ForceRebuild,omitempty"`

		Input io.ReadCloser `json:"Input,omitempty"`

		PluginName string `json:"PluginName,omitempty"`

		PollInterval int64 `json:"PollInterval,omitempty"`

		Priority int64 `json:"Priority,omitempty"`

		ResponseTopic string `json:"ResponseTopic,omitempty"`
	}

	dataAO1.BatchSize = m.BatchSize

	dataAO1.ForceRebuild = m.ForceRebuild

	dataAO1.Input = m.Input

	dataAO1.PluginName = m.PluginName

	dataAO1.PollInterval = m.PollInterval

	dataAO1.Priority = m.Priority

	dataAO1.ResponseTopic = m.ResponseTopic

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this connector start stream
func (m *ConnectorStartStream) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ConnectorStreamMessage
	if err := m.ConnectorStreamMessage.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ConnectorStartStream) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectorStartStream) UnmarshalBinary(b []byte) error {
	var res ConnectorStartStream
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
