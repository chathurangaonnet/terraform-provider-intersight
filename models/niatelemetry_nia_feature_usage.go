// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NiatelemetryNiaFeatureUsage Niatelemetry:Nia Feature Usage
//
// Object available at Device connector scope for feature and fabric information. This applies to APIC environment currently.
//
// swagger:model niatelemetryNiaFeatureUsage
type NiatelemetryNiaFeatureUsage struct {
	MoBaseMo

	// Number of APIC controllers. This determines the value of controllers for the fabric.
	ApicCount int64 `json:"ApicCount,omitempty"`

	// ACI APPs feature usage. This determines the total number of apps installed on the fabric.
	AppCenterCount int64 `json:"AppCenterCount,omitempty"`

	// AVE feature usage. This determines if ACI virtual edge feature is enabled or disabled.
	Ave string `json:"Ave,omitempty"`

	// Number of BDs. This determines the total number of Broadcast Domains across the fabric.
	BdCount int64 `json:"BdCount,omitempty"`

	// Consistency checker application usage. This determines if the fabric has Consistency checker application installed.
	ConsistencyCheckerApp string `json:"ConsistencyCheckerApp,omitempty"`

	// Number of contracts. This determines the total number of Contracts configured across the fabric.
	ContractCount int64 `json:"ContractCount,omitempty"`

	// DNS feature usage. This determines the total number of DNS configurations across the fabric.
	DNSCount int64 `json:"DnsCount,omitempty"`

	// Eigrp feature usage. This determines the total number of EIGRP sessions across the fabric.
	EigrpCount int64 `json:"EigrpCount,omitempty"`

	// Number of EPGs. This determines the total number of End Point Groups across the fabric.
	EpgCount int64 `json:"EpgCount,omitempty"`

	// Hsrp feature usage. This determines the total number of HSRP sessions across the fabric.
	HsrpCount int64 `json:"HsrpCount,omitempty"`

	// Ibgp feature usage. This determines the total number of BGP sessions across the fabric.
	IbgpCount int64 `json:"IbgpCount,omitempty"`

	// IGMP Access List feature usage. This determines the total number of IGMP access lists configured across the fabric.
	IgmpAccessListCount int64 `json:"IgmpAccessListCount,omitempty"`

	// IGMP Snooping feature usage. This determines if this feature is enabled or disabled.
	IgmpSnoop string `json:"IgmpSnoop,omitempty"`

	// Number of IP based EPGs. This determines the total number of IP End Point Groups across the fabric.
	IPEpgCount int64 `json:"IpEpgCount,omitempty"`

	// Isis feature usage. TThis determines the total number of ISIS sessions across the fabric.
	IsisCount int64 `json:"IsisCount,omitempty"`

	// L2Multicast feature usage. This determines if this Layer 2 Multicast feature is being enabled / disabled on the fabric.
	L2Multicast string `json:"L2Multicast,omitempty"`

	// Number of Leafs. This determines the total number of Leaf switches in the fabric.
	LeafCount int64 `json:"LeafCount,omitempty"`

	// Maintenance Mode feature usage. This determines the number of switches that are currently in maintenance mode.
	MaintenanceModeCount int64 `json:"MaintenanceModeCount,omitempty"`

	// Management over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
	ManagementOverV6Count int64 `json:"ManagementOverV6Count,omitempty"`

	// NIR application usage. This determines if the fabric has NIR application installed.
	Nir string `json:"Nir,omitempty"`

	// Opflex for Kubernetes feature usage. This determines the total number of VMM sessions of type kubernetes.
	OpflexKubernetesCount int64 `json:"OpflexKubernetesCount,omitempty"`

	// Ospf feature usage. This determines the total number of OSPF sessions across the fabric.
	OspfCount int64 `json:"OspfCount,omitempty"`

	// POE feature usage. This determines the total number of POE configurations across the fabric.
	PoeCount int64 `json:"PoeCount,omitempty"`

	// QinVniTunnel feature usage. This determines if the qinVniTunnel feature is being used on the fabric and the scale of it.
	QinVniTunnelCount int64 `json:"QinVniTunnelCount,omitempty"`

	// Relationship to the Device Registration object for this setup.
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// Number of remote Leafs. This determines if this feature is being enabled or disabled.
	RemoteLeafCount int64 `json:"RemoteLeafCount,omitempty"`

	// SCVMM feature usage. This determines the total number of SCVMM configurations in the fabric.
	ScvmmCount int64 `json:"ScvmmCount,omitempty"`

	// SharedL3Out feature usage. This determines the total number of Shared L3 out configured across the fabric.
	SharedL3OutCount int64 `json:"SharedL3OutCount,omitempty"`

	// Smart callhome feature usage. This determines if this feature is being enabled or disabled.
	SmartCallHome string `json:"SmartCallHome,omitempty"`

	// SNMP feature usage. This determines if this feature is enabled or disabled.
	Snmp string `json:"Snmp,omitempty"`

	// Number of Spines. This determines the total number of spine switches in the fabric.
	SpineCount int64 `json:"SpineCount,omitempty"`

	// Ssh over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
	SSHOverV6Count int64 `json:"SshOverV6Count,omitempty"`

	// Syslog over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
	SyslogOverV6Count int64 `json:"SyslogOverV6Count,omitempty"`

	// Number of tenants. This determines the total number of tenants configured across the fabric.
	TenantCount int64 `json:"TenantCount,omitempty"`

	// Number of tier 2 Leafs. This determines the total number of tier 2 Leaf switches in the fabric.
	TierTwoLeafCount int64 `json:"TierTwoLeafCount,omitempty"`

	// TWAMP feature usage. This determines if this feature is enabled or disabled.
	Twamp string `json:"Twamp,omitempty"`

	// VMM uSegmentation feature usage. This determines if microsegmentation feature is enabled or disabled.
	Useg string `json:"Useg,omitempty"`

	// Virtual pod feature usage. This determines the total number of virtual POD configurations in the fabrics.
	VpodCount int64 `json:"VpodCount,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NiatelemetryNiaFeatureUsage) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		ApicCount int64 `json:"ApicCount,omitempty"`

		AppCenterCount int64 `json:"AppCenterCount,omitempty"`

		Ave string `json:"Ave,omitempty"`

		BdCount int64 `json:"BdCount,omitempty"`

		ConsistencyCheckerApp string `json:"ConsistencyCheckerApp,omitempty"`

		ContractCount int64 `json:"ContractCount,omitempty"`

		DNSCount int64 `json:"DnsCount,omitempty"`

		EigrpCount int64 `json:"EigrpCount,omitempty"`

		EpgCount int64 `json:"EpgCount,omitempty"`

		HsrpCount int64 `json:"HsrpCount,omitempty"`

		IbgpCount int64 `json:"IbgpCount,omitempty"`

		IgmpAccessListCount int64 `json:"IgmpAccessListCount,omitempty"`

		IgmpSnoop string `json:"IgmpSnoop,omitempty"`

		IPEpgCount int64 `json:"IpEpgCount,omitempty"`

		IsisCount int64 `json:"IsisCount,omitempty"`

		L2Multicast string `json:"L2Multicast,omitempty"`

		LeafCount int64 `json:"LeafCount,omitempty"`

		MaintenanceModeCount int64 `json:"MaintenanceModeCount,omitempty"`

		ManagementOverV6Count int64 `json:"ManagementOverV6Count,omitempty"`

		Nir string `json:"Nir,omitempty"`

		OpflexKubernetesCount int64 `json:"OpflexKubernetesCount,omitempty"`

		OspfCount int64 `json:"OspfCount,omitempty"`

		PoeCount int64 `json:"PoeCount,omitempty"`

		QinVniTunnelCount int64 `json:"QinVniTunnelCount,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		RemoteLeafCount int64 `json:"RemoteLeafCount,omitempty"`

		ScvmmCount int64 `json:"ScvmmCount,omitempty"`

		SharedL3OutCount int64 `json:"SharedL3OutCount,omitempty"`

		SmartCallHome string `json:"SmartCallHome,omitempty"`

		Snmp string `json:"Snmp,omitempty"`

		SpineCount int64 `json:"SpineCount,omitempty"`

		SSHOverV6Count int64 `json:"SshOverV6Count,omitempty"`

		SyslogOverV6Count int64 `json:"SyslogOverV6Count,omitempty"`

		TenantCount int64 `json:"TenantCount,omitempty"`

		TierTwoLeafCount int64 `json:"TierTwoLeafCount,omitempty"`

		Twamp string `json:"Twamp,omitempty"`

		Useg string `json:"Useg,omitempty"`

		VpodCount int64 `json:"VpodCount,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ApicCount = dataAO1.ApicCount

	m.AppCenterCount = dataAO1.AppCenterCount

	m.Ave = dataAO1.Ave

	m.BdCount = dataAO1.BdCount

	m.ConsistencyCheckerApp = dataAO1.ConsistencyCheckerApp

	m.ContractCount = dataAO1.ContractCount

	m.DNSCount = dataAO1.DNSCount

	m.EigrpCount = dataAO1.EigrpCount

	m.EpgCount = dataAO1.EpgCount

	m.HsrpCount = dataAO1.HsrpCount

	m.IbgpCount = dataAO1.IbgpCount

	m.IgmpAccessListCount = dataAO1.IgmpAccessListCount

	m.IgmpSnoop = dataAO1.IgmpSnoop

	m.IPEpgCount = dataAO1.IPEpgCount

	m.IsisCount = dataAO1.IsisCount

	m.L2Multicast = dataAO1.L2Multicast

	m.LeafCount = dataAO1.LeafCount

	m.MaintenanceModeCount = dataAO1.MaintenanceModeCount

	m.ManagementOverV6Count = dataAO1.ManagementOverV6Count

	m.Nir = dataAO1.Nir

	m.OpflexKubernetesCount = dataAO1.OpflexKubernetesCount

	m.OspfCount = dataAO1.OspfCount

	m.PoeCount = dataAO1.PoeCount

	m.QinVniTunnelCount = dataAO1.QinVniTunnelCount

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.RemoteLeafCount = dataAO1.RemoteLeafCount

	m.ScvmmCount = dataAO1.ScvmmCount

	m.SharedL3OutCount = dataAO1.SharedL3OutCount

	m.SmartCallHome = dataAO1.SmartCallHome

	m.Snmp = dataAO1.Snmp

	m.SpineCount = dataAO1.SpineCount

	m.SSHOverV6Count = dataAO1.SSHOverV6Count

	m.SyslogOverV6Count = dataAO1.SyslogOverV6Count

	m.TenantCount = dataAO1.TenantCount

	m.TierTwoLeafCount = dataAO1.TierTwoLeafCount

	m.Twamp = dataAO1.Twamp

	m.Useg = dataAO1.Useg

	m.VpodCount = dataAO1.VpodCount

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NiatelemetryNiaFeatureUsage) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ApicCount int64 `json:"ApicCount,omitempty"`

		AppCenterCount int64 `json:"AppCenterCount,omitempty"`

		Ave string `json:"Ave,omitempty"`

		BdCount int64 `json:"BdCount,omitempty"`

		ConsistencyCheckerApp string `json:"ConsistencyCheckerApp,omitempty"`

		ContractCount int64 `json:"ContractCount,omitempty"`

		DNSCount int64 `json:"DnsCount,omitempty"`

		EigrpCount int64 `json:"EigrpCount,omitempty"`

		EpgCount int64 `json:"EpgCount,omitempty"`

		HsrpCount int64 `json:"HsrpCount,omitempty"`

		IbgpCount int64 `json:"IbgpCount,omitempty"`

		IgmpAccessListCount int64 `json:"IgmpAccessListCount,omitempty"`

		IgmpSnoop string `json:"IgmpSnoop,omitempty"`

		IPEpgCount int64 `json:"IpEpgCount,omitempty"`

		IsisCount int64 `json:"IsisCount,omitempty"`

		L2Multicast string `json:"L2Multicast,omitempty"`

		LeafCount int64 `json:"LeafCount,omitempty"`

		MaintenanceModeCount int64 `json:"MaintenanceModeCount,omitempty"`

		ManagementOverV6Count int64 `json:"ManagementOverV6Count,omitempty"`

		Nir string `json:"Nir,omitempty"`

		OpflexKubernetesCount int64 `json:"OpflexKubernetesCount,omitempty"`

		OspfCount int64 `json:"OspfCount,omitempty"`

		PoeCount int64 `json:"PoeCount,omitempty"`

		QinVniTunnelCount int64 `json:"QinVniTunnelCount,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		RemoteLeafCount int64 `json:"RemoteLeafCount,omitempty"`

		ScvmmCount int64 `json:"ScvmmCount,omitempty"`

		SharedL3OutCount int64 `json:"SharedL3OutCount,omitempty"`

		SmartCallHome string `json:"SmartCallHome,omitempty"`

		Snmp string `json:"Snmp,omitempty"`

		SpineCount int64 `json:"SpineCount,omitempty"`

		SSHOverV6Count int64 `json:"SshOverV6Count,omitempty"`

		SyslogOverV6Count int64 `json:"SyslogOverV6Count,omitempty"`

		TenantCount int64 `json:"TenantCount,omitempty"`

		TierTwoLeafCount int64 `json:"TierTwoLeafCount,omitempty"`

		Twamp string `json:"Twamp,omitempty"`

		Useg string `json:"Useg,omitempty"`

		VpodCount int64 `json:"VpodCount,omitempty"`
	}

	dataAO1.ApicCount = m.ApicCount

	dataAO1.AppCenterCount = m.AppCenterCount

	dataAO1.Ave = m.Ave

	dataAO1.BdCount = m.BdCount

	dataAO1.ConsistencyCheckerApp = m.ConsistencyCheckerApp

	dataAO1.ContractCount = m.ContractCount

	dataAO1.DNSCount = m.DNSCount

	dataAO1.EigrpCount = m.EigrpCount

	dataAO1.EpgCount = m.EpgCount

	dataAO1.HsrpCount = m.HsrpCount

	dataAO1.IbgpCount = m.IbgpCount

	dataAO1.IgmpAccessListCount = m.IgmpAccessListCount

	dataAO1.IgmpSnoop = m.IgmpSnoop

	dataAO1.IPEpgCount = m.IPEpgCount

	dataAO1.IsisCount = m.IsisCount

	dataAO1.L2Multicast = m.L2Multicast

	dataAO1.LeafCount = m.LeafCount

	dataAO1.MaintenanceModeCount = m.MaintenanceModeCount

	dataAO1.ManagementOverV6Count = m.ManagementOverV6Count

	dataAO1.Nir = m.Nir

	dataAO1.OpflexKubernetesCount = m.OpflexKubernetesCount

	dataAO1.OspfCount = m.OspfCount

	dataAO1.PoeCount = m.PoeCount

	dataAO1.QinVniTunnelCount = m.QinVniTunnelCount

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.RemoteLeafCount = m.RemoteLeafCount

	dataAO1.ScvmmCount = m.ScvmmCount

	dataAO1.SharedL3OutCount = m.SharedL3OutCount

	dataAO1.SmartCallHome = m.SmartCallHome

	dataAO1.Snmp = m.Snmp

	dataAO1.SpineCount = m.SpineCount

	dataAO1.SSHOverV6Count = m.SSHOverV6Count

	dataAO1.SyslogOverV6Count = m.SyslogOverV6Count

	dataAO1.TenantCount = m.TenantCount

	dataAO1.TierTwoLeafCount = m.TierTwoLeafCount

	dataAO1.Twamp = m.Twamp

	dataAO1.Useg = m.Useg

	dataAO1.VpodCount = m.VpodCount

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this niatelemetry nia feature usage
func (m *NiatelemetryNiaFeatureUsage) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NiatelemetryNiaFeatureUsage) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NiatelemetryNiaFeatureUsage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NiatelemetryNiaFeatureUsage) UnmarshalBinary(b []byte) error {
	var res NiatelemetryNiaFeatureUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
