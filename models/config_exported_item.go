// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigExportedItem Config:Exported Item
//
// A single managed object that is being exported.
//
// swagger:model configExportedItem
type ConfigExportedItem struct {
	MoBaseMo

	// A collection of references to the [config.Exporter](mo://config.Exporter) Managed Object.
	// When this managed object is deleted, the referenced [config.Exporter](mo://config.Exporter) MO unsets its reference to this deleted MO.
	// Read Only: true
	Exporter *ConfigExporterRef `json:"Exporter,omitempty"`

	// Name of the file corresponding to item MO.
	// Read Only: true
	FileName string `json:"FileName,omitempty"`

	// Identity of the MO that is being exported.
	// Read Only: true
	Item *ConfigMoRef `json:"Item,omitempty"`

	// MO item identity (the moref corresponding to item) expressed as a string.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// If the parent MO has been exported as part of this export operation, reference to the parent's exported item MO.
	// Read Only: true
	ParentItem *ConfigExportedItemRef `json:"ParentItem,omitempty"`

	// All related MOs that have been exported along with this MO.
	// Read Only: true
	RelatedItems []*ConfigExportedItemRef `json:"RelatedItems"`

	// Version of the service that owns the item MO.
	// Read Only: true
	ServiceVersion string `json:"ServiceVersion,omitempty"`

	// Status of the item's export operation.
	// Read Only: true
	// Enum: [ InProgress Success Failed RollBackInitiated RollBackFailed RollbackCompleted RollbackAborted OperationTimedOut]
	Status string `json:"Status,omitempty"`

	// Progress or error message for the MO's export operation.
	// Read Only: true
	StatusMessage string `json:"StatusMessage,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ConfigExportedItem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Exporter *ConfigExporterRef `json:"Exporter,omitempty"`

		FileName string `json:"FileName,omitempty"`

		Item *ConfigMoRef `json:"Item,omitempty"`

		Name string `json:"Name,omitempty"`

		ParentItem *ConfigExportedItemRef `json:"ParentItem,omitempty"`

		RelatedItems []*ConfigExportedItemRef `json:"RelatedItems"`

		ServiceVersion string `json:"ServiceVersion,omitempty"`

		Status string `json:"Status,omitempty"`

		StatusMessage string `json:"StatusMessage,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Exporter = dataAO1.Exporter

	m.FileName = dataAO1.FileName

	m.Item = dataAO1.Item

	m.Name = dataAO1.Name

	m.ParentItem = dataAO1.ParentItem

	m.RelatedItems = dataAO1.RelatedItems

	m.ServiceVersion = dataAO1.ServiceVersion

	m.Status = dataAO1.Status

	m.StatusMessage = dataAO1.StatusMessage

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ConfigExportedItem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Exporter *ConfigExporterRef `json:"Exporter,omitempty"`

		FileName string `json:"FileName,omitempty"`

		Item *ConfigMoRef `json:"Item,omitempty"`

		Name string `json:"Name,omitempty"`

		ParentItem *ConfigExportedItemRef `json:"ParentItem,omitempty"`

		RelatedItems []*ConfigExportedItemRef `json:"RelatedItems"`

		ServiceVersion string `json:"ServiceVersion,omitempty"`

		Status string `json:"Status,omitempty"`

		StatusMessage string `json:"StatusMessage,omitempty"`
	}

	dataAO1.Exporter = m.Exporter

	dataAO1.FileName = m.FileName

	dataAO1.Item = m.Item

	dataAO1.Name = m.Name

	dataAO1.ParentItem = m.ParentItem

	dataAO1.RelatedItems = m.RelatedItems

	dataAO1.ServiceVersion = m.ServiceVersion

	dataAO1.Status = m.Status

	dataAO1.StatusMessage = m.StatusMessage

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this config exported item
func (m *ConfigExportedItem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExporter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigExportedItem) validateExporter(formats strfmt.Registry) error {

	if swag.IsZero(m.Exporter) { // not required
		return nil
	}

	if m.Exporter != nil {
		if err := m.Exporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Exporter")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigExportedItem) validateItem(formats strfmt.Registry) error {

	if swag.IsZero(m.Item) { // not required
		return nil
	}

	if m.Item != nil {
		if err := m.Item.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Item")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigExportedItem) validateParentItem(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentItem) { // not required
		return nil
	}

	if m.ParentItem != nil {
		if err := m.ParentItem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ParentItem")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigExportedItem) validateRelatedItems(formats strfmt.Registry) error {

	if swag.IsZero(m.RelatedItems) { // not required
		return nil
	}

	for i := 0; i < len(m.RelatedItems); i++ {
		if swag.IsZero(m.RelatedItems[i]) { // not required
			continue
		}

		if m.RelatedItems[i] != nil {
			if err := m.RelatedItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RelatedItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var configExportedItemTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","InProgress","Success","Failed","RollBackInitiated","RollBackFailed","RollbackCompleted","RollbackAborted","OperationTimedOut"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configExportedItemTypeStatusPropEnum = append(configExportedItemTypeStatusPropEnum, v)
	}
}

// property enum
func (m *ConfigExportedItem) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, configExportedItemTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConfigExportedItem) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigExportedItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigExportedItem) UnmarshalBinary(b []byte) error {
	var res ConfigExportedItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
