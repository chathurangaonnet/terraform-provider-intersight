// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AssetUsernamePasswordCredential Asset:Username Password Credential
//
// An credential which performs authentication based on a username and password.
//
// swagger:model assetUsernamePasswordCredential
type AssetUsernamePasswordCredential struct {
	AssetCredential

	// Indicates whether the value of the 'password' property has been set.
	// Read Only: true
	IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

	// The password used to authenticate with a managed target.
	Password string `json:"Password,omitempty"`

	// The username used to authenticate with a managed target.
	Username string `json:"Username,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AssetUsernamePasswordCredential) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 AssetCredential
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.AssetCredential = aO0

	// AO1
	var dataAO1 struct {
		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		Password string `json:"Password,omitempty"`

		Username string `json:"Username,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.IsPasswordSet = dataAO1.IsPasswordSet

	m.Password = dataAO1.Password

	m.Username = dataAO1.Username

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AssetUsernamePasswordCredential) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.AssetCredential)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`

		Password string `json:"Password,omitempty"`

		Username string `json:"Username,omitempty"`
	}

	dataAO1.IsPasswordSet = m.IsPasswordSet

	dataAO1.Password = m.Password

	dataAO1.Username = m.Username

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this asset username password credential
func (m *AssetUsernamePasswordCredential) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AssetCredential
	if err := m.AssetCredential.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *AssetUsernamePasswordCredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetUsernamePasswordCredential) UnmarshalBinary(b []byte) error {
	var res AssetUsernamePasswordCredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
