// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AssetWorkloadOptimizerVmwareVcenterOptions Asset:Workload Optimizer Vmware Vcenter Options
//
// Captures configuration specific to the VMware Vcenter target for the Workload Optimizer service.
//
// swagger:model assetWorkloadOptimizerVmwareVcenterOptions
type AssetWorkloadOptimizerVmwareVcenterOptions struct {
	AssetServiceOptions

	// DatastoreBrowsingEnabled controls whether Workload Optimizer scans vCenter datastores to identify files which are not used and can be deleted to reclaim space and improve actual disk utilization. For example orphaned VMDK files.
	DatastoreBrowsingEnabled *bool `json:"DatastoreBrowsingEnabled,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AssetWorkloadOptimizerVmwareVcenterOptions) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 AssetServiceOptions
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.AssetServiceOptions = aO0

	// AO1
	var dataAO1 struct {
		DatastoreBrowsingEnabled *bool `json:"DatastoreBrowsingEnabled,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.DatastoreBrowsingEnabled = dataAO1.DatastoreBrowsingEnabled

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AssetWorkloadOptimizerVmwareVcenterOptions) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.AssetServiceOptions)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		DatastoreBrowsingEnabled *bool `json:"DatastoreBrowsingEnabled,omitempty"`
	}

	dataAO1.DatastoreBrowsingEnabled = m.DatastoreBrowsingEnabled

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this asset workload optimizer vmware vcenter options
func (m *AssetWorkloadOptimizerVmwareVcenterOptions) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AssetServiceOptions
	if err := m.AssetServiceOptions.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *AssetWorkloadOptimizerVmwareVcenterOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetWorkloadOptimizerVmwareVcenterOptions) UnmarshalBinary(b []byte) error {
	var res AssetWorkloadOptimizerVmwareVcenterOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
