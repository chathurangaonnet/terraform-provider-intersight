// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TamSecurityAdvisoryDetails Tam:Security Advisory Details
//
// Details pertaining to a security advisory defined by a given advisory.
//
// swagger:model tamSecurityAdvisoryDetails
type TamSecurityAdvisoryDetails struct {
	TamBaseAdvisoryDetails

	// CVSS version 3 base score for the security Advisory.
	BaseScore float64 `json:"BaseScore,omitempty"`

	// CVE (https://cve.mitre.org/about/faqs.html) identifiers associated with the published security Advisory.
	CveIds []string `json:"CveIds"`

	// CVSS version 3 environmental score for the security Advisory.
	EnvironmentalScore float64 `json:"EnvironmentalScore,omitempty"`

	// Cisco assigned status of the published advisory. Depends on whether the investigation is complete or on-going.
	// Enum: [interim final]
	Status *string `json:"Status,omitempty"`

	// CVSS version 3 temporal score for the security Advisory.
	TemporalScore float64 `json:"TemporalScore,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TamSecurityAdvisoryDetails) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TamBaseAdvisoryDetails
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TamBaseAdvisoryDetails = aO0

	// AO1
	var dataAO1 struct {
		BaseScore float64 `json:"BaseScore,omitempty"`

		CveIds []string `json:"CveIds"`

		EnvironmentalScore float64 `json:"EnvironmentalScore,omitempty"`

		Status *string `json:"Status,omitempty"`

		TemporalScore float64 `json:"TemporalScore,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.BaseScore = dataAO1.BaseScore

	m.CveIds = dataAO1.CveIds

	m.EnvironmentalScore = dataAO1.EnvironmentalScore

	m.Status = dataAO1.Status

	m.TemporalScore = dataAO1.TemporalScore

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TamSecurityAdvisoryDetails) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.TamBaseAdvisoryDetails)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		BaseScore float64 `json:"BaseScore,omitempty"`

		CveIds []string `json:"CveIds"`

		EnvironmentalScore float64 `json:"EnvironmentalScore,omitempty"`

		Status *string `json:"Status,omitempty"`

		TemporalScore float64 `json:"TemporalScore,omitempty"`
	}

	dataAO1.BaseScore = m.BaseScore

	dataAO1.CveIds = m.CveIds

	dataAO1.EnvironmentalScore = m.EnvironmentalScore

	dataAO1.Status = m.Status

	dataAO1.TemporalScore = m.TemporalScore

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tam security advisory details
func (m *TamSecurityAdvisoryDetails) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TamBaseAdvisoryDetails
	if err := m.TamBaseAdvisoryDetails.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tamSecurityAdvisoryDetailsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["interim","final"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tamSecurityAdvisoryDetailsTypeStatusPropEnum = append(tamSecurityAdvisoryDetailsTypeStatusPropEnum, v)
	}
}

// property enum
func (m *TamSecurityAdvisoryDetails) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tamSecurityAdvisoryDetailsTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TamSecurityAdvisoryDetails) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TamSecurityAdvisoryDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TamSecurityAdvisoryDetails) UnmarshalBinary(b []byte) error {
	var res TamSecurityAdvisoryDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
