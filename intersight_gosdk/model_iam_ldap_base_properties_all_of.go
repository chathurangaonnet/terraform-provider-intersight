/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-04-12T21:47:47-07:00.
 *
 * API version: 1.0.9-1617
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// IamLdapBasePropertiesAllOf Definition of the list of properties defined in 'iam.LdapBaseProperties', excluding properties defined in parent classes.
type IamLdapBasePropertiesAllOf struct {
	// Role and locale information of the user.
	Attribute *string `json:"Attribute,omitempty"`
	// Base Distinguished Name (DN). Starting point from where server will search for users and groups.
	BaseDn *string `json:"BaseDn,omitempty"`
	// Distinguished Name (DN) of the user, that is used to authenticate against LDAP servers.
	BindDn *string `json:"BindDn,omitempty"`
	// Authentication method to access LDAP servers.
	BindMethod *string `json:"BindMethod,omitempty"`
	// The IPv4 domain that all users must be in.
	Domain *string `json:"Domain,omitempty"`
	// If enabled, the endpoint encrypts all information it sends to the LDAP server.
	EnableEncryption *bool `json:"EnableEncryption,omitempty"`
	// If enabled, user authorization is also done at the group level for LDAP users not in the local user database.
	EnableGroupAuthorization *bool `json:"EnableGroupAuthorization,omitempty"`
	// Criteria to identify entries in search requests.
	Filter *string `json:"Filter,omitempty"`
	// Groups to which an LDAP entry belongs.
	GroupAttribute *string `json:"GroupAttribute,omitempty"`
	// Indicates whether the value of the 'password' property has been set.
	IsPasswordSet *bool `json:"IsPasswordSet,omitempty"`
	// Search depth to look for a nested LDAP group in an LDAP group map.
	NestedGroupSearchDepth *int64 `json:"NestedGroupSearchDepth,omitempty"`
	// Password of the user, that is used to authenticate.
	Password *string `json:"Password,omitempty"`
	// LDAP authentication timeout duration, in seconds.
	Timeout *int64 `json:"Timeout,omitempty"`
}

// NewIamLdapBasePropertiesAllOf instantiates a new IamLdapBasePropertiesAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamLdapBasePropertiesAllOf() *IamLdapBasePropertiesAllOf {
	this := IamLdapBasePropertiesAllOf{}
	var bindMethod string = "LoginCredentials"
	this.BindMethod = &bindMethod
	return &this
}

// NewIamLdapBasePropertiesAllOfWithDefaults instantiates a new IamLdapBasePropertiesAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamLdapBasePropertiesAllOfWithDefaults() *IamLdapBasePropertiesAllOf {
	this := IamLdapBasePropertiesAllOf{}
	var bindMethod string = "LoginCredentials"
	this.BindMethod = &bindMethod
	return &this
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *IamLdapBasePropertiesAllOf) GetAttribute() string {
	if o == nil || o.Attribute == nil {
		var ret string
		return ret
	}
	return *o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapBasePropertiesAllOf) GetAttributeOk() (*string, bool) {
	if o == nil || o.Attribute == nil {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *IamLdapBasePropertiesAllOf) HasAttribute() bool {
	if o != nil && o.Attribute != nil {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given string and assigns it to the Attribute field.
func (o *IamLdapBasePropertiesAllOf) SetAttribute(v string) {
	o.Attribute = &v
}

// GetBaseDn returns the BaseDn field value if set, zero value otherwise.
func (o *IamLdapBasePropertiesAllOf) GetBaseDn() string {
	if o == nil || o.BaseDn == nil {
		var ret string
		return ret
	}
	return *o.BaseDn
}

// GetBaseDnOk returns a tuple with the BaseDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapBasePropertiesAllOf) GetBaseDnOk() (*string, bool) {
	if o == nil || o.BaseDn == nil {
		return nil, false
	}
	return o.BaseDn, true
}

// HasBaseDn returns a boolean if a field has been set.
func (o *IamLdapBasePropertiesAllOf) HasBaseDn() bool {
	if o != nil && o.BaseDn != nil {
		return true
	}

	return false
}

// SetBaseDn gets a reference to the given string and assigns it to the BaseDn field.
func (o *IamLdapBasePropertiesAllOf) SetBaseDn(v string) {
	o.BaseDn = &v
}

// GetBindDn returns the BindDn field value if set, zero value otherwise.
func (o *IamLdapBasePropertiesAllOf) GetBindDn() string {
	if o == nil || o.BindDn == nil {
		var ret string
		return ret
	}
	return *o.BindDn
}

// GetBindDnOk returns a tuple with the BindDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapBasePropertiesAllOf) GetBindDnOk() (*string, bool) {
	if o == nil || o.BindDn == nil {
		return nil, false
	}
	return o.BindDn, true
}

// HasBindDn returns a boolean if a field has been set.
func (o *IamLdapBasePropertiesAllOf) HasBindDn() bool {
	if o != nil && o.BindDn != nil {
		return true
	}

	return false
}

// SetBindDn gets a reference to the given string and assigns it to the BindDn field.
func (o *IamLdapBasePropertiesAllOf) SetBindDn(v string) {
	o.BindDn = &v
}

// GetBindMethod returns the BindMethod field value if set, zero value otherwise.
func (o *IamLdapBasePropertiesAllOf) GetBindMethod() string {
	if o == nil || o.BindMethod == nil {
		var ret string
		return ret
	}
	return *o.BindMethod
}

// GetBindMethodOk returns a tuple with the BindMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapBasePropertiesAllOf) GetBindMethodOk() (*string, bool) {
	if o == nil || o.BindMethod == nil {
		return nil, false
	}
	return o.BindMethod, true
}

// HasBindMethod returns a boolean if a field has been set.
func (o *IamLdapBasePropertiesAllOf) HasBindMethod() bool {
	if o != nil && o.BindMethod != nil {
		return true
	}

	return false
}

// SetBindMethod gets a reference to the given string and assigns it to the BindMethod field.
func (o *IamLdapBasePropertiesAllOf) SetBindMethod(v string) {
	o.BindMethod = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *IamLdapBasePropertiesAllOf) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapBasePropertiesAllOf) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *IamLdapBasePropertiesAllOf) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *IamLdapBasePropertiesAllOf) SetDomain(v string) {
	o.Domain = &v
}

// GetEnableEncryption returns the EnableEncryption field value if set, zero value otherwise.
func (o *IamLdapBasePropertiesAllOf) GetEnableEncryption() bool {
	if o == nil || o.EnableEncryption == nil {
		var ret bool
		return ret
	}
	return *o.EnableEncryption
}

// GetEnableEncryptionOk returns a tuple with the EnableEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapBasePropertiesAllOf) GetEnableEncryptionOk() (*bool, bool) {
	if o == nil || o.EnableEncryption == nil {
		return nil, false
	}
	return o.EnableEncryption, true
}

// HasEnableEncryption returns a boolean if a field has been set.
func (o *IamLdapBasePropertiesAllOf) HasEnableEncryption() bool {
	if o != nil && o.EnableEncryption != nil {
		return true
	}

	return false
}

// SetEnableEncryption gets a reference to the given bool and assigns it to the EnableEncryption field.
func (o *IamLdapBasePropertiesAllOf) SetEnableEncryption(v bool) {
	o.EnableEncryption = &v
}

// GetEnableGroupAuthorization returns the EnableGroupAuthorization field value if set, zero value otherwise.
func (o *IamLdapBasePropertiesAllOf) GetEnableGroupAuthorization() bool {
	if o == nil || o.EnableGroupAuthorization == nil {
		var ret bool
		return ret
	}
	return *o.EnableGroupAuthorization
}

// GetEnableGroupAuthorizationOk returns a tuple with the EnableGroupAuthorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapBasePropertiesAllOf) GetEnableGroupAuthorizationOk() (*bool, bool) {
	if o == nil || o.EnableGroupAuthorization == nil {
		return nil, false
	}
	return o.EnableGroupAuthorization, true
}

// HasEnableGroupAuthorization returns a boolean if a field has been set.
func (o *IamLdapBasePropertiesAllOf) HasEnableGroupAuthorization() bool {
	if o != nil && o.EnableGroupAuthorization != nil {
		return true
	}

	return false
}

// SetEnableGroupAuthorization gets a reference to the given bool and assigns it to the EnableGroupAuthorization field.
func (o *IamLdapBasePropertiesAllOf) SetEnableGroupAuthorization(v bool) {
	o.EnableGroupAuthorization = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *IamLdapBasePropertiesAllOf) GetFilter() string {
	if o == nil || o.Filter == nil {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapBasePropertiesAllOf) GetFilterOk() (*string, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *IamLdapBasePropertiesAllOf) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *IamLdapBasePropertiesAllOf) SetFilter(v string) {
	o.Filter = &v
}

// GetGroupAttribute returns the GroupAttribute field value if set, zero value otherwise.
func (o *IamLdapBasePropertiesAllOf) GetGroupAttribute() string {
	if o == nil || o.GroupAttribute == nil {
		var ret string
		return ret
	}
	return *o.GroupAttribute
}

// GetGroupAttributeOk returns a tuple with the GroupAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapBasePropertiesAllOf) GetGroupAttributeOk() (*string, bool) {
	if o == nil || o.GroupAttribute == nil {
		return nil, false
	}
	return o.GroupAttribute, true
}

// HasGroupAttribute returns a boolean if a field has been set.
func (o *IamLdapBasePropertiesAllOf) HasGroupAttribute() bool {
	if o != nil && o.GroupAttribute != nil {
		return true
	}

	return false
}

// SetGroupAttribute gets a reference to the given string and assigns it to the GroupAttribute field.
func (o *IamLdapBasePropertiesAllOf) SetGroupAttribute(v string) {
	o.GroupAttribute = &v
}

// GetIsPasswordSet returns the IsPasswordSet field value if set, zero value otherwise.
func (o *IamLdapBasePropertiesAllOf) GetIsPasswordSet() bool {
	if o == nil || o.IsPasswordSet == nil {
		var ret bool
		return ret
	}
	return *o.IsPasswordSet
}

// GetIsPasswordSetOk returns a tuple with the IsPasswordSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapBasePropertiesAllOf) GetIsPasswordSetOk() (*bool, bool) {
	if o == nil || o.IsPasswordSet == nil {
		return nil, false
	}
	return o.IsPasswordSet, true
}

// HasIsPasswordSet returns a boolean if a field has been set.
func (o *IamLdapBasePropertiesAllOf) HasIsPasswordSet() bool {
	if o != nil && o.IsPasswordSet != nil {
		return true
	}

	return false
}

// SetIsPasswordSet gets a reference to the given bool and assigns it to the IsPasswordSet field.
func (o *IamLdapBasePropertiesAllOf) SetIsPasswordSet(v bool) {
	o.IsPasswordSet = &v
}

// GetNestedGroupSearchDepth returns the NestedGroupSearchDepth field value if set, zero value otherwise.
func (o *IamLdapBasePropertiesAllOf) GetNestedGroupSearchDepth() int64 {
	if o == nil || o.NestedGroupSearchDepth == nil {
		var ret int64
		return ret
	}
	return *o.NestedGroupSearchDepth
}

// GetNestedGroupSearchDepthOk returns a tuple with the NestedGroupSearchDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapBasePropertiesAllOf) GetNestedGroupSearchDepthOk() (*int64, bool) {
	if o == nil || o.NestedGroupSearchDepth == nil {
		return nil, false
	}
	return o.NestedGroupSearchDepth, true
}

// HasNestedGroupSearchDepth returns a boolean if a field has been set.
func (o *IamLdapBasePropertiesAllOf) HasNestedGroupSearchDepth() bool {
	if o != nil && o.NestedGroupSearchDepth != nil {
		return true
	}

	return false
}

// SetNestedGroupSearchDepth gets a reference to the given int64 and assigns it to the NestedGroupSearchDepth field.
func (o *IamLdapBasePropertiesAllOf) SetNestedGroupSearchDepth(v int64) {
	o.NestedGroupSearchDepth = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *IamLdapBasePropertiesAllOf) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapBasePropertiesAllOf) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *IamLdapBasePropertiesAllOf) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *IamLdapBasePropertiesAllOf) SetPassword(v string) {
	o.Password = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *IamLdapBasePropertiesAllOf) GetTimeout() int64 {
	if o == nil || o.Timeout == nil {
		var ret int64
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamLdapBasePropertiesAllOf) GetTimeoutOk() (*int64, bool) {
	if o == nil || o.Timeout == nil {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *IamLdapBasePropertiesAllOf) HasTimeout() bool {
	if o != nil && o.Timeout != nil {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int64 and assigns it to the Timeout field.
func (o *IamLdapBasePropertiesAllOf) SetTimeout(v int64) {
	o.Timeout = &v
}

func (o IamLdapBasePropertiesAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Attribute != nil {
		toSerialize["Attribute"] = o.Attribute
	}
	if o.BaseDn != nil {
		toSerialize["BaseDn"] = o.BaseDn
	}
	if o.BindDn != nil {
		toSerialize["BindDn"] = o.BindDn
	}
	if o.BindMethod != nil {
		toSerialize["BindMethod"] = o.BindMethod
	}
	if o.Domain != nil {
		toSerialize["Domain"] = o.Domain
	}
	if o.EnableEncryption != nil {
		toSerialize["EnableEncryption"] = o.EnableEncryption
	}
	if o.EnableGroupAuthorization != nil {
		toSerialize["EnableGroupAuthorization"] = o.EnableGroupAuthorization
	}
	if o.Filter != nil {
		toSerialize["Filter"] = o.Filter
	}
	if o.GroupAttribute != nil {
		toSerialize["GroupAttribute"] = o.GroupAttribute
	}
	if o.IsPasswordSet != nil {
		toSerialize["IsPasswordSet"] = o.IsPasswordSet
	}
	if o.NestedGroupSearchDepth != nil {
		toSerialize["NestedGroupSearchDepth"] = o.NestedGroupSearchDepth
	}
	if o.Password != nil {
		toSerialize["Password"] = o.Password
	}
	if o.Timeout != nil {
		toSerialize["Timeout"] = o.Timeout
	}
	return json.Marshal(toSerialize)
}

type NullableIamLdapBasePropertiesAllOf struct {
	value *IamLdapBasePropertiesAllOf
	isSet bool
}

func (v NullableIamLdapBasePropertiesAllOf) Get() *IamLdapBasePropertiesAllOf {
	return v.value
}

func (v *NullableIamLdapBasePropertiesAllOf) Set(val *IamLdapBasePropertiesAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableIamLdapBasePropertiesAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableIamLdapBasePropertiesAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamLdapBasePropertiesAllOf(val *IamLdapBasePropertiesAllOf) *NullableIamLdapBasePropertiesAllOf {
	return &NullableIamLdapBasePropertiesAllOf{value: val, isSet: true}
}

func (v NullableIamLdapBasePropertiesAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamLdapBasePropertiesAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
