/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-19T15:15:17Z.
 *
 * API version: 1.0.9-1903
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// CapabilitySwitchCapability Type to represent additional switch specific capabilities.
type CapabilitySwitchCapability struct {
	CapabilitySwitchCapabilityDef
	// Dynamic VIFs support on this switch.
	DynamicVifsSupported *bool `json:"DynamicVifsSupported,omitempty"`
	// Fan Modules support on this switch.
	FanModulesSupported        *bool                  `json:"FanModulesSupported,omitempty"`
	FcEndHostModeReservedVsans *[]CapabilityPortRange `json:"FcEndHostModeReservedVsans,omitempty"`
	// Fc Uplink ports auto negotiation speed support on this switch.
	FcUplinkPortsAutoNegotiationSupported *bool `json:"FcUplinkPortsAutoNegotiationSupported,omitempty"`
	// Locator Beacon LED support on this switch.
	LocatorBeaconSupported *bool `json:"LocatorBeaconSupported,omitempty"`
	// Maximum allowed Traffic Monitoring (SPAN) sessions on this switch.
	MaxActiveSpanSessions *int64 `json:"MaxActiveSpanSessions,omitempty"`
	// Maximum allowed Ethernet Uplink Port-channel members for each Uplink Port-channel on this switch.
	MaxEthernetPortChannelMembers *int64 `json:"MaxEthernetPortChannelMembers,omitempty"`
	// Maximum allowed Ethernet Uplink Port-channels on this switch.
	MaxEthernetPortChannels *int64 `json:"MaxEthernetPortChannels,omitempty"`
	// Maximum allowed Ethernet Uplink Ports on this switch.
	MaxEthernetUplinkPorts *int64 `json:"MaxEthernetUplinkPorts,omitempty"`
	// Total maximum Fc and Fcoe Port-channels allowed on this switch.
	MaxFcFcoePortChannels *int64 `json:"MaxFcFcoePortChannels,omitempty"`
	// Maximum allowed FC Uplink Port-channel members for each FCoE Port-channel on this switch.
	MaxFcPortChannelMembers *int64 `json:"MaxFcPortChannelMembers,omitempty"`
	// Maximum allowed FCoE Uplink Port-channel members for each FCoE Port-channel on this switch.
	MaxFcoePortChannelMembers *int64 `json:"MaxFcoePortChannelMembers,omitempty"`
	// Maximum allowed physical ports on this switch.
	MaxPorts *int64 `json:"MaxPorts,omitempty"`
	// Maximum allowed physical slots on this switch.
	MaxSlots *int64 `json:"MaxSlots,omitempty"`
	// Maximum number of Vsans supported on this switch.
	MaxVsansSupported *int64 `json:"MaxVsansSupported,omitempty"`
	// Minimum number of fans needed to be active/running on this switch.
	MinActiveFans             *int64                 `json:"MinActiveFans,omitempty"`
	PortsSupporting100gSpeed  *[]CapabilityPortRange `json:"PortsSupporting100gSpeed,omitempty"`
	PortsSupporting10gSpeed   *[]CapabilityPortRange `json:"PortsSupporting10gSpeed,omitempty"`
	PortsSupporting1gSpeed    *[]CapabilityPortRange `json:"PortsSupporting1gSpeed,omitempty"`
	PortsSupporting25gSpeed   *[]CapabilityPortRange `json:"PortsSupporting25gSpeed,omitempty"`
	PortsSupporting40gSpeed   *[]CapabilityPortRange `json:"PortsSupporting40gSpeed,omitempty"`
	PortsSupportingBreakout   *[]CapabilityPortRange `json:"PortsSupportingBreakout,omitempty"`
	PortsSupportingFcoe       *[]CapabilityPortRange `json:"PortsSupportingFcoe,omitempty"`
	PortsSupportingServerRole *[]CapabilityPortRange `json:"PortsSupportingServerRole,omitempty"`
	ReservedVsans             *[]CapabilityPortRange `json:"ReservedVsans,omitempty"`
	// Sereno Adaptor with Netflow support on this switch.
	SerenoNetflowSupported *bool                  `json:"SerenoNetflowSupported,omitempty"`
	UnifiedPorts           *[]CapabilityPortRange `json:"UnifiedPorts,omitempty"`
	// The Slider rule for Unified ports on this switch.
	UnifiedRule *string `json:"UnifiedRule,omitempty"`
	// VP Compression support on this switch.
	VpCompressionSupported *bool `json:"VpCompressionSupported,omitempty"`
}

// NewCapabilitySwitchCapability instantiates a new CapabilitySwitchCapability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapabilitySwitchCapability() *CapabilitySwitchCapability {
	this := CapabilitySwitchCapability{}
	return &this
}

// NewCapabilitySwitchCapabilityWithDefaults instantiates a new CapabilitySwitchCapability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapabilitySwitchCapabilityWithDefaults() *CapabilitySwitchCapability {
	this := CapabilitySwitchCapability{}
	return &this
}

// GetDynamicVifsSupported returns the DynamicVifsSupported field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetDynamicVifsSupported() bool {
	if o == nil || o.DynamicVifsSupported == nil {
		var ret bool
		return ret
	}
	return *o.DynamicVifsSupported
}

// GetDynamicVifsSupportedOk returns a tuple with the DynamicVifsSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetDynamicVifsSupportedOk() (*bool, bool) {
	if o == nil || o.DynamicVifsSupported == nil {
		return nil, false
	}
	return o.DynamicVifsSupported, true
}

// HasDynamicVifsSupported returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasDynamicVifsSupported() bool {
	if o != nil && o.DynamicVifsSupported != nil {
		return true
	}

	return false
}

// SetDynamicVifsSupported gets a reference to the given bool and assigns it to the DynamicVifsSupported field.
func (o *CapabilitySwitchCapability) SetDynamicVifsSupported(v bool) {
	o.DynamicVifsSupported = &v
}

// GetFanModulesSupported returns the FanModulesSupported field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetFanModulesSupported() bool {
	if o == nil || o.FanModulesSupported == nil {
		var ret bool
		return ret
	}
	return *o.FanModulesSupported
}

// GetFanModulesSupportedOk returns a tuple with the FanModulesSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetFanModulesSupportedOk() (*bool, bool) {
	if o == nil || o.FanModulesSupported == nil {
		return nil, false
	}
	return o.FanModulesSupported, true
}

// HasFanModulesSupported returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasFanModulesSupported() bool {
	if o != nil && o.FanModulesSupported != nil {
		return true
	}

	return false
}

// SetFanModulesSupported gets a reference to the given bool and assigns it to the FanModulesSupported field.
func (o *CapabilitySwitchCapability) SetFanModulesSupported(v bool) {
	o.FanModulesSupported = &v
}

// GetFcEndHostModeReservedVsans returns the FcEndHostModeReservedVsans field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetFcEndHostModeReservedVsans() []CapabilityPortRange {
	if o == nil || o.FcEndHostModeReservedVsans == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return *o.FcEndHostModeReservedVsans
}

// GetFcEndHostModeReservedVsansOk returns a tuple with the FcEndHostModeReservedVsans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetFcEndHostModeReservedVsansOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.FcEndHostModeReservedVsans == nil {
		return nil, false
	}
	return o.FcEndHostModeReservedVsans, true
}

// HasFcEndHostModeReservedVsans returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasFcEndHostModeReservedVsans() bool {
	if o != nil && o.FcEndHostModeReservedVsans != nil {
		return true
	}

	return false
}

// SetFcEndHostModeReservedVsans gets a reference to the given []CapabilityPortRange and assigns it to the FcEndHostModeReservedVsans field.
func (o *CapabilitySwitchCapability) SetFcEndHostModeReservedVsans(v []CapabilityPortRange) {
	o.FcEndHostModeReservedVsans = &v
}

// GetFcUplinkPortsAutoNegotiationSupported returns the FcUplinkPortsAutoNegotiationSupported field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetFcUplinkPortsAutoNegotiationSupported() bool {
	if o == nil || o.FcUplinkPortsAutoNegotiationSupported == nil {
		var ret bool
		return ret
	}
	return *o.FcUplinkPortsAutoNegotiationSupported
}

// GetFcUplinkPortsAutoNegotiationSupportedOk returns a tuple with the FcUplinkPortsAutoNegotiationSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetFcUplinkPortsAutoNegotiationSupportedOk() (*bool, bool) {
	if o == nil || o.FcUplinkPortsAutoNegotiationSupported == nil {
		return nil, false
	}
	return o.FcUplinkPortsAutoNegotiationSupported, true
}

// HasFcUplinkPortsAutoNegotiationSupported returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasFcUplinkPortsAutoNegotiationSupported() bool {
	if o != nil && o.FcUplinkPortsAutoNegotiationSupported != nil {
		return true
	}

	return false
}

// SetFcUplinkPortsAutoNegotiationSupported gets a reference to the given bool and assigns it to the FcUplinkPortsAutoNegotiationSupported field.
func (o *CapabilitySwitchCapability) SetFcUplinkPortsAutoNegotiationSupported(v bool) {
	o.FcUplinkPortsAutoNegotiationSupported = &v
}

// GetLocatorBeaconSupported returns the LocatorBeaconSupported field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetLocatorBeaconSupported() bool {
	if o == nil || o.LocatorBeaconSupported == nil {
		var ret bool
		return ret
	}
	return *o.LocatorBeaconSupported
}

// GetLocatorBeaconSupportedOk returns a tuple with the LocatorBeaconSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetLocatorBeaconSupportedOk() (*bool, bool) {
	if o == nil || o.LocatorBeaconSupported == nil {
		return nil, false
	}
	return o.LocatorBeaconSupported, true
}

// HasLocatorBeaconSupported returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasLocatorBeaconSupported() bool {
	if o != nil && o.LocatorBeaconSupported != nil {
		return true
	}

	return false
}

// SetLocatorBeaconSupported gets a reference to the given bool and assigns it to the LocatorBeaconSupported field.
func (o *CapabilitySwitchCapability) SetLocatorBeaconSupported(v bool) {
	o.LocatorBeaconSupported = &v
}

// GetMaxActiveSpanSessions returns the MaxActiveSpanSessions field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetMaxActiveSpanSessions() int64 {
	if o == nil || o.MaxActiveSpanSessions == nil {
		var ret int64
		return ret
	}
	return *o.MaxActiveSpanSessions
}

// GetMaxActiveSpanSessionsOk returns a tuple with the MaxActiveSpanSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetMaxActiveSpanSessionsOk() (*int64, bool) {
	if o == nil || o.MaxActiveSpanSessions == nil {
		return nil, false
	}
	return o.MaxActiveSpanSessions, true
}

// HasMaxActiveSpanSessions returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasMaxActiveSpanSessions() bool {
	if o != nil && o.MaxActiveSpanSessions != nil {
		return true
	}

	return false
}

// SetMaxActiveSpanSessions gets a reference to the given int64 and assigns it to the MaxActiveSpanSessions field.
func (o *CapabilitySwitchCapability) SetMaxActiveSpanSessions(v int64) {
	o.MaxActiveSpanSessions = &v
}

// GetMaxEthernetPortChannelMembers returns the MaxEthernetPortChannelMembers field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetMaxEthernetPortChannelMembers() int64 {
	if o == nil || o.MaxEthernetPortChannelMembers == nil {
		var ret int64
		return ret
	}
	return *o.MaxEthernetPortChannelMembers
}

// GetMaxEthernetPortChannelMembersOk returns a tuple with the MaxEthernetPortChannelMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetMaxEthernetPortChannelMembersOk() (*int64, bool) {
	if o == nil || o.MaxEthernetPortChannelMembers == nil {
		return nil, false
	}
	return o.MaxEthernetPortChannelMembers, true
}

// HasMaxEthernetPortChannelMembers returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasMaxEthernetPortChannelMembers() bool {
	if o != nil && o.MaxEthernetPortChannelMembers != nil {
		return true
	}

	return false
}

// SetMaxEthernetPortChannelMembers gets a reference to the given int64 and assigns it to the MaxEthernetPortChannelMembers field.
func (o *CapabilitySwitchCapability) SetMaxEthernetPortChannelMembers(v int64) {
	o.MaxEthernetPortChannelMembers = &v
}

// GetMaxEthernetPortChannels returns the MaxEthernetPortChannels field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetMaxEthernetPortChannels() int64 {
	if o == nil || o.MaxEthernetPortChannels == nil {
		var ret int64
		return ret
	}
	return *o.MaxEthernetPortChannels
}

// GetMaxEthernetPortChannelsOk returns a tuple with the MaxEthernetPortChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetMaxEthernetPortChannelsOk() (*int64, bool) {
	if o == nil || o.MaxEthernetPortChannels == nil {
		return nil, false
	}
	return o.MaxEthernetPortChannels, true
}

// HasMaxEthernetPortChannels returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasMaxEthernetPortChannels() bool {
	if o != nil && o.MaxEthernetPortChannels != nil {
		return true
	}

	return false
}

// SetMaxEthernetPortChannels gets a reference to the given int64 and assigns it to the MaxEthernetPortChannels field.
func (o *CapabilitySwitchCapability) SetMaxEthernetPortChannels(v int64) {
	o.MaxEthernetPortChannels = &v
}

// GetMaxEthernetUplinkPorts returns the MaxEthernetUplinkPorts field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetMaxEthernetUplinkPorts() int64 {
	if o == nil || o.MaxEthernetUplinkPorts == nil {
		var ret int64
		return ret
	}
	return *o.MaxEthernetUplinkPorts
}

// GetMaxEthernetUplinkPortsOk returns a tuple with the MaxEthernetUplinkPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetMaxEthernetUplinkPortsOk() (*int64, bool) {
	if o == nil || o.MaxEthernetUplinkPorts == nil {
		return nil, false
	}
	return o.MaxEthernetUplinkPorts, true
}

// HasMaxEthernetUplinkPorts returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasMaxEthernetUplinkPorts() bool {
	if o != nil && o.MaxEthernetUplinkPorts != nil {
		return true
	}

	return false
}

// SetMaxEthernetUplinkPorts gets a reference to the given int64 and assigns it to the MaxEthernetUplinkPorts field.
func (o *CapabilitySwitchCapability) SetMaxEthernetUplinkPorts(v int64) {
	o.MaxEthernetUplinkPorts = &v
}

// GetMaxFcFcoePortChannels returns the MaxFcFcoePortChannels field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetMaxFcFcoePortChannels() int64 {
	if o == nil || o.MaxFcFcoePortChannels == nil {
		var ret int64
		return ret
	}
	return *o.MaxFcFcoePortChannels
}

// GetMaxFcFcoePortChannelsOk returns a tuple with the MaxFcFcoePortChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetMaxFcFcoePortChannelsOk() (*int64, bool) {
	if o == nil || o.MaxFcFcoePortChannels == nil {
		return nil, false
	}
	return o.MaxFcFcoePortChannels, true
}

// HasMaxFcFcoePortChannels returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasMaxFcFcoePortChannels() bool {
	if o != nil && o.MaxFcFcoePortChannels != nil {
		return true
	}

	return false
}

// SetMaxFcFcoePortChannels gets a reference to the given int64 and assigns it to the MaxFcFcoePortChannels field.
func (o *CapabilitySwitchCapability) SetMaxFcFcoePortChannels(v int64) {
	o.MaxFcFcoePortChannels = &v
}

// GetMaxFcPortChannelMembers returns the MaxFcPortChannelMembers field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetMaxFcPortChannelMembers() int64 {
	if o == nil || o.MaxFcPortChannelMembers == nil {
		var ret int64
		return ret
	}
	return *o.MaxFcPortChannelMembers
}

// GetMaxFcPortChannelMembersOk returns a tuple with the MaxFcPortChannelMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetMaxFcPortChannelMembersOk() (*int64, bool) {
	if o == nil || o.MaxFcPortChannelMembers == nil {
		return nil, false
	}
	return o.MaxFcPortChannelMembers, true
}

// HasMaxFcPortChannelMembers returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasMaxFcPortChannelMembers() bool {
	if o != nil && o.MaxFcPortChannelMembers != nil {
		return true
	}

	return false
}

// SetMaxFcPortChannelMembers gets a reference to the given int64 and assigns it to the MaxFcPortChannelMembers field.
func (o *CapabilitySwitchCapability) SetMaxFcPortChannelMembers(v int64) {
	o.MaxFcPortChannelMembers = &v
}

// GetMaxFcoePortChannelMembers returns the MaxFcoePortChannelMembers field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetMaxFcoePortChannelMembers() int64 {
	if o == nil || o.MaxFcoePortChannelMembers == nil {
		var ret int64
		return ret
	}
	return *o.MaxFcoePortChannelMembers
}

// GetMaxFcoePortChannelMembersOk returns a tuple with the MaxFcoePortChannelMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetMaxFcoePortChannelMembersOk() (*int64, bool) {
	if o == nil || o.MaxFcoePortChannelMembers == nil {
		return nil, false
	}
	return o.MaxFcoePortChannelMembers, true
}

// HasMaxFcoePortChannelMembers returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasMaxFcoePortChannelMembers() bool {
	if o != nil && o.MaxFcoePortChannelMembers != nil {
		return true
	}

	return false
}

// SetMaxFcoePortChannelMembers gets a reference to the given int64 and assigns it to the MaxFcoePortChannelMembers field.
func (o *CapabilitySwitchCapability) SetMaxFcoePortChannelMembers(v int64) {
	o.MaxFcoePortChannelMembers = &v
}

// GetMaxPorts returns the MaxPorts field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetMaxPorts() int64 {
	if o == nil || o.MaxPorts == nil {
		var ret int64
		return ret
	}
	return *o.MaxPorts
}

// GetMaxPortsOk returns a tuple with the MaxPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetMaxPortsOk() (*int64, bool) {
	if o == nil || o.MaxPorts == nil {
		return nil, false
	}
	return o.MaxPorts, true
}

// HasMaxPorts returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasMaxPorts() bool {
	if o != nil && o.MaxPorts != nil {
		return true
	}

	return false
}

// SetMaxPorts gets a reference to the given int64 and assigns it to the MaxPorts field.
func (o *CapabilitySwitchCapability) SetMaxPorts(v int64) {
	o.MaxPorts = &v
}

// GetMaxSlots returns the MaxSlots field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetMaxSlots() int64 {
	if o == nil || o.MaxSlots == nil {
		var ret int64
		return ret
	}
	return *o.MaxSlots
}

// GetMaxSlotsOk returns a tuple with the MaxSlots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetMaxSlotsOk() (*int64, bool) {
	if o == nil || o.MaxSlots == nil {
		return nil, false
	}
	return o.MaxSlots, true
}

// HasMaxSlots returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasMaxSlots() bool {
	if o != nil && o.MaxSlots != nil {
		return true
	}

	return false
}

// SetMaxSlots gets a reference to the given int64 and assigns it to the MaxSlots field.
func (o *CapabilitySwitchCapability) SetMaxSlots(v int64) {
	o.MaxSlots = &v
}

// GetMaxVsansSupported returns the MaxVsansSupported field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetMaxVsansSupported() int64 {
	if o == nil || o.MaxVsansSupported == nil {
		var ret int64
		return ret
	}
	return *o.MaxVsansSupported
}

// GetMaxVsansSupportedOk returns a tuple with the MaxVsansSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetMaxVsansSupportedOk() (*int64, bool) {
	if o == nil || o.MaxVsansSupported == nil {
		return nil, false
	}
	return o.MaxVsansSupported, true
}

// HasMaxVsansSupported returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasMaxVsansSupported() bool {
	if o != nil && o.MaxVsansSupported != nil {
		return true
	}

	return false
}

// SetMaxVsansSupported gets a reference to the given int64 and assigns it to the MaxVsansSupported field.
func (o *CapabilitySwitchCapability) SetMaxVsansSupported(v int64) {
	o.MaxVsansSupported = &v
}

// GetMinActiveFans returns the MinActiveFans field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetMinActiveFans() int64 {
	if o == nil || o.MinActiveFans == nil {
		var ret int64
		return ret
	}
	return *o.MinActiveFans
}

// GetMinActiveFansOk returns a tuple with the MinActiveFans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetMinActiveFansOk() (*int64, bool) {
	if o == nil || o.MinActiveFans == nil {
		return nil, false
	}
	return o.MinActiveFans, true
}

// HasMinActiveFans returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasMinActiveFans() bool {
	if o != nil && o.MinActiveFans != nil {
		return true
	}

	return false
}

// SetMinActiveFans gets a reference to the given int64 and assigns it to the MinActiveFans field.
func (o *CapabilitySwitchCapability) SetMinActiveFans(v int64) {
	o.MinActiveFans = &v
}

// GetPortsSupporting100gSpeed returns the PortsSupporting100gSpeed field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetPortsSupporting100gSpeed() []CapabilityPortRange {
	if o == nil || o.PortsSupporting100gSpeed == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return *o.PortsSupporting100gSpeed
}

// GetPortsSupporting100gSpeedOk returns a tuple with the PortsSupporting100gSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetPortsSupporting100gSpeedOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.PortsSupporting100gSpeed == nil {
		return nil, false
	}
	return o.PortsSupporting100gSpeed, true
}

// HasPortsSupporting100gSpeed returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasPortsSupporting100gSpeed() bool {
	if o != nil && o.PortsSupporting100gSpeed != nil {
		return true
	}

	return false
}

// SetPortsSupporting100gSpeed gets a reference to the given []CapabilityPortRange and assigns it to the PortsSupporting100gSpeed field.
func (o *CapabilitySwitchCapability) SetPortsSupporting100gSpeed(v []CapabilityPortRange) {
	o.PortsSupporting100gSpeed = &v
}

// GetPortsSupporting10gSpeed returns the PortsSupporting10gSpeed field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetPortsSupporting10gSpeed() []CapabilityPortRange {
	if o == nil || o.PortsSupporting10gSpeed == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return *o.PortsSupporting10gSpeed
}

// GetPortsSupporting10gSpeedOk returns a tuple with the PortsSupporting10gSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetPortsSupporting10gSpeedOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.PortsSupporting10gSpeed == nil {
		return nil, false
	}
	return o.PortsSupporting10gSpeed, true
}

// HasPortsSupporting10gSpeed returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasPortsSupporting10gSpeed() bool {
	if o != nil && o.PortsSupporting10gSpeed != nil {
		return true
	}

	return false
}

// SetPortsSupporting10gSpeed gets a reference to the given []CapabilityPortRange and assigns it to the PortsSupporting10gSpeed field.
func (o *CapabilitySwitchCapability) SetPortsSupporting10gSpeed(v []CapabilityPortRange) {
	o.PortsSupporting10gSpeed = &v
}

// GetPortsSupporting1gSpeed returns the PortsSupporting1gSpeed field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetPortsSupporting1gSpeed() []CapabilityPortRange {
	if o == nil || o.PortsSupporting1gSpeed == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return *o.PortsSupporting1gSpeed
}

// GetPortsSupporting1gSpeedOk returns a tuple with the PortsSupporting1gSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetPortsSupporting1gSpeedOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.PortsSupporting1gSpeed == nil {
		return nil, false
	}
	return o.PortsSupporting1gSpeed, true
}

// HasPortsSupporting1gSpeed returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasPortsSupporting1gSpeed() bool {
	if o != nil && o.PortsSupporting1gSpeed != nil {
		return true
	}

	return false
}

// SetPortsSupporting1gSpeed gets a reference to the given []CapabilityPortRange and assigns it to the PortsSupporting1gSpeed field.
func (o *CapabilitySwitchCapability) SetPortsSupporting1gSpeed(v []CapabilityPortRange) {
	o.PortsSupporting1gSpeed = &v
}

// GetPortsSupporting25gSpeed returns the PortsSupporting25gSpeed field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetPortsSupporting25gSpeed() []CapabilityPortRange {
	if o == nil || o.PortsSupporting25gSpeed == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return *o.PortsSupporting25gSpeed
}

// GetPortsSupporting25gSpeedOk returns a tuple with the PortsSupporting25gSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetPortsSupporting25gSpeedOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.PortsSupporting25gSpeed == nil {
		return nil, false
	}
	return o.PortsSupporting25gSpeed, true
}

// HasPortsSupporting25gSpeed returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasPortsSupporting25gSpeed() bool {
	if o != nil && o.PortsSupporting25gSpeed != nil {
		return true
	}

	return false
}

// SetPortsSupporting25gSpeed gets a reference to the given []CapabilityPortRange and assigns it to the PortsSupporting25gSpeed field.
func (o *CapabilitySwitchCapability) SetPortsSupporting25gSpeed(v []CapabilityPortRange) {
	o.PortsSupporting25gSpeed = &v
}

// GetPortsSupporting40gSpeed returns the PortsSupporting40gSpeed field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetPortsSupporting40gSpeed() []CapabilityPortRange {
	if o == nil || o.PortsSupporting40gSpeed == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return *o.PortsSupporting40gSpeed
}

// GetPortsSupporting40gSpeedOk returns a tuple with the PortsSupporting40gSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetPortsSupporting40gSpeedOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.PortsSupporting40gSpeed == nil {
		return nil, false
	}
	return o.PortsSupporting40gSpeed, true
}

// HasPortsSupporting40gSpeed returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasPortsSupporting40gSpeed() bool {
	if o != nil && o.PortsSupporting40gSpeed != nil {
		return true
	}

	return false
}

// SetPortsSupporting40gSpeed gets a reference to the given []CapabilityPortRange and assigns it to the PortsSupporting40gSpeed field.
func (o *CapabilitySwitchCapability) SetPortsSupporting40gSpeed(v []CapabilityPortRange) {
	o.PortsSupporting40gSpeed = &v
}

// GetPortsSupportingBreakout returns the PortsSupportingBreakout field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetPortsSupportingBreakout() []CapabilityPortRange {
	if o == nil || o.PortsSupportingBreakout == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return *o.PortsSupportingBreakout
}

// GetPortsSupportingBreakoutOk returns a tuple with the PortsSupportingBreakout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetPortsSupportingBreakoutOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.PortsSupportingBreakout == nil {
		return nil, false
	}
	return o.PortsSupportingBreakout, true
}

// HasPortsSupportingBreakout returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasPortsSupportingBreakout() bool {
	if o != nil && o.PortsSupportingBreakout != nil {
		return true
	}

	return false
}

// SetPortsSupportingBreakout gets a reference to the given []CapabilityPortRange and assigns it to the PortsSupportingBreakout field.
func (o *CapabilitySwitchCapability) SetPortsSupportingBreakout(v []CapabilityPortRange) {
	o.PortsSupportingBreakout = &v
}

// GetPortsSupportingFcoe returns the PortsSupportingFcoe field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetPortsSupportingFcoe() []CapabilityPortRange {
	if o == nil || o.PortsSupportingFcoe == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return *o.PortsSupportingFcoe
}

// GetPortsSupportingFcoeOk returns a tuple with the PortsSupportingFcoe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetPortsSupportingFcoeOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.PortsSupportingFcoe == nil {
		return nil, false
	}
	return o.PortsSupportingFcoe, true
}

// HasPortsSupportingFcoe returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasPortsSupportingFcoe() bool {
	if o != nil && o.PortsSupportingFcoe != nil {
		return true
	}

	return false
}

// SetPortsSupportingFcoe gets a reference to the given []CapabilityPortRange and assigns it to the PortsSupportingFcoe field.
func (o *CapabilitySwitchCapability) SetPortsSupportingFcoe(v []CapabilityPortRange) {
	o.PortsSupportingFcoe = &v
}

// GetPortsSupportingServerRole returns the PortsSupportingServerRole field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetPortsSupportingServerRole() []CapabilityPortRange {
	if o == nil || o.PortsSupportingServerRole == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return *o.PortsSupportingServerRole
}

// GetPortsSupportingServerRoleOk returns a tuple with the PortsSupportingServerRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetPortsSupportingServerRoleOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.PortsSupportingServerRole == nil {
		return nil, false
	}
	return o.PortsSupportingServerRole, true
}

// HasPortsSupportingServerRole returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasPortsSupportingServerRole() bool {
	if o != nil && o.PortsSupportingServerRole != nil {
		return true
	}

	return false
}

// SetPortsSupportingServerRole gets a reference to the given []CapabilityPortRange and assigns it to the PortsSupportingServerRole field.
func (o *CapabilitySwitchCapability) SetPortsSupportingServerRole(v []CapabilityPortRange) {
	o.PortsSupportingServerRole = &v
}

// GetReservedVsans returns the ReservedVsans field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetReservedVsans() []CapabilityPortRange {
	if o == nil || o.ReservedVsans == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return *o.ReservedVsans
}

// GetReservedVsansOk returns a tuple with the ReservedVsans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetReservedVsansOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.ReservedVsans == nil {
		return nil, false
	}
	return o.ReservedVsans, true
}

// HasReservedVsans returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasReservedVsans() bool {
	if o != nil && o.ReservedVsans != nil {
		return true
	}

	return false
}

// SetReservedVsans gets a reference to the given []CapabilityPortRange and assigns it to the ReservedVsans field.
func (o *CapabilitySwitchCapability) SetReservedVsans(v []CapabilityPortRange) {
	o.ReservedVsans = &v
}

// GetSerenoNetflowSupported returns the SerenoNetflowSupported field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetSerenoNetflowSupported() bool {
	if o == nil || o.SerenoNetflowSupported == nil {
		var ret bool
		return ret
	}
	return *o.SerenoNetflowSupported
}

// GetSerenoNetflowSupportedOk returns a tuple with the SerenoNetflowSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetSerenoNetflowSupportedOk() (*bool, bool) {
	if o == nil || o.SerenoNetflowSupported == nil {
		return nil, false
	}
	return o.SerenoNetflowSupported, true
}

// HasSerenoNetflowSupported returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasSerenoNetflowSupported() bool {
	if o != nil && o.SerenoNetflowSupported != nil {
		return true
	}

	return false
}

// SetSerenoNetflowSupported gets a reference to the given bool and assigns it to the SerenoNetflowSupported field.
func (o *CapabilitySwitchCapability) SetSerenoNetflowSupported(v bool) {
	o.SerenoNetflowSupported = &v
}

// GetUnifiedPorts returns the UnifiedPorts field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetUnifiedPorts() []CapabilityPortRange {
	if o == nil || o.UnifiedPorts == nil {
		var ret []CapabilityPortRange
		return ret
	}
	return *o.UnifiedPorts
}

// GetUnifiedPortsOk returns a tuple with the UnifiedPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetUnifiedPortsOk() (*[]CapabilityPortRange, bool) {
	if o == nil || o.UnifiedPorts == nil {
		return nil, false
	}
	return o.UnifiedPorts, true
}

// HasUnifiedPorts returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasUnifiedPorts() bool {
	if o != nil && o.UnifiedPorts != nil {
		return true
	}

	return false
}

// SetUnifiedPorts gets a reference to the given []CapabilityPortRange and assigns it to the UnifiedPorts field.
func (o *CapabilitySwitchCapability) SetUnifiedPorts(v []CapabilityPortRange) {
	o.UnifiedPorts = &v
}

// GetUnifiedRule returns the UnifiedRule field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetUnifiedRule() string {
	if o == nil || o.UnifiedRule == nil {
		var ret string
		return ret
	}
	return *o.UnifiedRule
}

// GetUnifiedRuleOk returns a tuple with the UnifiedRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetUnifiedRuleOk() (*string, bool) {
	if o == nil || o.UnifiedRule == nil {
		return nil, false
	}
	return o.UnifiedRule, true
}

// HasUnifiedRule returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasUnifiedRule() bool {
	if o != nil && o.UnifiedRule != nil {
		return true
	}

	return false
}

// SetUnifiedRule gets a reference to the given string and assigns it to the UnifiedRule field.
func (o *CapabilitySwitchCapability) SetUnifiedRule(v string) {
	o.UnifiedRule = &v
}

// GetVpCompressionSupported returns the VpCompressionSupported field value if set, zero value otherwise.
func (o *CapabilitySwitchCapability) GetVpCompressionSupported() bool {
	if o == nil || o.VpCompressionSupported == nil {
		var ret bool
		return ret
	}
	return *o.VpCompressionSupported
}

// GetVpCompressionSupportedOk returns a tuple with the VpCompressionSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySwitchCapability) GetVpCompressionSupportedOk() (*bool, bool) {
	if o == nil || o.VpCompressionSupported == nil {
		return nil, false
	}
	return o.VpCompressionSupported, true
}

// HasVpCompressionSupported returns a boolean if a field has been set.
func (o *CapabilitySwitchCapability) HasVpCompressionSupported() bool {
	if o != nil && o.VpCompressionSupported != nil {
		return true
	}

	return false
}

// SetVpCompressionSupported gets a reference to the given bool and assigns it to the VpCompressionSupported field.
func (o *CapabilitySwitchCapability) SetVpCompressionSupported(v bool) {
	o.VpCompressionSupported = &v
}

func (o CapabilitySwitchCapability) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedCapabilitySwitchCapabilityDef, errCapabilitySwitchCapabilityDef := json.Marshal(o.CapabilitySwitchCapabilityDef)
	if errCapabilitySwitchCapabilityDef != nil {
		return []byte{}, errCapabilitySwitchCapabilityDef
	}
	errCapabilitySwitchCapabilityDef = json.Unmarshal([]byte(serializedCapabilitySwitchCapabilityDef), &toSerialize)
	if errCapabilitySwitchCapabilityDef != nil {
		return []byte{}, errCapabilitySwitchCapabilityDef
	}
	if o.DynamicVifsSupported != nil {
		toSerialize["DynamicVifsSupported"] = o.DynamicVifsSupported
	}
	if o.FanModulesSupported != nil {
		toSerialize["FanModulesSupported"] = o.FanModulesSupported
	}
	if o.FcEndHostModeReservedVsans != nil {
		toSerialize["FcEndHostModeReservedVsans"] = o.FcEndHostModeReservedVsans
	}
	if o.FcUplinkPortsAutoNegotiationSupported != nil {
		toSerialize["FcUplinkPortsAutoNegotiationSupported"] = o.FcUplinkPortsAutoNegotiationSupported
	}
	if o.LocatorBeaconSupported != nil {
		toSerialize["LocatorBeaconSupported"] = o.LocatorBeaconSupported
	}
	if o.MaxActiveSpanSessions != nil {
		toSerialize["MaxActiveSpanSessions"] = o.MaxActiveSpanSessions
	}
	if o.MaxEthernetPortChannelMembers != nil {
		toSerialize["MaxEthernetPortChannelMembers"] = o.MaxEthernetPortChannelMembers
	}
	if o.MaxEthernetPortChannels != nil {
		toSerialize["MaxEthernetPortChannels"] = o.MaxEthernetPortChannels
	}
	if o.MaxEthernetUplinkPorts != nil {
		toSerialize["MaxEthernetUplinkPorts"] = o.MaxEthernetUplinkPorts
	}
	if o.MaxFcFcoePortChannels != nil {
		toSerialize["MaxFcFcoePortChannels"] = o.MaxFcFcoePortChannels
	}
	if o.MaxFcPortChannelMembers != nil {
		toSerialize["MaxFcPortChannelMembers"] = o.MaxFcPortChannelMembers
	}
	if o.MaxFcoePortChannelMembers != nil {
		toSerialize["MaxFcoePortChannelMembers"] = o.MaxFcoePortChannelMembers
	}
	if o.MaxPorts != nil {
		toSerialize["MaxPorts"] = o.MaxPorts
	}
	if o.MaxSlots != nil {
		toSerialize["MaxSlots"] = o.MaxSlots
	}
	if o.MaxVsansSupported != nil {
		toSerialize["MaxVsansSupported"] = o.MaxVsansSupported
	}
	if o.MinActiveFans != nil {
		toSerialize["MinActiveFans"] = o.MinActiveFans
	}
	if o.PortsSupporting100gSpeed != nil {
		toSerialize["PortsSupporting100gSpeed"] = o.PortsSupporting100gSpeed
	}
	if o.PortsSupporting10gSpeed != nil {
		toSerialize["PortsSupporting10gSpeed"] = o.PortsSupporting10gSpeed
	}
	if o.PortsSupporting1gSpeed != nil {
		toSerialize["PortsSupporting1gSpeed"] = o.PortsSupporting1gSpeed
	}
	if o.PortsSupporting25gSpeed != nil {
		toSerialize["PortsSupporting25gSpeed"] = o.PortsSupporting25gSpeed
	}
	if o.PortsSupporting40gSpeed != nil {
		toSerialize["PortsSupporting40gSpeed"] = o.PortsSupporting40gSpeed
	}
	if o.PortsSupportingBreakout != nil {
		toSerialize["PortsSupportingBreakout"] = o.PortsSupportingBreakout
	}
	if o.PortsSupportingFcoe != nil {
		toSerialize["PortsSupportingFcoe"] = o.PortsSupportingFcoe
	}
	if o.PortsSupportingServerRole != nil {
		toSerialize["PortsSupportingServerRole"] = o.PortsSupportingServerRole
	}
	if o.ReservedVsans != nil {
		toSerialize["ReservedVsans"] = o.ReservedVsans
	}
	if o.SerenoNetflowSupported != nil {
		toSerialize["SerenoNetflowSupported"] = o.SerenoNetflowSupported
	}
	if o.UnifiedPorts != nil {
		toSerialize["UnifiedPorts"] = o.UnifiedPorts
	}
	if o.UnifiedRule != nil {
		toSerialize["UnifiedRule"] = o.UnifiedRule
	}
	if o.VpCompressionSupported != nil {
		toSerialize["VpCompressionSupported"] = o.VpCompressionSupported
	}
	return json.Marshal(toSerialize)
}

type NullableCapabilitySwitchCapability struct {
	value *CapabilitySwitchCapability
	isSet bool
}

func (v NullableCapabilitySwitchCapability) Get() *CapabilitySwitchCapability {
	return v.value
}

func (v *NullableCapabilitySwitchCapability) Set(val *CapabilitySwitchCapability) {
	v.value = val
	v.isSet = true
}

func (v NullableCapabilitySwitchCapability) IsSet() bool {
	return v.isSet
}

func (v *NullableCapabilitySwitchCapability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapabilitySwitchCapability(val *CapabilitySwitchCapability) *NullableCapabilitySwitchCapability {
	return &NullableCapabilitySwitchCapability{value: val, isSet: true}
}

func (v NullableCapabilitySwitchCapability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapabilitySwitchCapability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
