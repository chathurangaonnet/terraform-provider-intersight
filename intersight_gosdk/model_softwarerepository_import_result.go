/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-19T15:15:17Z.
 *
 * API version: 1.0.9-1903
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// SoftwarerepositoryImportResult The status of the import operation.
type SoftwarerepositoryImportResult struct {
	MoBaseComplexType
	// The reason for the failure of an import operation, if applicable.
	ErrorMessage *string `json:"ErrorMessage,omitempty"`
	// The progress percentage for the import operation.
	Progress *int64 `json:"Progress,omitempty"`
}

// NewSoftwarerepositoryImportResult instantiates a new SoftwarerepositoryImportResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoftwarerepositoryImportResult() *SoftwarerepositoryImportResult {
	this := SoftwarerepositoryImportResult{}
	return &this
}

// NewSoftwarerepositoryImportResultWithDefaults instantiates a new SoftwarerepositoryImportResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoftwarerepositoryImportResultWithDefaults() *SoftwarerepositoryImportResult {
	this := SoftwarerepositoryImportResult{}
	return &this
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *SoftwarerepositoryImportResult) GetErrorMessage() string {
	if o == nil || o.ErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwarerepositoryImportResult) GetErrorMessageOk() (*string, bool) {
	if o == nil || o.ErrorMessage == nil {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *SoftwarerepositoryImportResult) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage != nil {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *SoftwarerepositoryImportResult) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *SoftwarerepositoryImportResult) GetProgress() int64 {
	if o == nil || o.Progress == nil {
		var ret int64
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwarerepositoryImportResult) GetProgressOk() (*int64, bool) {
	if o == nil || o.Progress == nil {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *SoftwarerepositoryImportResult) HasProgress() bool {
	if o != nil && o.Progress != nil {
		return true
	}

	return false
}

// SetProgress gets a reference to the given int64 and assigns it to the Progress field.
func (o *SoftwarerepositoryImportResult) SetProgress(v int64) {
	o.Progress = &v
}

func (o SoftwarerepositoryImportResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return []byte{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return []byte{}, errMoBaseComplexType
	}
	if o.ErrorMessage != nil {
		toSerialize["ErrorMessage"] = o.ErrorMessage
	}
	if o.Progress != nil {
		toSerialize["Progress"] = o.Progress
	}
	return json.Marshal(toSerialize)
}

type NullableSoftwarerepositoryImportResult struct {
	value *SoftwarerepositoryImportResult
	isSet bool
}

func (v NullableSoftwarerepositoryImportResult) Get() *SoftwarerepositoryImportResult {
	return v.value
}

func (v *NullableSoftwarerepositoryImportResult) Set(val *SoftwarerepositoryImportResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftwarerepositoryImportResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftwarerepositoryImportResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftwarerepositoryImportResult(val *SoftwarerepositoryImportResult) *NullableSoftwarerepositoryImportResult {
	return &NullableSoftwarerepositoryImportResult{value: val, isSet: true}
}

func (v NullableSoftwarerepositoryImportResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftwarerepositoryImportResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
