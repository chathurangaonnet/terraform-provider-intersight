/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-04-12T21:47:47-07:00.
 *
 * API version: 1.0.9-1617
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// FcPhysicalPort Physical fibre channel port present on a FI.
type FcPhysicalPort struct {
	PortPhysical
	// PeerDn for fibre channel physical port.
	PeerDn           *string                              `json:"PeerDn,omitempty"`
	TransceiverType  *string                              `json:"TransceiverType,omitempty"`
	Wwn              *string                              `json:"Wwn,omitempty"`
	PortGroup        *PortGroupRelationship               `json:"PortGroup,omitempty"`
	RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
}

// NewFcPhysicalPort instantiates a new FcPhysicalPort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFcPhysicalPort() *FcPhysicalPort {
	this := FcPhysicalPort{}
	return &this
}

// NewFcPhysicalPortWithDefaults instantiates a new FcPhysicalPort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFcPhysicalPortWithDefaults() *FcPhysicalPort {
	this := FcPhysicalPort{}
	return &this
}

// GetPeerDn returns the PeerDn field value if set, zero value otherwise.
func (o *FcPhysicalPort) GetPeerDn() string {
	if o == nil || o.PeerDn == nil {
		var ret string
		return ret
	}
	return *o.PeerDn
}

// GetPeerDnOk returns a tuple with the PeerDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPhysicalPort) GetPeerDnOk() (*string, bool) {
	if o == nil || o.PeerDn == nil {
		return nil, false
	}
	return o.PeerDn, true
}

// HasPeerDn returns a boolean if a field has been set.
func (o *FcPhysicalPort) HasPeerDn() bool {
	if o != nil && o.PeerDn != nil {
		return true
	}

	return false
}

// SetPeerDn gets a reference to the given string and assigns it to the PeerDn field.
func (o *FcPhysicalPort) SetPeerDn(v string) {
	o.PeerDn = &v
}

// GetTransceiverType returns the TransceiverType field value if set, zero value otherwise.
func (o *FcPhysicalPort) GetTransceiverType() string {
	if o == nil || o.TransceiverType == nil {
		var ret string
		return ret
	}
	return *o.TransceiverType
}

// GetTransceiverTypeOk returns a tuple with the TransceiverType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPhysicalPort) GetTransceiverTypeOk() (*string, bool) {
	if o == nil || o.TransceiverType == nil {
		return nil, false
	}
	return o.TransceiverType, true
}

// HasTransceiverType returns a boolean if a field has been set.
func (o *FcPhysicalPort) HasTransceiverType() bool {
	if o != nil && o.TransceiverType != nil {
		return true
	}

	return false
}

// SetTransceiverType gets a reference to the given string and assigns it to the TransceiverType field.
func (o *FcPhysicalPort) SetTransceiverType(v string) {
	o.TransceiverType = &v
}

// GetWwn returns the Wwn field value if set, zero value otherwise.
func (o *FcPhysicalPort) GetWwn() string {
	if o == nil || o.Wwn == nil {
		var ret string
		return ret
	}
	return *o.Wwn
}

// GetWwnOk returns a tuple with the Wwn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPhysicalPort) GetWwnOk() (*string, bool) {
	if o == nil || o.Wwn == nil {
		return nil, false
	}
	return o.Wwn, true
}

// HasWwn returns a boolean if a field has been set.
func (o *FcPhysicalPort) HasWwn() bool {
	if o != nil && o.Wwn != nil {
		return true
	}

	return false
}

// SetWwn gets a reference to the given string and assigns it to the Wwn field.
func (o *FcPhysicalPort) SetWwn(v string) {
	o.Wwn = &v
}

// GetPortGroup returns the PortGroup field value if set, zero value otherwise.
func (o *FcPhysicalPort) GetPortGroup() PortGroupRelationship {
	if o == nil || o.PortGroup == nil {
		var ret PortGroupRelationship
		return ret
	}
	return *o.PortGroup
}

// GetPortGroupOk returns a tuple with the PortGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPhysicalPort) GetPortGroupOk() (*PortGroupRelationship, bool) {
	if o == nil || o.PortGroup == nil {
		return nil, false
	}
	return o.PortGroup, true
}

// HasPortGroup returns a boolean if a field has been set.
func (o *FcPhysicalPort) HasPortGroup() bool {
	if o != nil && o.PortGroup != nil {
		return true
	}

	return false
}

// SetPortGroup gets a reference to the given PortGroupRelationship and assigns it to the PortGroup field.
func (o *FcPhysicalPort) SetPortGroup(v PortGroupRelationship) {
	o.PortGroup = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *FcPhysicalPort) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcPhysicalPort) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *FcPhysicalPort) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *FcPhysicalPort) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

func (o FcPhysicalPort) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedPortPhysical, errPortPhysical := json.Marshal(o.PortPhysical)
	if errPortPhysical != nil {
		return []byte{}, errPortPhysical
	}
	errPortPhysical = json.Unmarshal([]byte(serializedPortPhysical), &toSerialize)
	if errPortPhysical != nil {
		return []byte{}, errPortPhysical
	}
	if o.PeerDn != nil {
		toSerialize["PeerDn"] = o.PeerDn
	}
	if o.TransceiverType != nil {
		toSerialize["TransceiverType"] = o.TransceiverType
	}
	if o.Wwn != nil {
		toSerialize["Wwn"] = o.Wwn
	}
	if o.PortGroup != nil {
		toSerialize["PortGroup"] = o.PortGroup
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}
	return json.Marshal(toSerialize)
}

// AsFcPhysicalPortRelationship wraps this instance of FcPhysicalPort in FcPhysicalPortRelationship
func (s *FcPhysicalPort) AsFcPhysicalPortRelationship() FcPhysicalPortRelationship {
	return FcPhysicalPortRelationship{FcPhysicalPortRelationshipInterface: s}
}

type NullableFcPhysicalPort struct {
	value *FcPhysicalPort
	isSet bool
}

func (v NullableFcPhysicalPort) Get() *FcPhysicalPort {
	return v.value
}

func (v *NullableFcPhysicalPort) Set(val *FcPhysicalPort) {
	v.value = val
	v.isSet = true
}

func (v NullableFcPhysicalPort) IsSet() bool {
	return v.isSet
}

func (v *NullableFcPhysicalPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFcPhysicalPort(val *FcPhysicalPort) *NullableFcPhysicalPort {
	return &NullableFcPhysicalPort{value: val, isSet: true}
}

func (v NullableFcPhysicalPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFcPhysicalPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
