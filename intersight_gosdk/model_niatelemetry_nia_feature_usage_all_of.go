/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-08T07:46:03Z.
 *
 * API version: 0.0.1-15983
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// NiatelemetryNiaFeatureUsageAllOf Definition of the list of properties defined in 'niatelemetry.NiaFeatureUsage', excluding properties defined in parent classes.
type NiatelemetryNiaFeatureUsageAllOf struct {
	// Number of APIC controllers. This determines the value of controllers for the fabric.
	ApicCount *int64 `json:"ApicCount,omitempty"`
	// ACI APPs feature usage. This determines the total number of apps installed on the fabric.
	AppCenterCount *int64 `json:"AppCenterCount,omitempty"`
	// AVE feature usage. This determines if ACI virtual edge feature is enabled or disabled.
	Ave *string `json:"Ave,omitempty"`
	// Number of BDs. This determines the total number of Broadcast Domains across the fabric.
	BdCount *int64 `json:"BdCount,omitempty"`
	// Consistency checker application usage. This determines if the fabric has Consistency checker application installed.
	ConsistencyCheckerApp *string `json:"ConsistencyCheckerApp,omitempty"`
	// Number of contracts. This determines the total number of Contracts configured across the fabric.
	ContractCount *int64 `json:"ContractCount,omitempty"`
	// DNS feature usage. This determines the total number of DNS configurations across the fabric.
	DnsCount *int64 `json:"DnsCount,omitempty"`
	// Eigrp feature usage. This determines the total number of EIGRP sessions across the fabric.
	EigrpCount *int64 `json:"EigrpCount,omitempty"`
	// Number of EPGs. This determines the total number of End Point Groups across the fabric.
	EpgCount *int64 `json:"EpgCount,omitempty"`
	// Hsrp feature usage. This determines the total number of HSRP sessions across the fabric.
	HsrpCount *int64 `json:"HsrpCount,omitempty"`
	// Ibgp feature usage. This determines the total number of BGP sessions across the fabric.
	IbgpCount *int64 `json:"IbgpCount,omitempty"`
	// IGMP Access List feature usage. This determines the total number of IGMP access lists configured across the fabric.
	IgmpAccessListCount *int64 `json:"IgmpAccessListCount,omitempty"`
	// IGMP Snooping feature usage. This determines if this feature is enabled or disabled.
	IgmpSnoop *string `json:"IgmpSnoop,omitempty"`
	// Number of IP based EPGs. This determines the total number of IP End Point Groups across the fabric.
	IpEpgCount *int64 `json:"IpEpgCount,omitempty"`
	// Isis feature usage. TThis determines the total number of ISIS sessions across the fabric.
	IsisCount *int64 `json:"IsisCount,omitempty"`
	// L2Multicast feature usage. This determines if this Layer 2 Multicast feature is being enabled / disabled on the fabric.
	L2Multicast *string `json:"L2Multicast,omitempty"`
	// Number of Leafs. This determines the total number of Leaf switches in the fabric.
	LeafCount *int64 `json:"LeafCount,omitempty"`
	// Maintenance Mode feature usage. This determines the number of switches that are currently in maintenance mode.
	MaintenanceModeCount *int64 `json:"MaintenanceModeCount,omitempty"`
	// Management over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
	ManagementOverV6Count *int64 `json:"ManagementOverV6Count,omitempty"`
	// NIR application usage. This determines if the fabric has NIR application installed.
	Nir *string `json:"Nir,omitempty"`
	// Opflex for Kubernetes feature usage. This determines the total number of VMM sessions of type kubernetes.
	OpflexKubernetesCount *int64 `json:"OpflexKubernetesCount,omitempty"`
	// Ospf feature usage. This determines the total number of OSPF sessions across the fabric.
	OspfCount *int64 `json:"OspfCount,omitempty"`
	// POE feature usage. This determines the total number of POE configurations across the fabric.
	PoeCount *int64 `json:"PoeCount,omitempty"`
	// QinVniTunnel feature usage. This determines if the qinVniTunnel feature is being used on the fabric and the scale of it.
	QinVniTunnelCount *int64 `json:"QinVniTunnelCount,omitempty"`
	// Number of remote Leafs. This determines if this feature is being enabled or disabled.
	RemoteLeafCount *int64 `json:"RemoteLeafCount,omitempty"`
	// SCVMM feature usage. This determines the total number of SCVMM configurations in the fabric.
	ScvmmCount *int64 `json:"ScvmmCount,omitempty"`
	// SharedL3Out feature usage. This determines the total number of Shared L3 out configured across the fabric.
	SharedL3OutCount *int64 `json:"SharedL3OutCount,omitempty"`
	// Smart callhome feature usage. This determines if this feature is being enabled or disabled.
	SmartCallHome *string `json:"SmartCallHome,omitempty"`
	// SNMP feature usage. This determines if this feature is enabled or disabled.
	Snmp *string `json:"Snmp,omitempty"`
	// Number of Spines. This determines the total number of spine switches in the fabric.
	SpineCount *int64 `json:"SpineCount,omitempty"`
	// Ssh over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
	SshOverV6Count *int64 `json:"SshOverV6Count,omitempty"`
	// Syslog over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
	SyslogOverV6Count *int64 `json:"SyslogOverV6Count,omitempty"`
	// Number of tenants. This determines the total number of tenants configured across the fabric.
	TenantCount *int64 `json:"TenantCount,omitempty"`
	// Number of tier 2 Leafs. This determines the total number of tier 2 Leaf switches in the fabric.
	TierTwoLeafCount *int64 `json:"TierTwoLeafCount,omitempty"`
	// TWAMP feature usage. This determines if this feature is enabled or disabled.
	Twamp *string `json:"Twamp,omitempty"`
	// VMM uSegmentation feature usage. This determines if microsegmentation feature is enabled or disabled.
	Useg *string `json:"Useg,omitempty"`
	// Virtual pod feature usage. This determines the total number of virtual POD configurations in the fabrics.
	VpodCount        *int64                               `json:"VpodCount,omitempty"`
	RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
}

// NewNiatelemetryNiaFeatureUsageAllOf instantiates a new NiatelemetryNiaFeatureUsageAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNiatelemetryNiaFeatureUsageAllOf() *NiatelemetryNiaFeatureUsageAllOf {
	this := NiatelemetryNiaFeatureUsageAllOf{}
	return &this
}

// NewNiatelemetryNiaFeatureUsageAllOfWithDefaults instantiates a new NiatelemetryNiaFeatureUsageAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNiatelemetryNiaFeatureUsageAllOfWithDefaults() *NiatelemetryNiaFeatureUsageAllOf {
	this := NiatelemetryNiaFeatureUsageAllOf{}
	return &this
}

// GetApicCount returns the ApicCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetApicCount() int64 {
	if o == nil || o.ApicCount == nil {
		var ret int64
		return ret
	}
	return *o.ApicCount
}

// GetApicCountOk returns a tuple with the ApicCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetApicCountOk() (*int64, bool) {
	if o == nil || o.ApicCount == nil {
		return nil, false
	}
	return o.ApicCount, true
}

// HasApicCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasApicCount() bool {
	if o != nil && o.ApicCount != nil {
		return true
	}

	return false
}

// SetApicCount gets a reference to the given int64 and assigns it to the ApicCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetApicCount(v int64) {
	o.ApicCount = &v
}

// GetAppCenterCount returns the AppCenterCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetAppCenterCount() int64 {
	if o == nil || o.AppCenterCount == nil {
		var ret int64
		return ret
	}
	return *o.AppCenterCount
}

// GetAppCenterCountOk returns a tuple with the AppCenterCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetAppCenterCountOk() (*int64, bool) {
	if o == nil || o.AppCenterCount == nil {
		return nil, false
	}
	return o.AppCenterCount, true
}

// HasAppCenterCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasAppCenterCount() bool {
	if o != nil && o.AppCenterCount != nil {
		return true
	}

	return false
}

// SetAppCenterCount gets a reference to the given int64 and assigns it to the AppCenterCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetAppCenterCount(v int64) {
	o.AppCenterCount = &v
}

// GetAve returns the Ave field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetAve() string {
	if o == nil || o.Ave == nil {
		var ret string
		return ret
	}
	return *o.Ave
}

// GetAveOk returns a tuple with the Ave field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetAveOk() (*string, bool) {
	if o == nil || o.Ave == nil {
		return nil, false
	}
	return o.Ave, true
}

// HasAve returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasAve() bool {
	if o != nil && o.Ave != nil {
		return true
	}

	return false
}

// SetAve gets a reference to the given string and assigns it to the Ave field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetAve(v string) {
	o.Ave = &v
}

// GetBdCount returns the BdCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetBdCount() int64 {
	if o == nil || o.BdCount == nil {
		var ret int64
		return ret
	}
	return *o.BdCount
}

// GetBdCountOk returns a tuple with the BdCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetBdCountOk() (*int64, bool) {
	if o == nil || o.BdCount == nil {
		return nil, false
	}
	return o.BdCount, true
}

// HasBdCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasBdCount() bool {
	if o != nil && o.BdCount != nil {
		return true
	}

	return false
}

// SetBdCount gets a reference to the given int64 and assigns it to the BdCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetBdCount(v int64) {
	o.BdCount = &v
}

// GetConsistencyCheckerApp returns the ConsistencyCheckerApp field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetConsistencyCheckerApp() string {
	if o == nil || o.ConsistencyCheckerApp == nil {
		var ret string
		return ret
	}
	return *o.ConsistencyCheckerApp
}

// GetConsistencyCheckerAppOk returns a tuple with the ConsistencyCheckerApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetConsistencyCheckerAppOk() (*string, bool) {
	if o == nil || o.ConsistencyCheckerApp == nil {
		return nil, false
	}
	return o.ConsistencyCheckerApp, true
}

// HasConsistencyCheckerApp returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasConsistencyCheckerApp() bool {
	if o != nil && o.ConsistencyCheckerApp != nil {
		return true
	}

	return false
}

// SetConsistencyCheckerApp gets a reference to the given string and assigns it to the ConsistencyCheckerApp field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetConsistencyCheckerApp(v string) {
	o.ConsistencyCheckerApp = &v
}

// GetContractCount returns the ContractCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetContractCount() int64 {
	if o == nil || o.ContractCount == nil {
		var ret int64
		return ret
	}
	return *o.ContractCount
}

// GetContractCountOk returns a tuple with the ContractCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetContractCountOk() (*int64, bool) {
	if o == nil || o.ContractCount == nil {
		return nil, false
	}
	return o.ContractCount, true
}

// HasContractCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasContractCount() bool {
	if o != nil && o.ContractCount != nil {
		return true
	}

	return false
}

// SetContractCount gets a reference to the given int64 and assigns it to the ContractCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetContractCount(v int64) {
	o.ContractCount = &v
}

// GetDnsCount returns the DnsCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetDnsCount() int64 {
	if o == nil || o.DnsCount == nil {
		var ret int64
		return ret
	}
	return *o.DnsCount
}

// GetDnsCountOk returns a tuple with the DnsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetDnsCountOk() (*int64, bool) {
	if o == nil || o.DnsCount == nil {
		return nil, false
	}
	return o.DnsCount, true
}

// HasDnsCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasDnsCount() bool {
	if o != nil && o.DnsCount != nil {
		return true
	}

	return false
}

// SetDnsCount gets a reference to the given int64 and assigns it to the DnsCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetDnsCount(v int64) {
	o.DnsCount = &v
}

// GetEigrpCount returns the EigrpCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetEigrpCount() int64 {
	if o == nil || o.EigrpCount == nil {
		var ret int64
		return ret
	}
	return *o.EigrpCount
}

// GetEigrpCountOk returns a tuple with the EigrpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetEigrpCountOk() (*int64, bool) {
	if o == nil || o.EigrpCount == nil {
		return nil, false
	}
	return o.EigrpCount, true
}

// HasEigrpCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasEigrpCount() bool {
	if o != nil && o.EigrpCount != nil {
		return true
	}

	return false
}

// SetEigrpCount gets a reference to the given int64 and assigns it to the EigrpCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetEigrpCount(v int64) {
	o.EigrpCount = &v
}

// GetEpgCount returns the EpgCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetEpgCount() int64 {
	if o == nil || o.EpgCount == nil {
		var ret int64
		return ret
	}
	return *o.EpgCount
}

// GetEpgCountOk returns a tuple with the EpgCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetEpgCountOk() (*int64, bool) {
	if o == nil || o.EpgCount == nil {
		return nil, false
	}
	return o.EpgCount, true
}

// HasEpgCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasEpgCount() bool {
	if o != nil && o.EpgCount != nil {
		return true
	}

	return false
}

// SetEpgCount gets a reference to the given int64 and assigns it to the EpgCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetEpgCount(v int64) {
	o.EpgCount = &v
}

// GetHsrpCount returns the HsrpCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetHsrpCount() int64 {
	if o == nil || o.HsrpCount == nil {
		var ret int64
		return ret
	}
	return *o.HsrpCount
}

// GetHsrpCountOk returns a tuple with the HsrpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetHsrpCountOk() (*int64, bool) {
	if o == nil || o.HsrpCount == nil {
		return nil, false
	}
	return o.HsrpCount, true
}

// HasHsrpCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasHsrpCount() bool {
	if o != nil && o.HsrpCount != nil {
		return true
	}

	return false
}

// SetHsrpCount gets a reference to the given int64 and assigns it to the HsrpCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetHsrpCount(v int64) {
	o.HsrpCount = &v
}

// GetIbgpCount returns the IbgpCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetIbgpCount() int64 {
	if o == nil || o.IbgpCount == nil {
		var ret int64
		return ret
	}
	return *o.IbgpCount
}

// GetIbgpCountOk returns a tuple with the IbgpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetIbgpCountOk() (*int64, bool) {
	if o == nil || o.IbgpCount == nil {
		return nil, false
	}
	return o.IbgpCount, true
}

// HasIbgpCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasIbgpCount() bool {
	if o != nil && o.IbgpCount != nil {
		return true
	}

	return false
}

// SetIbgpCount gets a reference to the given int64 and assigns it to the IbgpCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetIbgpCount(v int64) {
	o.IbgpCount = &v
}

// GetIgmpAccessListCount returns the IgmpAccessListCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetIgmpAccessListCount() int64 {
	if o == nil || o.IgmpAccessListCount == nil {
		var ret int64
		return ret
	}
	return *o.IgmpAccessListCount
}

// GetIgmpAccessListCountOk returns a tuple with the IgmpAccessListCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetIgmpAccessListCountOk() (*int64, bool) {
	if o == nil || o.IgmpAccessListCount == nil {
		return nil, false
	}
	return o.IgmpAccessListCount, true
}

// HasIgmpAccessListCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasIgmpAccessListCount() bool {
	if o != nil && o.IgmpAccessListCount != nil {
		return true
	}

	return false
}

// SetIgmpAccessListCount gets a reference to the given int64 and assigns it to the IgmpAccessListCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetIgmpAccessListCount(v int64) {
	o.IgmpAccessListCount = &v
}

// GetIgmpSnoop returns the IgmpSnoop field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetIgmpSnoop() string {
	if o == nil || o.IgmpSnoop == nil {
		var ret string
		return ret
	}
	return *o.IgmpSnoop
}

// GetIgmpSnoopOk returns a tuple with the IgmpSnoop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetIgmpSnoopOk() (*string, bool) {
	if o == nil || o.IgmpSnoop == nil {
		return nil, false
	}
	return o.IgmpSnoop, true
}

// HasIgmpSnoop returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasIgmpSnoop() bool {
	if o != nil && o.IgmpSnoop != nil {
		return true
	}

	return false
}

// SetIgmpSnoop gets a reference to the given string and assigns it to the IgmpSnoop field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetIgmpSnoop(v string) {
	o.IgmpSnoop = &v
}

// GetIpEpgCount returns the IpEpgCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetIpEpgCount() int64 {
	if o == nil || o.IpEpgCount == nil {
		var ret int64
		return ret
	}
	return *o.IpEpgCount
}

// GetIpEpgCountOk returns a tuple with the IpEpgCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetIpEpgCountOk() (*int64, bool) {
	if o == nil || o.IpEpgCount == nil {
		return nil, false
	}
	return o.IpEpgCount, true
}

// HasIpEpgCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasIpEpgCount() bool {
	if o != nil && o.IpEpgCount != nil {
		return true
	}

	return false
}

// SetIpEpgCount gets a reference to the given int64 and assigns it to the IpEpgCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetIpEpgCount(v int64) {
	o.IpEpgCount = &v
}

// GetIsisCount returns the IsisCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetIsisCount() int64 {
	if o == nil || o.IsisCount == nil {
		var ret int64
		return ret
	}
	return *o.IsisCount
}

// GetIsisCountOk returns a tuple with the IsisCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetIsisCountOk() (*int64, bool) {
	if o == nil || o.IsisCount == nil {
		return nil, false
	}
	return o.IsisCount, true
}

// HasIsisCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasIsisCount() bool {
	if o != nil && o.IsisCount != nil {
		return true
	}

	return false
}

// SetIsisCount gets a reference to the given int64 and assigns it to the IsisCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetIsisCount(v int64) {
	o.IsisCount = &v
}

// GetL2Multicast returns the L2Multicast field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetL2Multicast() string {
	if o == nil || o.L2Multicast == nil {
		var ret string
		return ret
	}
	return *o.L2Multicast
}

// GetL2MulticastOk returns a tuple with the L2Multicast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetL2MulticastOk() (*string, bool) {
	if o == nil || o.L2Multicast == nil {
		return nil, false
	}
	return o.L2Multicast, true
}

// HasL2Multicast returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasL2Multicast() bool {
	if o != nil && o.L2Multicast != nil {
		return true
	}

	return false
}

// SetL2Multicast gets a reference to the given string and assigns it to the L2Multicast field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetL2Multicast(v string) {
	o.L2Multicast = &v
}

// GetLeafCount returns the LeafCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetLeafCount() int64 {
	if o == nil || o.LeafCount == nil {
		var ret int64
		return ret
	}
	return *o.LeafCount
}

// GetLeafCountOk returns a tuple with the LeafCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetLeafCountOk() (*int64, bool) {
	if o == nil || o.LeafCount == nil {
		return nil, false
	}
	return o.LeafCount, true
}

// HasLeafCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasLeafCount() bool {
	if o != nil && o.LeafCount != nil {
		return true
	}

	return false
}

// SetLeafCount gets a reference to the given int64 and assigns it to the LeafCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetLeafCount(v int64) {
	o.LeafCount = &v
}

// GetMaintenanceModeCount returns the MaintenanceModeCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetMaintenanceModeCount() int64 {
	if o == nil || o.MaintenanceModeCount == nil {
		var ret int64
		return ret
	}
	return *o.MaintenanceModeCount
}

// GetMaintenanceModeCountOk returns a tuple with the MaintenanceModeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetMaintenanceModeCountOk() (*int64, bool) {
	if o == nil || o.MaintenanceModeCount == nil {
		return nil, false
	}
	return o.MaintenanceModeCount, true
}

// HasMaintenanceModeCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasMaintenanceModeCount() bool {
	if o != nil && o.MaintenanceModeCount != nil {
		return true
	}

	return false
}

// SetMaintenanceModeCount gets a reference to the given int64 and assigns it to the MaintenanceModeCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetMaintenanceModeCount(v int64) {
	o.MaintenanceModeCount = &v
}

// GetManagementOverV6Count returns the ManagementOverV6Count field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetManagementOverV6Count() int64 {
	if o == nil || o.ManagementOverV6Count == nil {
		var ret int64
		return ret
	}
	return *o.ManagementOverV6Count
}

// GetManagementOverV6CountOk returns a tuple with the ManagementOverV6Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetManagementOverV6CountOk() (*int64, bool) {
	if o == nil || o.ManagementOverV6Count == nil {
		return nil, false
	}
	return o.ManagementOverV6Count, true
}

// HasManagementOverV6Count returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasManagementOverV6Count() bool {
	if o != nil && o.ManagementOverV6Count != nil {
		return true
	}

	return false
}

// SetManagementOverV6Count gets a reference to the given int64 and assigns it to the ManagementOverV6Count field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetManagementOverV6Count(v int64) {
	o.ManagementOverV6Count = &v
}

// GetNir returns the Nir field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetNir() string {
	if o == nil || o.Nir == nil {
		var ret string
		return ret
	}
	return *o.Nir
}

// GetNirOk returns a tuple with the Nir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetNirOk() (*string, bool) {
	if o == nil || o.Nir == nil {
		return nil, false
	}
	return o.Nir, true
}

// HasNir returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasNir() bool {
	if o != nil && o.Nir != nil {
		return true
	}

	return false
}

// SetNir gets a reference to the given string and assigns it to the Nir field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetNir(v string) {
	o.Nir = &v
}

// GetOpflexKubernetesCount returns the OpflexKubernetesCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetOpflexKubernetesCount() int64 {
	if o == nil || o.OpflexKubernetesCount == nil {
		var ret int64
		return ret
	}
	return *o.OpflexKubernetesCount
}

// GetOpflexKubernetesCountOk returns a tuple with the OpflexKubernetesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetOpflexKubernetesCountOk() (*int64, bool) {
	if o == nil || o.OpflexKubernetesCount == nil {
		return nil, false
	}
	return o.OpflexKubernetesCount, true
}

// HasOpflexKubernetesCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasOpflexKubernetesCount() bool {
	if o != nil && o.OpflexKubernetesCount != nil {
		return true
	}

	return false
}

// SetOpflexKubernetesCount gets a reference to the given int64 and assigns it to the OpflexKubernetesCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetOpflexKubernetesCount(v int64) {
	o.OpflexKubernetesCount = &v
}

// GetOspfCount returns the OspfCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetOspfCount() int64 {
	if o == nil || o.OspfCount == nil {
		var ret int64
		return ret
	}
	return *o.OspfCount
}

// GetOspfCountOk returns a tuple with the OspfCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetOspfCountOk() (*int64, bool) {
	if o == nil || o.OspfCount == nil {
		return nil, false
	}
	return o.OspfCount, true
}

// HasOspfCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasOspfCount() bool {
	if o != nil && o.OspfCount != nil {
		return true
	}

	return false
}

// SetOspfCount gets a reference to the given int64 and assigns it to the OspfCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetOspfCount(v int64) {
	o.OspfCount = &v
}

// GetPoeCount returns the PoeCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetPoeCount() int64 {
	if o == nil || o.PoeCount == nil {
		var ret int64
		return ret
	}
	return *o.PoeCount
}

// GetPoeCountOk returns a tuple with the PoeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetPoeCountOk() (*int64, bool) {
	if o == nil || o.PoeCount == nil {
		return nil, false
	}
	return o.PoeCount, true
}

// HasPoeCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasPoeCount() bool {
	if o != nil && o.PoeCount != nil {
		return true
	}

	return false
}

// SetPoeCount gets a reference to the given int64 and assigns it to the PoeCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetPoeCount(v int64) {
	o.PoeCount = &v
}

// GetQinVniTunnelCount returns the QinVniTunnelCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetQinVniTunnelCount() int64 {
	if o == nil || o.QinVniTunnelCount == nil {
		var ret int64
		return ret
	}
	return *o.QinVniTunnelCount
}

// GetQinVniTunnelCountOk returns a tuple with the QinVniTunnelCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetQinVniTunnelCountOk() (*int64, bool) {
	if o == nil || o.QinVniTunnelCount == nil {
		return nil, false
	}
	return o.QinVniTunnelCount, true
}

// HasQinVniTunnelCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasQinVniTunnelCount() bool {
	if o != nil && o.QinVniTunnelCount != nil {
		return true
	}

	return false
}

// SetQinVniTunnelCount gets a reference to the given int64 and assigns it to the QinVniTunnelCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetQinVniTunnelCount(v int64) {
	o.QinVniTunnelCount = &v
}

// GetRemoteLeafCount returns the RemoteLeafCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetRemoteLeafCount() int64 {
	if o == nil || o.RemoteLeafCount == nil {
		var ret int64
		return ret
	}
	return *o.RemoteLeafCount
}

// GetRemoteLeafCountOk returns a tuple with the RemoteLeafCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetRemoteLeafCountOk() (*int64, bool) {
	if o == nil || o.RemoteLeafCount == nil {
		return nil, false
	}
	return o.RemoteLeafCount, true
}

// HasRemoteLeafCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasRemoteLeafCount() bool {
	if o != nil && o.RemoteLeafCount != nil {
		return true
	}

	return false
}

// SetRemoteLeafCount gets a reference to the given int64 and assigns it to the RemoteLeafCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetRemoteLeafCount(v int64) {
	o.RemoteLeafCount = &v
}

// GetScvmmCount returns the ScvmmCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetScvmmCount() int64 {
	if o == nil || o.ScvmmCount == nil {
		var ret int64
		return ret
	}
	return *o.ScvmmCount
}

// GetScvmmCountOk returns a tuple with the ScvmmCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetScvmmCountOk() (*int64, bool) {
	if o == nil || o.ScvmmCount == nil {
		return nil, false
	}
	return o.ScvmmCount, true
}

// HasScvmmCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasScvmmCount() bool {
	if o != nil && o.ScvmmCount != nil {
		return true
	}

	return false
}

// SetScvmmCount gets a reference to the given int64 and assigns it to the ScvmmCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetScvmmCount(v int64) {
	o.ScvmmCount = &v
}

// GetSharedL3OutCount returns the SharedL3OutCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetSharedL3OutCount() int64 {
	if o == nil || o.SharedL3OutCount == nil {
		var ret int64
		return ret
	}
	return *o.SharedL3OutCount
}

// GetSharedL3OutCountOk returns a tuple with the SharedL3OutCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetSharedL3OutCountOk() (*int64, bool) {
	if o == nil || o.SharedL3OutCount == nil {
		return nil, false
	}
	return o.SharedL3OutCount, true
}

// HasSharedL3OutCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasSharedL3OutCount() bool {
	if o != nil && o.SharedL3OutCount != nil {
		return true
	}

	return false
}

// SetSharedL3OutCount gets a reference to the given int64 and assigns it to the SharedL3OutCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetSharedL3OutCount(v int64) {
	o.SharedL3OutCount = &v
}

// GetSmartCallHome returns the SmartCallHome field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetSmartCallHome() string {
	if o == nil || o.SmartCallHome == nil {
		var ret string
		return ret
	}
	return *o.SmartCallHome
}

// GetSmartCallHomeOk returns a tuple with the SmartCallHome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetSmartCallHomeOk() (*string, bool) {
	if o == nil || o.SmartCallHome == nil {
		return nil, false
	}
	return o.SmartCallHome, true
}

// HasSmartCallHome returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasSmartCallHome() bool {
	if o != nil && o.SmartCallHome != nil {
		return true
	}

	return false
}

// SetSmartCallHome gets a reference to the given string and assigns it to the SmartCallHome field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetSmartCallHome(v string) {
	o.SmartCallHome = &v
}

// GetSnmp returns the Snmp field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetSnmp() string {
	if o == nil || o.Snmp == nil {
		var ret string
		return ret
	}
	return *o.Snmp
}

// GetSnmpOk returns a tuple with the Snmp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetSnmpOk() (*string, bool) {
	if o == nil || o.Snmp == nil {
		return nil, false
	}
	return o.Snmp, true
}

// HasSnmp returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasSnmp() bool {
	if o != nil && o.Snmp != nil {
		return true
	}

	return false
}

// SetSnmp gets a reference to the given string and assigns it to the Snmp field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetSnmp(v string) {
	o.Snmp = &v
}

// GetSpineCount returns the SpineCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetSpineCount() int64 {
	if o == nil || o.SpineCount == nil {
		var ret int64
		return ret
	}
	return *o.SpineCount
}

// GetSpineCountOk returns a tuple with the SpineCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetSpineCountOk() (*int64, bool) {
	if o == nil || o.SpineCount == nil {
		return nil, false
	}
	return o.SpineCount, true
}

// HasSpineCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasSpineCount() bool {
	if o != nil && o.SpineCount != nil {
		return true
	}

	return false
}

// SetSpineCount gets a reference to the given int64 and assigns it to the SpineCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetSpineCount(v int64) {
	o.SpineCount = &v
}

// GetSshOverV6Count returns the SshOverV6Count field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetSshOverV6Count() int64 {
	if o == nil || o.SshOverV6Count == nil {
		var ret int64
		return ret
	}
	return *o.SshOverV6Count
}

// GetSshOverV6CountOk returns a tuple with the SshOverV6Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetSshOverV6CountOk() (*int64, bool) {
	if o == nil || o.SshOverV6Count == nil {
		return nil, false
	}
	return o.SshOverV6Count, true
}

// HasSshOverV6Count returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasSshOverV6Count() bool {
	if o != nil && o.SshOverV6Count != nil {
		return true
	}

	return false
}

// SetSshOverV6Count gets a reference to the given int64 and assigns it to the SshOverV6Count field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetSshOverV6Count(v int64) {
	o.SshOverV6Count = &v
}

// GetSyslogOverV6Count returns the SyslogOverV6Count field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetSyslogOverV6Count() int64 {
	if o == nil || o.SyslogOverV6Count == nil {
		var ret int64
		return ret
	}
	return *o.SyslogOverV6Count
}

// GetSyslogOverV6CountOk returns a tuple with the SyslogOverV6Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetSyslogOverV6CountOk() (*int64, bool) {
	if o == nil || o.SyslogOverV6Count == nil {
		return nil, false
	}
	return o.SyslogOverV6Count, true
}

// HasSyslogOverV6Count returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasSyslogOverV6Count() bool {
	if o != nil && o.SyslogOverV6Count != nil {
		return true
	}

	return false
}

// SetSyslogOverV6Count gets a reference to the given int64 and assigns it to the SyslogOverV6Count field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetSyslogOverV6Count(v int64) {
	o.SyslogOverV6Count = &v
}

// GetTenantCount returns the TenantCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetTenantCount() int64 {
	if o == nil || o.TenantCount == nil {
		var ret int64
		return ret
	}
	return *o.TenantCount
}

// GetTenantCountOk returns a tuple with the TenantCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetTenantCountOk() (*int64, bool) {
	if o == nil || o.TenantCount == nil {
		return nil, false
	}
	return o.TenantCount, true
}

// HasTenantCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasTenantCount() bool {
	if o != nil && o.TenantCount != nil {
		return true
	}

	return false
}

// SetTenantCount gets a reference to the given int64 and assigns it to the TenantCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetTenantCount(v int64) {
	o.TenantCount = &v
}

// GetTierTwoLeafCount returns the TierTwoLeafCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetTierTwoLeafCount() int64 {
	if o == nil || o.TierTwoLeafCount == nil {
		var ret int64
		return ret
	}
	return *o.TierTwoLeafCount
}

// GetTierTwoLeafCountOk returns a tuple with the TierTwoLeafCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetTierTwoLeafCountOk() (*int64, bool) {
	if o == nil || o.TierTwoLeafCount == nil {
		return nil, false
	}
	return o.TierTwoLeafCount, true
}

// HasTierTwoLeafCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasTierTwoLeafCount() bool {
	if o != nil && o.TierTwoLeafCount != nil {
		return true
	}

	return false
}

// SetTierTwoLeafCount gets a reference to the given int64 and assigns it to the TierTwoLeafCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetTierTwoLeafCount(v int64) {
	o.TierTwoLeafCount = &v
}

// GetTwamp returns the Twamp field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetTwamp() string {
	if o == nil || o.Twamp == nil {
		var ret string
		return ret
	}
	return *o.Twamp
}

// GetTwampOk returns a tuple with the Twamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetTwampOk() (*string, bool) {
	if o == nil || o.Twamp == nil {
		return nil, false
	}
	return o.Twamp, true
}

// HasTwamp returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasTwamp() bool {
	if o != nil && o.Twamp != nil {
		return true
	}

	return false
}

// SetTwamp gets a reference to the given string and assigns it to the Twamp field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetTwamp(v string) {
	o.Twamp = &v
}

// GetUseg returns the Useg field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetUseg() string {
	if o == nil || o.Useg == nil {
		var ret string
		return ret
	}
	return *o.Useg
}

// GetUsegOk returns a tuple with the Useg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetUsegOk() (*string, bool) {
	if o == nil || o.Useg == nil {
		return nil, false
	}
	return o.Useg, true
}

// HasUseg returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasUseg() bool {
	if o != nil && o.Useg != nil {
		return true
	}

	return false
}

// SetUseg gets a reference to the given string and assigns it to the Useg field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetUseg(v string) {
	o.Useg = &v
}

// GetVpodCount returns the VpodCount field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetVpodCount() int64 {
	if o == nil || o.VpodCount == nil {
		var ret int64
		return ret
	}
	return *o.VpodCount
}

// GetVpodCountOk returns a tuple with the VpodCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetVpodCountOk() (*int64, bool) {
	if o == nil || o.VpodCount == nil {
		return nil, false
	}
	return o.VpodCount, true
}

// HasVpodCount returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasVpodCount() bool {
	if o != nil && o.VpodCount != nil {
		return true
	}

	return false
}

// SetVpodCount gets a reference to the given int64 and assigns it to the VpodCount field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetVpodCount(v int64) {
	o.VpodCount = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NiatelemetryNiaFeatureUsageAllOf) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NiatelemetryNiaFeatureUsageAllOf) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

func (o NiatelemetryNiaFeatureUsageAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApicCount != nil {
		toSerialize["ApicCount"] = o.ApicCount
	}
	if o.AppCenterCount != nil {
		toSerialize["AppCenterCount"] = o.AppCenterCount
	}
	if o.Ave != nil {
		toSerialize["Ave"] = o.Ave
	}
	if o.BdCount != nil {
		toSerialize["BdCount"] = o.BdCount
	}
	if o.ConsistencyCheckerApp != nil {
		toSerialize["ConsistencyCheckerApp"] = o.ConsistencyCheckerApp
	}
	if o.ContractCount != nil {
		toSerialize["ContractCount"] = o.ContractCount
	}
	if o.DnsCount != nil {
		toSerialize["DnsCount"] = o.DnsCount
	}
	if o.EigrpCount != nil {
		toSerialize["EigrpCount"] = o.EigrpCount
	}
	if o.EpgCount != nil {
		toSerialize["EpgCount"] = o.EpgCount
	}
	if o.HsrpCount != nil {
		toSerialize["HsrpCount"] = o.HsrpCount
	}
	if o.IbgpCount != nil {
		toSerialize["IbgpCount"] = o.IbgpCount
	}
	if o.IgmpAccessListCount != nil {
		toSerialize["IgmpAccessListCount"] = o.IgmpAccessListCount
	}
	if o.IgmpSnoop != nil {
		toSerialize["IgmpSnoop"] = o.IgmpSnoop
	}
	if o.IpEpgCount != nil {
		toSerialize["IpEpgCount"] = o.IpEpgCount
	}
	if o.IsisCount != nil {
		toSerialize["IsisCount"] = o.IsisCount
	}
	if o.L2Multicast != nil {
		toSerialize["L2Multicast"] = o.L2Multicast
	}
	if o.LeafCount != nil {
		toSerialize["LeafCount"] = o.LeafCount
	}
	if o.MaintenanceModeCount != nil {
		toSerialize["MaintenanceModeCount"] = o.MaintenanceModeCount
	}
	if o.ManagementOverV6Count != nil {
		toSerialize["ManagementOverV6Count"] = o.ManagementOverV6Count
	}
	if o.Nir != nil {
		toSerialize["Nir"] = o.Nir
	}
	if o.OpflexKubernetesCount != nil {
		toSerialize["OpflexKubernetesCount"] = o.OpflexKubernetesCount
	}
	if o.OspfCount != nil {
		toSerialize["OspfCount"] = o.OspfCount
	}
	if o.PoeCount != nil {
		toSerialize["PoeCount"] = o.PoeCount
	}
	if o.QinVniTunnelCount != nil {
		toSerialize["QinVniTunnelCount"] = o.QinVniTunnelCount
	}
	if o.RemoteLeafCount != nil {
		toSerialize["RemoteLeafCount"] = o.RemoteLeafCount
	}
	if o.ScvmmCount != nil {
		toSerialize["ScvmmCount"] = o.ScvmmCount
	}
	if o.SharedL3OutCount != nil {
		toSerialize["SharedL3OutCount"] = o.SharedL3OutCount
	}
	if o.SmartCallHome != nil {
		toSerialize["SmartCallHome"] = o.SmartCallHome
	}
	if o.Snmp != nil {
		toSerialize["Snmp"] = o.Snmp
	}
	if o.SpineCount != nil {
		toSerialize["SpineCount"] = o.SpineCount
	}
	if o.SshOverV6Count != nil {
		toSerialize["SshOverV6Count"] = o.SshOverV6Count
	}
	if o.SyslogOverV6Count != nil {
		toSerialize["SyslogOverV6Count"] = o.SyslogOverV6Count
	}
	if o.TenantCount != nil {
		toSerialize["TenantCount"] = o.TenantCount
	}
	if o.TierTwoLeafCount != nil {
		toSerialize["TierTwoLeafCount"] = o.TierTwoLeafCount
	}
	if o.Twamp != nil {
		toSerialize["Twamp"] = o.Twamp
	}
	if o.Useg != nil {
		toSerialize["Useg"] = o.Useg
	}
	if o.VpodCount != nil {
		toSerialize["VpodCount"] = o.VpodCount
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}
	return json.Marshal(toSerialize)
}

type NullableNiatelemetryNiaFeatureUsageAllOf struct {
	value *NiatelemetryNiaFeatureUsageAllOf
	isSet bool
}

func (v NullableNiatelemetryNiaFeatureUsageAllOf) Get() *NiatelemetryNiaFeatureUsageAllOf {
	return v.value
}

func (v *NullableNiatelemetryNiaFeatureUsageAllOf) Set(val *NiatelemetryNiaFeatureUsageAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNiatelemetryNiaFeatureUsageAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNiatelemetryNiaFeatureUsageAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNiatelemetryNiaFeatureUsageAllOf(val *NiatelemetryNiaFeatureUsageAllOf) *NullableNiatelemetryNiaFeatureUsageAllOf {
	return &NullableNiatelemetryNiaFeatureUsageAllOf{value: val, isSet: true}
}

func (v NullableNiatelemetryNiaFeatureUsageAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNiatelemetryNiaFeatureUsageAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
