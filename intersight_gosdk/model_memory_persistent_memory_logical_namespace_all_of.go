/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-11T05:47:33Z.
 *
 * API version: 1.0.9-1999
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// MemoryPersistentMemoryLogicalNamespaceAllOf Definition of the list of properties defined in 'memory.PersistentMemoryLogicalNamespace', excluding properties defined in parent classes.
type MemoryPersistentMemoryLogicalNamespaceAllOf struct {
	// Capacity of this Namespace that is created or modified.
	Capacity *int32 `json:"Capacity,omitempty"`
	// Mode of this Namespace that is created or modified.
	Mode *string `json:"Mode,omitempty"`
	// Name of this Namespace to be created on the server.
	Name *string `json:"Name,omitempty"`
	// Socket ID of the region on which this Namespace has to be created or modified.
	SocketId *int32 `json:"SocketId,omitempty"`
	// Socket Memory ID of the region on which this Namespace has to be created or modified.
	SocketMemoryId       *string `json:"SocketMemoryId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemoryPersistentMemoryLogicalNamespaceAllOf MemoryPersistentMemoryLogicalNamespaceAllOf

// NewMemoryPersistentMemoryLogicalNamespaceAllOf instantiates a new MemoryPersistentMemoryLogicalNamespaceAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemoryPersistentMemoryLogicalNamespaceAllOf() *MemoryPersistentMemoryLogicalNamespaceAllOf {
	this := MemoryPersistentMemoryLogicalNamespaceAllOf{}
	var mode string = "raw"
	this.Mode = &mode
	var socketId int32 = 1
	this.SocketId = &socketId
	var socketMemoryId string = "Not Applicable"
	this.SocketMemoryId = &socketMemoryId
	return &this
}

// NewMemoryPersistentMemoryLogicalNamespaceAllOfWithDefaults instantiates a new MemoryPersistentMemoryLogicalNamespaceAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemoryPersistentMemoryLogicalNamespaceAllOfWithDefaults() *MemoryPersistentMemoryLogicalNamespaceAllOf {
	this := MemoryPersistentMemoryLogicalNamespaceAllOf{}
	var mode string = "raw"
	this.Mode = &mode
	var socketId int32 = 1
	this.SocketId = &socketId
	var socketMemoryId string = "Not Applicable"
	this.SocketMemoryId = &socketMemoryId
	return &this
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) GetCapacity() int32 {
	if o == nil || o.Capacity == nil {
		var ret int32
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) GetCapacityOk() (*int32, bool) {
	if o == nil || o.Capacity == nil {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) HasCapacity() bool {
	if o != nil && o.Capacity != nil {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given int32 and assigns it to the Capacity field.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) SetCapacity(v int32) {
	o.Capacity = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) GetMode() string {
	if o == nil || o.Mode == nil {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) GetModeOk() (*string, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) SetMode(v string) {
	o.Mode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) SetName(v string) {
	o.Name = &v
}

// GetSocketId returns the SocketId field value if set, zero value otherwise.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) GetSocketId() int32 {
	if o == nil || o.SocketId == nil {
		var ret int32
		return ret
	}
	return *o.SocketId
}

// GetSocketIdOk returns a tuple with the SocketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) GetSocketIdOk() (*int32, bool) {
	if o == nil || o.SocketId == nil {
		return nil, false
	}
	return o.SocketId, true
}

// HasSocketId returns a boolean if a field has been set.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) HasSocketId() bool {
	if o != nil && o.SocketId != nil {
		return true
	}

	return false
}

// SetSocketId gets a reference to the given int32 and assigns it to the SocketId field.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) SetSocketId(v int32) {
	o.SocketId = &v
}

// GetSocketMemoryId returns the SocketMemoryId field value if set, zero value otherwise.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) GetSocketMemoryId() string {
	if o == nil || o.SocketMemoryId == nil {
		var ret string
		return ret
	}
	return *o.SocketMemoryId
}

// GetSocketMemoryIdOk returns a tuple with the SocketMemoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) GetSocketMemoryIdOk() (*string, bool) {
	if o == nil || o.SocketMemoryId == nil {
		return nil, false
	}
	return o.SocketMemoryId, true
}

// HasSocketMemoryId returns a boolean if a field has been set.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) HasSocketMemoryId() bool {
	if o != nil && o.SocketMemoryId != nil {
		return true
	}

	return false
}

// SetSocketMemoryId gets a reference to the given string and assigns it to the SocketMemoryId field.
func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) SetSocketMemoryId(v string) {
	o.SocketMemoryId = &v
}

func (o MemoryPersistentMemoryLogicalNamespaceAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Capacity != nil {
		toSerialize["Capacity"] = o.Capacity
	}
	if o.Mode != nil {
		toSerialize["Mode"] = o.Mode
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.SocketId != nil {
		toSerialize["SocketId"] = o.SocketId
	}
	if o.SocketMemoryId != nil {
		toSerialize["SocketMemoryId"] = o.SocketMemoryId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MemoryPersistentMemoryLogicalNamespaceAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varMemoryPersistentMemoryLogicalNamespaceAllOf := _MemoryPersistentMemoryLogicalNamespaceAllOf{}

	if err = json.Unmarshal(bytes, &varMemoryPersistentMemoryLogicalNamespaceAllOf); err == nil {
		*o = MemoryPersistentMemoryLogicalNamespaceAllOf(varMemoryPersistentMemoryLogicalNamespaceAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Capacity")
		delete(additionalProperties, "Mode")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "SocketId")
		delete(additionalProperties, "SocketMemoryId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemoryPersistentMemoryLogicalNamespaceAllOf struct {
	value *MemoryPersistentMemoryLogicalNamespaceAllOf
	isSet bool
}

func (v NullableMemoryPersistentMemoryLogicalNamespaceAllOf) Get() *MemoryPersistentMemoryLogicalNamespaceAllOf {
	return v.value
}

func (v *NullableMemoryPersistentMemoryLogicalNamespaceAllOf) Set(val *MemoryPersistentMemoryLogicalNamespaceAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMemoryPersistentMemoryLogicalNamespaceAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMemoryPersistentMemoryLogicalNamespaceAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemoryPersistentMemoryLogicalNamespaceAllOf(val *MemoryPersistentMemoryLogicalNamespaceAllOf) *NullableMemoryPersistentMemoryLogicalNamespaceAllOf {
	return &NullableMemoryPersistentMemoryLogicalNamespaceAllOf{value: val, isSet: true}
}

func (v NullableMemoryPersistentMemoryLogicalNamespaceAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemoryPersistentMemoryLogicalNamespaceAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
