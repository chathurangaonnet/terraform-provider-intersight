/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-04-12T21:47:47-07:00.
 *
 * API version: 1.0.9-1617
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// WorkflowTaskMeta This MO contains a task definition.
type WorkflowTaskMeta struct {
	MoBaseMo
	// A task execution type to indicate if it is a system task.
	ActionType *string `json:"ActionType,omitempty"`
	// A description of the task.
	Description *string   `json:"Description,omitempty"`
	InputKeys   *[]string `json:"InputKeys,omitempty"`
	// Denotes whether or not this is an internal task.  Internal tasks will be hidden from the UI within a workflow.
	Internal *bool `json:"Internal,omitempty"`
	// A task name that should be unique in Conductor DB.
	Name       *string   `json:"Name,omitempty"`
	OutputKeys *[]string `json:"OutputKeys,omitempty"`
	// The worker respnose timeout value.
	ResponseTimeoutSec *int64 `json:"ResponseTimeoutSec,omitempty"`
	// A number of reties for this task.
	RetryCount *int64 `json:"RetryCount,omitempty"`
	// The time on which the retry will be delayed.
	RetryDelaySec *int64 `json:"RetryDelaySec,omitempty"`
	// A logic which defines the way to handle retry (FIXED, EXPONENTIAL_BACKOFF).
	RetryLogic *string `json:"RetryLogic,omitempty"`
	// A service owns the task metadata.
	Src *string `json:"Src,omitempty"`
	// A policy which defines the way to handle timeout (RETRY, TIME_OUT_WF, ALERT_ONLY).
	TimeoutPolicy *string `json:"TimeoutPolicy,omitempty"`
	// A timeout value for the task in seconds.
	TimeoutSec *int64 `json:"TimeoutSec,omitempty"`
}

// NewWorkflowTaskMeta instantiates a new WorkflowTaskMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowTaskMeta() *WorkflowTaskMeta {
	this := WorkflowTaskMeta{}
	return &this
}

// NewWorkflowTaskMetaWithDefaults instantiates a new WorkflowTaskMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowTaskMetaWithDefaults() *WorkflowTaskMeta {
	this := WorkflowTaskMeta{}
	return &this
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *WorkflowTaskMeta) GetActionType() string {
	if o == nil || o.ActionType == nil {
		var ret string
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskMeta) GetActionTypeOk() (*string, bool) {
	if o == nil || o.ActionType == nil {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *WorkflowTaskMeta) HasActionType() bool {
	if o != nil && o.ActionType != nil {
		return true
	}

	return false
}

// SetActionType gets a reference to the given string and assigns it to the ActionType field.
func (o *WorkflowTaskMeta) SetActionType(v string) {
	o.ActionType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *WorkflowTaskMeta) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskMeta) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *WorkflowTaskMeta) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *WorkflowTaskMeta) SetDescription(v string) {
	o.Description = &v
}

// GetInputKeys returns the InputKeys field value if set, zero value otherwise.
func (o *WorkflowTaskMeta) GetInputKeys() []string {
	if o == nil || o.InputKeys == nil {
		var ret []string
		return ret
	}
	return *o.InputKeys
}

// GetInputKeysOk returns a tuple with the InputKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskMeta) GetInputKeysOk() (*[]string, bool) {
	if o == nil || o.InputKeys == nil {
		return nil, false
	}
	return o.InputKeys, true
}

// HasInputKeys returns a boolean if a field has been set.
func (o *WorkflowTaskMeta) HasInputKeys() bool {
	if o != nil && o.InputKeys != nil {
		return true
	}

	return false
}

// SetInputKeys gets a reference to the given []string and assigns it to the InputKeys field.
func (o *WorkflowTaskMeta) SetInputKeys(v []string) {
	o.InputKeys = &v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *WorkflowTaskMeta) GetInternal() bool {
	if o == nil || o.Internal == nil {
		var ret bool
		return ret
	}
	return *o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskMeta) GetInternalOk() (*bool, bool) {
	if o == nil || o.Internal == nil {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *WorkflowTaskMeta) HasInternal() bool {
	if o != nil && o.Internal != nil {
		return true
	}

	return false
}

// SetInternal gets a reference to the given bool and assigns it to the Internal field.
func (o *WorkflowTaskMeta) SetInternal(v bool) {
	o.Internal = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkflowTaskMeta) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskMeta) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkflowTaskMeta) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkflowTaskMeta) SetName(v string) {
	o.Name = &v
}

// GetOutputKeys returns the OutputKeys field value if set, zero value otherwise.
func (o *WorkflowTaskMeta) GetOutputKeys() []string {
	if o == nil || o.OutputKeys == nil {
		var ret []string
		return ret
	}
	return *o.OutputKeys
}

// GetOutputKeysOk returns a tuple with the OutputKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskMeta) GetOutputKeysOk() (*[]string, bool) {
	if o == nil || o.OutputKeys == nil {
		return nil, false
	}
	return o.OutputKeys, true
}

// HasOutputKeys returns a boolean if a field has been set.
func (o *WorkflowTaskMeta) HasOutputKeys() bool {
	if o != nil && o.OutputKeys != nil {
		return true
	}

	return false
}

// SetOutputKeys gets a reference to the given []string and assigns it to the OutputKeys field.
func (o *WorkflowTaskMeta) SetOutputKeys(v []string) {
	o.OutputKeys = &v
}

// GetResponseTimeoutSec returns the ResponseTimeoutSec field value if set, zero value otherwise.
func (o *WorkflowTaskMeta) GetResponseTimeoutSec() int64 {
	if o == nil || o.ResponseTimeoutSec == nil {
		var ret int64
		return ret
	}
	return *o.ResponseTimeoutSec
}

// GetResponseTimeoutSecOk returns a tuple with the ResponseTimeoutSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskMeta) GetResponseTimeoutSecOk() (*int64, bool) {
	if o == nil || o.ResponseTimeoutSec == nil {
		return nil, false
	}
	return o.ResponseTimeoutSec, true
}

// HasResponseTimeoutSec returns a boolean if a field has been set.
func (o *WorkflowTaskMeta) HasResponseTimeoutSec() bool {
	if o != nil && o.ResponseTimeoutSec != nil {
		return true
	}

	return false
}

// SetResponseTimeoutSec gets a reference to the given int64 and assigns it to the ResponseTimeoutSec field.
func (o *WorkflowTaskMeta) SetResponseTimeoutSec(v int64) {
	o.ResponseTimeoutSec = &v
}

// GetRetryCount returns the RetryCount field value if set, zero value otherwise.
func (o *WorkflowTaskMeta) GetRetryCount() int64 {
	if o == nil || o.RetryCount == nil {
		var ret int64
		return ret
	}
	return *o.RetryCount
}

// GetRetryCountOk returns a tuple with the RetryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskMeta) GetRetryCountOk() (*int64, bool) {
	if o == nil || o.RetryCount == nil {
		return nil, false
	}
	return o.RetryCount, true
}

// HasRetryCount returns a boolean if a field has been set.
func (o *WorkflowTaskMeta) HasRetryCount() bool {
	if o != nil && o.RetryCount != nil {
		return true
	}

	return false
}

// SetRetryCount gets a reference to the given int64 and assigns it to the RetryCount field.
func (o *WorkflowTaskMeta) SetRetryCount(v int64) {
	o.RetryCount = &v
}

// GetRetryDelaySec returns the RetryDelaySec field value if set, zero value otherwise.
func (o *WorkflowTaskMeta) GetRetryDelaySec() int64 {
	if o == nil || o.RetryDelaySec == nil {
		var ret int64
		return ret
	}
	return *o.RetryDelaySec
}

// GetRetryDelaySecOk returns a tuple with the RetryDelaySec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskMeta) GetRetryDelaySecOk() (*int64, bool) {
	if o == nil || o.RetryDelaySec == nil {
		return nil, false
	}
	return o.RetryDelaySec, true
}

// HasRetryDelaySec returns a boolean if a field has been set.
func (o *WorkflowTaskMeta) HasRetryDelaySec() bool {
	if o != nil && o.RetryDelaySec != nil {
		return true
	}

	return false
}

// SetRetryDelaySec gets a reference to the given int64 and assigns it to the RetryDelaySec field.
func (o *WorkflowTaskMeta) SetRetryDelaySec(v int64) {
	o.RetryDelaySec = &v
}

// GetRetryLogic returns the RetryLogic field value if set, zero value otherwise.
func (o *WorkflowTaskMeta) GetRetryLogic() string {
	if o == nil || o.RetryLogic == nil {
		var ret string
		return ret
	}
	return *o.RetryLogic
}

// GetRetryLogicOk returns a tuple with the RetryLogic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskMeta) GetRetryLogicOk() (*string, bool) {
	if o == nil || o.RetryLogic == nil {
		return nil, false
	}
	return o.RetryLogic, true
}

// HasRetryLogic returns a boolean if a field has been set.
func (o *WorkflowTaskMeta) HasRetryLogic() bool {
	if o != nil && o.RetryLogic != nil {
		return true
	}

	return false
}

// SetRetryLogic gets a reference to the given string and assigns it to the RetryLogic field.
func (o *WorkflowTaskMeta) SetRetryLogic(v string) {
	o.RetryLogic = &v
}

// GetSrc returns the Src field value if set, zero value otherwise.
func (o *WorkflowTaskMeta) GetSrc() string {
	if o == nil || o.Src == nil {
		var ret string
		return ret
	}
	return *o.Src
}

// GetSrcOk returns a tuple with the Src field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskMeta) GetSrcOk() (*string, bool) {
	if o == nil || o.Src == nil {
		return nil, false
	}
	return o.Src, true
}

// HasSrc returns a boolean if a field has been set.
func (o *WorkflowTaskMeta) HasSrc() bool {
	if o != nil && o.Src != nil {
		return true
	}

	return false
}

// SetSrc gets a reference to the given string and assigns it to the Src field.
func (o *WorkflowTaskMeta) SetSrc(v string) {
	o.Src = &v
}

// GetTimeoutPolicy returns the TimeoutPolicy field value if set, zero value otherwise.
func (o *WorkflowTaskMeta) GetTimeoutPolicy() string {
	if o == nil || o.TimeoutPolicy == nil {
		var ret string
		return ret
	}
	return *o.TimeoutPolicy
}

// GetTimeoutPolicyOk returns a tuple with the TimeoutPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskMeta) GetTimeoutPolicyOk() (*string, bool) {
	if o == nil || o.TimeoutPolicy == nil {
		return nil, false
	}
	return o.TimeoutPolicy, true
}

// HasTimeoutPolicy returns a boolean if a field has been set.
func (o *WorkflowTaskMeta) HasTimeoutPolicy() bool {
	if o != nil && o.TimeoutPolicy != nil {
		return true
	}

	return false
}

// SetTimeoutPolicy gets a reference to the given string and assigns it to the TimeoutPolicy field.
func (o *WorkflowTaskMeta) SetTimeoutPolicy(v string) {
	o.TimeoutPolicy = &v
}

// GetTimeoutSec returns the TimeoutSec field value if set, zero value otherwise.
func (o *WorkflowTaskMeta) GetTimeoutSec() int64 {
	if o == nil || o.TimeoutSec == nil {
		var ret int64
		return ret
	}
	return *o.TimeoutSec
}

// GetTimeoutSecOk returns a tuple with the TimeoutSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskMeta) GetTimeoutSecOk() (*int64, bool) {
	if o == nil || o.TimeoutSec == nil {
		return nil, false
	}
	return o.TimeoutSec, true
}

// HasTimeoutSec returns a boolean if a field has been set.
func (o *WorkflowTaskMeta) HasTimeoutSec() bool {
	if o != nil && o.TimeoutSec != nil {
		return true
	}

	return false
}

// SetTimeoutSec gets a reference to the given int64 and assigns it to the TimeoutSec field.
func (o *WorkflowTaskMeta) SetTimeoutSec(v int64) {
	o.TimeoutSec = &v
}

func (o WorkflowTaskMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if o.ActionType != nil {
		toSerialize["ActionType"] = o.ActionType
	}
	if o.Description != nil {
		toSerialize["Description"] = o.Description
	}
	if o.InputKeys != nil {
		toSerialize["InputKeys"] = o.InputKeys
	}
	if o.Internal != nil {
		toSerialize["Internal"] = o.Internal
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.OutputKeys != nil {
		toSerialize["OutputKeys"] = o.OutputKeys
	}
	if o.ResponseTimeoutSec != nil {
		toSerialize["ResponseTimeoutSec"] = o.ResponseTimeoutSec
	}
	if o.RetryCount != nil {
		toSerialize["RetryCount"] = o.RetryCount
	}
	if o.RetryDelaySec != nil {
		toSerialize["RetryDelaySec"] = o.RetryDelaySec
	}
	if o.RetryLogic != nil {
		toSerialize["RetryLogic"] = o.RetryLogic
	}
	if o.Src != nil {
		toSerialize["Src"] = o.Src
	}
	if o.TimeoutPolicy != nil {
		toSerialize["TimeoutPolicy"] = o.TimeoutPolicy
	}
	if o.TimeoutSec != nil {
		toSerialize["TimeoutSec"] = o.TimeoutSec
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowTaskMeta struct {
	value *WorkflowTaskMeta
	isSet bool
}

func (v NullableWorkflowTaskMeta) Get() *WorkflowTaskMeta {
	return v.value
}

func (v *NullableWorkflowTaskMeta) Set(val *WorkflowTaskMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowTaskMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowTaskMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowTaskMeta(val *WorkflowTaskMeta) *NullableWorkflowTaskMeta {
	return &NullableWorkflowTaskMeta{value: val, isSet: true}
}

func (v NullableWorkflowTaskMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowTaskMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
