/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-04-12T21:47:47-07:00.
 *
 * API version: 1.0.9-1617
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// ComputeIpAddressAllOf Definition of the list of properties defined in 'compute.IpAddress', excluding properties defined in parent classes.
type ComputeIpAddressAllOf struct {
	Address  *string `json:"Address,omitempty"`
	Category *string `json:"Category,omitempty"`
	// Gateway address of the KVM IP address.
	DefaultGateway *string `json:"DefaultGateway,omitempty"`
	Dn             *string `json:"Dn,omitempty"`
	HttpPort       *int64  `json:"HttpPort,omitempty"`
	HttpsPort      *int64  `json:"HttpsPort,omitempty"`
	// Port number on which the KVM is running.
	KvmPort *int64  `json:"KvmPort,omitempty"`
	Name    *string `json:"Name,omitempty"`
	// Subnet of the KVM IP address.
	Subnet *string `json:"Subnet,omitempty"`
	Type   *string `json:"Type,omitempty"`
}

// NewComputeIpAddressAllOf instantiates a new ComputeIpAddressAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputeIpAddressAllOf() *ComputeIpAddressAllOf {
	this := ComputeIpAddressAllOf{}
	var category string = "Equipment"
	this.Category = &category
	var name string = "Outband"
	this.Name = &name
	var type_ string = "MgmtInterface"
	this.Type = &type_
	return &this
}

// NewComputeIpAddressAllOfWithDefaults instantiates a new ComputeIpAddressAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputeIpAddressAllOfWithDefaults() *ComputeIpAddressAllOf {
	this := ComputeIpAddressAllOf{}
	var category string = "Equipment"
	this.Category = &category
	var name string = "Outband"
	this.Name = &name
	var type_ string = "MgmtInterface"
	this.Type = &type_
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ComputeIpAddressAllOf) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeIpAddressAllOf) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ComputeIpAddressAllOf) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *ComputeIpAddressAllOf) SetAddress(v string) {
	o.Address = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *ComputeIpAddressAllOf) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeIpAddressAllOf) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *ComputeIpAddressAllOf) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *ComputeIpAddressAllOf) SetCategory(v string) {
	o.Category = &v
}

// GetDefaultGateway returns the DefaultGateway field value if set, zero value otherwise.
func (o *ComputeIpAddressAllOf) GetDefaultGateway() string {
	if o == nil || o.DefaultGateway == nil {
		var ret string
		return ret
	}
	return *o.DefaultGateway
}

// GetDefaultGatewayOk returns a tuple with the DefaultGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeIpAddressAllOf) GetDefaultGatewayOk() (*string, bool) {
	if o == nil || o.DefaultGateway == nil {
		return nil, false
	}
	return o.DefaultGateway, true
}

// HasDefaultGateway returns a boolean if a field has been set.
func (o *ComputeIpAddressAllOf) HasDefaultGateway() bool {
	if o != nil && o.DefaultGateway != nil {
		return true
	}

	return false
}

// SetDefaultGateway gets a reference to the given string and assigns it to the DefaultGateway field.
func (o *ComputeIpAddressAllOf) SetDefaultGateway(v string) {
	o.DefaultGateway = &v
}

// GetDn returns the Dn field value if set, zero value otherwise.
func (o *ComputeIpAddressAllOf) GetDn() string {
	if o == nil || o.Dn == nil {
		var ret string
		return ret
	}
	return *o.Dn
}

// GetDnOk returns a tuple with the Dn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeIpAddressAllOf) GetDnOk() (*string, bool) {
	if o == nil || o.Dn == nil {
		return nil, false
	}
	return o.Dn, true
}

// HasDn returns a boolean if a field has been set.
func (o *ComputeIpAddressAllOf) HasDn() bool {
	if o != nil && o.Dn != nil {
		return true
	}

	return false
}

// SetDn gets a reference to the given string and assigns it to the Dn field.
func (o *ComputeIpAddressAllOf) SetDn(v string) {
	o.Dn = &v
}

// GetHttpPort returns the HttpPort field value if set, zero value otherwise.
func (o *ComputeIpAddressAllOf) GetHttpPort() int64 {
	if o == nil || o.HttpPort == nil {
		var ret int64
		return ret
	}
	return *o.HttpPort
}

// GetHttpPortOk returns a tuple with the HttpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeIpAddressAllOf) GetHttpPortOk() (*int64, bool) {
	if o == nil || o.HttpPort == nil {
		return nil, false
	}
	return o.HttpPort, true
}

// HasHttpPort returns a boolean if a field has been set.
func (o *ComputeIpAddressAllOf) HasHttpPort() bool {
	if o != nil && o.HttpPort != nil {
		return true
	}

	return false
}

// SetHttpPort gets a reference to the given int64 and assigns it to the HttpPort field.
func (o *ComputeIpAddressAllOf) SetHttpPort(v int64) {
	o.HttpPort = &v
}

// GetHttpsPort returns the HttpsPort field value if set, zero value otherwise.
func (o *ComputeIpAddressAllOf) GetHttpsPort() int64 {
	if o == nil || o.HttpsPort == nil {
		var ret int64
		return ret
	}
	return *o.HttpsPort
}

// GetHttpsPortOk returns a tuple with the HttpsPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeIpAddressAllOf) GetHttpsPortOk() (*int64, bool) {
	if o == nil || o.HttpsPort == nil {
		return nil, false
	}
	return o.HttpsPort, true
}

// HasHttpsPort returns a boolean if a field has been set.
func (o *ComputeIpAddressAllOf) HasHttpsPort() bool {
	if o != nil && o.HttpsPort != nil {
		return true
	}

	return false
}

// SetHttpsPort gets a reference to the given int64 and assigns it to the HttpsPort field.
func (o *ComputeIpAddressAllOf) SetHttpsPort(v int64) {
	o.HttpsPort = &v
}

// GetKvmPort returns the KvmPort field value if set, zero value otherwise.
func (o *ComputeIpAddressAllOf) GetKvmPort() int64 {
	if o == nil || o.KvmPort == nil {
		var ret int64
		return ret
	}
	return *o.KvmPort
}

// GetKvmPortOk returns a tuple with the KvmPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeIpAddressAllOf) GetKvmPortOk() (*int64, bool) {
	if o == nil || o.KvmPort == nil {
		return nil, false
	}
	return o.KvmPort, true
}

// HasKvmPort returns a boolean if a field has been set.
func (o *ComputeIpAddressAllOf) HasKvmPort() bool {
	if o != nil && o.KvmPort != nil {
		return true
	}

	return false
}

// SetKvmPort gets a reference to the given int64 and assigns it to the KvmPort field.
func (o *ComputeIpAddressAllOf) SetKvmPort(v int64) {
	o.KvmPort = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ComputeIpAddressAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeIpAddressAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ComputeIpAddressAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ComputeIpAddressAllOf) SetName(v string) {
	o.Name = &v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *ComputeIpAddressAllOf) GetSubnet() string {
	if o == nil || o.Subnet == nil {
		var ret string
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeIpAddressAllOf) GetSubnetOk() (*string, bool) {
	if o == nil || o.Subnet == nil {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *ComputeIpAddressAllOf) HasSubnet() bool {
	if o != nil && o.Subnet != nil {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given string and assigns it to the Subnet field.
func (o *ComputeIpAddressAllOf) SetSubnet(v string) {
	o.Subnet = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ComputeIpAddressAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeIpAddressAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ComputeIpAddressAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ComputeIpAddressAllOf) SetType(v string) {
	o.Type = &v
}

func (o ComputeIpAddressAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address != nil {
		toSerialize["Address"] = o.Address
	}
	if o.Category != nil {
		toSerialize["Category"] = o.Category
	}
	if o.DefaultGateway != nil {
		toSerialize["DefaultGateway"] = o.DefaultGateway
	}
	if o.Dn != nil {
		toSerialize["Dn"] = o.Dn
	}
	if o.HttpPort != nil {
		toSerialize["HttpPort"] = o.HttpPort
	}
	if o.HttpsPort != nil {
		toSerialize["HttpsPort"] = o.HttpsPort
	}
	if o.KvmPort != nil {
		toSerialize["KvmPort"] = o.KvmPort
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Subnet != nil {
		toSerialize["Subnet"] = o.Subnet
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableComputeIpAddressAllOf struct {
	value *ComputeIpAddressAllOf
	isSet bool
}

func (v NullableComputeIpAddressAllOf) Get() *ComputeIpAddressAllOf {
	return v.value
}

func (v *NullableComputeIpAddressAllOf) Set(val *ComputeIpAddressAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableComputeIpAddressAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableComputeIpAddressAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputeIpAddressAllOf(val *ComputeIpAddressAllOf) *NullableComputeIpAddressAllOf {
	return &NullableComputeIpAddressAllOf{value: val, isSet: true}
}

func (v NullableComputeIpAddressAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputeIpAddressAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
