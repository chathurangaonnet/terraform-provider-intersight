/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-17T02:04:50-07:00.
 *
 * API version: 1.0.9-1867
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// NetworkElement A Unified Computing Systems (UCS) Fabric Interconnect.
type NetworkElement struct {
	EquipmentBase
	// Administratively configured state of Fabric Evacuation feature, for this switch.
	AdminEvacState *string `json:"AdminEvacState,omitempty"`
	// The administrative state of the network Element inband management interface.
	AdminInbandInterfaceState *string `json:"AdminInbandInterfaceState,omitempty"`
	// Available memory (un-used) on this switch platform.
	AvailableMemory *string `json:"AvailableMemory,omitempty"`
	// The user configured Ethernet operational mode for this switch (End-Host or Switching).
	EthernetMode *string `json:"EthernetMode,omitempty"`
	// The fault summary of the network Element out-of-band management interface.
	FaultSummary *int64 `json:"FaultSummary,omitempty"`
	// The user configured FC operational mode for this switch (End-Host or Switching).
	FcMode *string `json:"FcMode,omitempty"`
	// The IP address of the network Element inband management interface.
	InbandIpAddress *string `json:"InbandIpAddress,omitempty"`
	// The default gateway of the network Element inband management interface.
	InbandIpGateway *string `json:"InbandIpGateway,omitempty"`
	// The network mask of the network Element inband management interface.
	InbandIpMask *string `json:"InbandIpMask,omitempty"`
	// The VLAN ID of the network Element inband management interface.
	InbandVlan *int64 `json:"InbandVlan,omitempty"`
	// Operational state of the Fabric Evacuation feature, for this switch.
	OperEvacState *string `json:"OperEvacState,omitempty"`
	// The switch's current overall operational/health state.
	Operability *string `json:"Operability,omitempty"`
	// The IP address of the network Element out-of-band management interface.
	OutOfBandIpAddress *string `json:"OutOfBandIpAddress,omitempty"`
	// The default gateway of the network Element out-of-band management interface.
	OutOfBandIpGateway *string `json:"OutOfBandIpGateway,omitempty"`
	// The network mask of the network Element out-of-band management interface.
	OutOfBandIpMask *string `json:"OutOfBandIpMask,omitempty"`
	// The IPv4 address of the network Element out-of-band management interface.
	OutOfBandIpv4Address *string `json:"OutOfBandIpv4Address,omitempty"`
	// The default IPv4 gateway of the network Element out-of-band management interface.
	OutOfBandIpv4Gateway *string `json:"OutOfBandIpv4Gateway,omitempty"`
	// The network mask of the network Element out-of-band management interface.
	OutOfBandIpv4Mask *string `json:"OutOfBandIpv4Mask,omitempty"`
	// The IPv6 address of the network Element out-of-band management interface.
	OutOfBandIpv6Address *string `json:"OutOfBandIpv6Address,omitempty"`
	// The default IPv6 gateway of the network Element out-of-band management interface.
	OutOfBandIpv6Gateway *string `json:"OutOfBandIpv6Gateway,omitempty"`
	// The network mask of the network Element out-of-band management interface.
	OutOfBandIpv6Prefix *string `json:"OutOfBandIpv6Prefix,omitempty"`
	// The MAC address of the network Element out-of-band management interface.
	OutOfBandMac *string `json:"OutOfBandMac,omitempty"`
	// The Switch Id of the network Element.
	SwitchId *string `json:"SwitchId,omitempty"`
	// Total available memory on this switch platform.
	TotalMemory *int64 `json:"TotalMemory,omitempty"`
	// An array of relationships to equipmentSwitchCard resources.
	Cards []EquipmentSwitchCardRelationship `json:"Cards,omitempty"`
	// An array of relationships to equipmentFanModule resources.
	Fanmodules          []EquipmentFanModuleRelationship  `json:"Fanmodules,omitempty"`
	InventoryDeviceInfo *InventoryDeviceInfoRelationship  `json:"InventoryDeviceInfo,omitempty"`
	ManagementContoller *ManagementControllerRelationship `json:"ManagementContoller,omitempty"`
	ManagementEntity    *ManagementEntityRelationship     `json:"ManagementEntity,omitempty"`
	NetworkFcZoneInfo   *NetworkFcZoneInfoRelationship    `json:"NetworkFcZoneInfo,omitempty"`
	NetworkVlanPortInfo *NetworkVlanPortInfoRelationship  `json:"NetworkVlanPortInfo,omitempty"`
	// An array of relationships to portMacBinding resources.
	PortMacBindings []PortMacBindingRelationship `json:"PortMacBindings,omitempty"`
	// An array of relationships to equipmentPsu resources.
	Psus             []EquipmentPsuRelationship           `json:"Psus,omitempty"`
	RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	// An array of relationships to storageItem resources.
	StorageItems         []StorageItemRelationship            `json:"StorageItems,omitempty"`
	TopSystem            *TopSystemRelationship               `json:"TopSystem,omitempty"`
	UcsmRunningFirmware  *FirmwareRunningFirmwareRelationship `json:"UcsmRunningFirmware,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkElement NetworkElement

// NewNetworkElement instantiates a new NetworkElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkElement() *NetworkElement {
	this := NetworkElement{}
	return &this
}

// NewNetworkElementWithDefaults instantiates a new NetworkElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkElementWithDefaults() *NetworkElement {
	this := NetworkElement{}
	return &this
}

// GetAdminEvacState returns the AdminEvacState field value if set, zero value otherwise.
func (o *NetworkElement) GetAdminEvacState() string {
	if o == nil || o.AdminEvacState == nil {
		var ret string
		return ret
	}
	return *o.AdminEvacState
}

// GetAdminEvacStateOk returns a tuple with the AdminEvacState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetAdminEvacStateOk() (*string, bool) {
	if o == nil || o.AdminEvacState == nil {
		return nil, false
	}
	return o.AdminEvacState, true
}

// HasAdminEvacState returns a boolean if a field has been set.
func (o *NetworkElement) HasAdminEvacState() bool {
	if o != nil && o.AdminEvacState != nil {
		return true
	}

	return false
}

// SetAdminEvacState gets a reference to the given string and assigns it to the AdminEvacState field.
func (o *NetworkElement) SetAdminEvacState(v string) {
	o.AdminEvacState = &v
}

// GetAdminInbandInterfaceState returns the AdminInbandInterfaceState field value if set, zero value otherwise.
func (o *NetworkElement) GetAdminInbandInterfaceState() string {
	if o == nil || o.AdminInbandInterfaceState == nil {
		var ret string
		return ret
	}
	return *o.AdminInbandInterfaceState
}

// GetAdminInbandInterfaceStateOk returns a tuple with the AdminInbandInterfaceState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetAdminInbandInterfaceStateOk() (*string, bool) {
	if o == nil || o.AdminInbandInterfaceState == nil {
		return nil, false
	}
	return o.AdminInbandInterfaceState, true
}

// HasAdminInbandInterfaceState returns a boolean if a field has been set.
func (o *NetworkElement) HasAdminInbandInterfaceState() bool {
	if o != nil && o.AdminInbandInterfaceState != nil {
		return true
	}

	return false
}

// SetAdminInbandInterfaceState gets a reference to the given string and assigns it to the AdminInbandInterfaceState field.
func (o *NetworkElement) SetAdminInbandInterfaceState(v string) {
	o.AdminInbandInterfaceState = &v
}

// GetAvailableMemory returns the AvailableMemory field value if set, zero value otherwise.
func (o *NetworkElement) GetAvailableMemory() string {
	if o == nil || o.AvailableMemory == nil {
		var ret string
		return ret
	}
	return *o.AvailableMemory
}

// GetAvailableMemoryOk returns a tuple with the AvailableMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetAvailableMemoryOk() (*string, bool) {
	if o == nil || o.AvailableMemory == nil {
		return nil, false
	}
	return o.AvailableMemory, true
}

// HasAvailableMemory returns a boolean if a field has been set.
func (o *NetworkElement) HasAvailableMemory() bool {
	if o != nil && o.AvailableMemory != nil {
		return true
	}

	return false
}

// SetAvailableMemory gets a reference to the given string and assigns it to the AvailableMemory field.
func (o *NetworkElement) SetAvailableMemory(v string) {
	o.AvailableMemory = &v
}

// GetEthernetMode returns the EthernetMode field value if set, zero value otherwise.
func (o *NetworkElement) GetEthernetMode() string {
	if o == nil || o.EthernetMode == nil {
		var ret string
		return ret
	}
	return *o.EthernetMode
}

// GetEthernetModeOk returns a tuple with the EthernetMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetEthernetModeOk() (*string, bool) {
	if o == nil || o.EthernetMode == nil {
		return nil, false
	}
	return o.EthernetMode, true
}

// HasEthernetMode returns a boolean if a field has been set.
func (o *NetworkElement) HasEthernetMode() bool {
	if o != nil && o.EthernetMode != nil {
		return true
	}

	return false
}

// SetEthernetMode gets a reference to the given string and assigns it to the EthernetMode field.
func (o *NetworkElement) SetEthernetMode(v string) {
	o.EthernetMode = &v
}

// GetFaultSummary returns the FaultSummary field value if set, zero value otherwise.
func (o *NetworkElement) GetFaultSummary() int64 {
	if o == nil || o.FaultSummary == nil {
		var ret int64
		return ret
	}
	return *o.FaultSummary
}

// GetFaultSummaryOk returns a tuple with the FaultSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetFaultSummaryOk() (*int64, bool) {
	if o == nil || o.FaultSummary == nil {
		return nil, false
	}
	return o.FaultSummary, true
}

// HasFaultSummary returns a boolean if a field has been set.
func (o *NetworkElement) HasFaultSummary() bool {
	if o != nil && o.FaultSummary != nil {
		return true
	}

	return false
}

// SetFaultSummary gets a reference to the given int64 and assigns it to the FaultSummary field.
func (o *NetworkElement) SetFaultSummary(v int64) {
	o.FaultSummary = &v
}

// GetFcMode returns the FcMode field value if set, zero value otherwise.
func (o *NetworkElement) GetFcMode() string {
	if o == nil || o.FcMode == nil {
		var ret string
		return ret
	}
	return *o.FcMode
}

// GetFcModeOk returns a tuple with the FcMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetFcModeOk() (*string, bool) {
	if o == nil || o.FcMode == nil {
		return nil, false
	}
	return o.FcMode, true
}

// HasFcMode returns a boolean if a field has been set.
func (o *NetworkElement) HasFcMode() bool {
	if o != nil && o.FcMode != nil {
		return true
	}

	return false
}

// SetFcMode gets a reference to the given string and assigns it to the FcMode field.
func (o *NetworkElement) SetFcMode(v string) {
	o.FcMode = &v
}

// GetInbandIpAddress returns the InbandIpAddress field value if set, zero value otherwise.
func (o *NetworkElement) GetInbandIpAddress() string {
	if o == nil || o.InbandIpAddress == nil {
		var ret string
		return ret
	}
	return *o.InbandIpAddress
}

// GetInbandIpAddressOk returns a tuple with the InbandIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetInbandIpAddressOk() (*string, bool) {
	if o == nil || o.InbandIpAddress == nil {
		return nil, false
	}
	return o.InbandIpAddress, true
}

// HasInbandIpAddress returns a boolean if a field has been set.
func (o *NetworkElement) HasInbandIpAddress() bool {
	if o != nil && o.InbandIpAddress != nil {
		return true
	}

	return false
}

// SetInbandIpAddress gets a reference to the given string and assigns it to the InbandIpAddress field.
func (o *NetworkElement) SetInbandIpAddress(v string) {
	o.InbandIpAddress = &v
}

// GetInbandIpGateway returns the InbandIpGateway field value if set, zero value otherwise.
func (o *NetworkElement) GetInbandIpGateway() string {
	if o == nil || o.InbandIpGateway == nil {
		var ret string
		return ret
	}
	return *o.InbandIpGateway
}

// GetInbandIpGatewayOk returns a tuple with the InbandIpGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetInbandIpGatewayOk() (*string, bool) {
	if o == nil || o.InbandIpGateway == nil {
		return nil, false
	}
	return o.InbandIpGateway, true
}

// HasInbandIpGateway returns a boolean if a field has been set.
func (o *NetworkElement) HasInbandIpGateway() bool {
	if o != nil && o.InbandIpGateway != nil {
		return true
	}

	return false
}

// SetInbandIpGateway gets a reference to the given string and assigns it to the InbandIpGateway field.
func (o *NetworkElement) SetInbandIpGateway(v string) {
	o.InbandIpGateway = &v
}

// GetInbandIpMask returns the InbandIpMask field value if set, zero value otherwise.
func (o *NetworkElement) GetInbandIpMask() string {
	if o == nil || o.InbandIpMask == nil {
		var ret string
		return ret
	}
	return *o.InbandIpMask
}

// GetInbandIpMaskOk returns a tuple with the InbandIpMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetInbandIpMaskOk() (*string, bool) {
	if o == nil || o.InbandIpMask == nil {
		return nil, false
	}
	return o.InbandIpMask, true
}

// HasInbandIpMask returns a boolean if a field has been set.
func (o *NetworkElement) HasInbandIpMask() bool {
	if o != nil && o.InbandIpMask != nil {
		return true
	}

	return false
}

// SetInbandIpMask gets a reference to the given string and assigns it to the InbandIpMask field.
func (o *NetworkElement) SetInbandIpMask(v string) {
	o.InbandIpMask = &v
}

// GetInbandVlan returns the InbandVlan field value if set, zero value otherwise.
func (o *NetworkElement) GetInbandVlan() int64 {
	if o == nil || o.InbandVlan == nil {
		var ret int64
		return ret
	}
	return *o.InbandVlan
}

// GetInbandVlanOk returns a tuple with the InbandVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetInbandVlanOk() (*int64, bool) {
	if o == nil || o.InbandVlan == nil {
		return nil, false
	}
	return o.InbandVlan, true
}

// HasInbandVlan returns a boolean if a field has been set.
func (o *NetworkElement) HasInbandVlan() bool {
	if o != nil && o.InbandVlan != nil {
		return true
	}

	return false
}

// SetInbandVlan gets a reference to the given int64 and assigns it to the InbandVlan field.
func (o *NetworkElement) SetInbandVlan(v int64) {
	o.InbandVlan = &v
}

// GetOperEvacState returns the OperEvacState field value if set, zero value otherwise.
func (o *NetworkElement) GetOperEvacState() string {
	if o == nil || o.OperEvacState == nil {
		var ret string
		return ret
	}
	return *o.OperEvacState
}

// GetOperEvacStateOk returns a tuple with the OperEvacState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOperEvacStateOk() (*string, bool) {
	if o == nil || o.OperEvacState == nil {
		return nil, false
	}
	return o.OperEvacState, true
}

// HasOperEvacState returns a boolean if a field has been set.
func (o *NetworkElement) HasOperEvacState() bool {
	if o != nil && o.OperEvacState != nil {
		return true
	}

	return false
}

// SetOperEvacState gets a reference to the given string and assigns it to the OperEvacState field.
func (o *NetworkElement) SetOperEvacState(v string) {
	o.OperEvacState = &v
}

// GetOperability returns the Operability field value if set, zero value otherwise.
func (o *NetworkElement) GetOperability() string {
	if o == nil || o.Operability == nil {
		var ret string
		return ret
	}
	return *o.Operability
}

// GetOperabilityOk returns a tuple with the Operability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOperabilityOk() (*string, bool) {
	if o == nil || o.Operability == nil {
		return nil, false
	}
	return o.Operability, true
}

// HasOperability returns a boolean if a field has been set.
func (o *NetworkElement) HasOperability() bool {
	if o != nil && o.Operability != nil {
		return true
	}

	return false
}

// SetOperability gets a reference to the given string and assigns it to the Operability field.
func (o *NetworkElement) SetOperability(v string) {
	o.Operability = &v
}

// GetOutOfBandIpAddress returns the OutOfBandIpAddress field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpAddress() string {
	if o == nil || o.OutOfBandIpAddress == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpAddress
}

// GetOutOfBandIpAddressOk returns a tuple with the OutOfBandIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpAddressOk() (*string, bool) {
	if o == nil || o.OutOfBandIpAddress == nil {
		return nil, false
	}
	return o.OutOfBandIpAddress, true
}

// HasOutOfBandIpAddress returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpAddress() bool {
	if o != nil && o.OutOfBandIpAddress != nil {
		return true
	}

	return false
}

// SetOutOfBandIpAddress gets a reference to the given string and assigns it to the OutOfBandIpAddress field.
func (o *NetworkElement) SetOutOfBandIpAddress(v string) {
	o.OutOfBandIpAddress = &v
}

// GetOutOfBandIpGateway returns the OutOfBandIpGateway field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpGateway() string {
	if o == nil || o.OutOfBandIpGateway == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpGateway
}

// GetOutOfBandIpGatewayOk returns a tuple with the OutOfBandIpGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpGatewayOk() (*string, bool) {
	if o == nil || o.OutOfBandIpGateway == nil {
		return nil, false
	}
	return o.OutOfBandIpGateway, true
}

// HasOutOfBandIpGateway returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpGateway() bool {
	if o != nil && o.OutOfBandIpGateway != nil {
		return true
	}

	return false
}

// SetOutOfBandIpGateway gets a reference to the given string and assigns it to the OutOfBandIpGateway field.
func (o *NetworkElement) SetOutOfBandIpGateway(v string) {
	o.OutOfBandIpGateway = &v
}

// GetOutOfBandIpMask returns the OutOfBandIpMask field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpMask() string {
	if o == nil || o.OutOfBandIpMask == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpMask
}

// GetOutOfBandIpMaskOk returns a tuple with the OutOfBandIpMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpMaskOk() (*string, bool) {
	if o == nil || o.OutOfBandIpMask == nil {
		return nil, false
	}
	return o.OutOfBandIpMask, true
}

// HasOutOfBandIpMask returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpMask() bool {
	if o != nil && o.OutOfBandIpMask != nil {
		return true
	}

	return false
}

// SetOutOfBandIpMask gets a reference to the given string and assigns it to the OutOfBandIpMask field.
func (o *NetworkElement) SetOutOfBandIpMask(v string) {
	o.OutOfBandIpMask = &v
}

// GetOutOfBandIpv4Address returns the OutOfBandIpv4Address field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpv4Address() string {
	if o == nil || o.OutOfBandIpv4Address == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv4Address
}

// GetOutOfBandIpv4AddressOk returns a tuple with the OutOfBandIpv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpv4AddressOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv4Address == nil {
		return nil, false
	}
	return o.OutOfBandIpv4Address, true
}

// HasOutOfBandIpv4Address returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpv4Address() bool {
	if o != nil && o.OutOfBandIpv4Address != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv4Address gets a reference to the given string and assigns it to the OutOfBandIpv4Address field.
func (o *NetworkElement) SetOutOfBandIpv4Address(v string) {
	o.OutOfBandIpv4Address = &v
}

// GetOutOfBandIpv4Gateway returns the OutOfBandIpv4Gateway field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpv4Gateway() string {
	if o == nil || o.OutOfBandIpv4Gateway == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv4Gateway
}

// GetOutOfBandIpv4GatewayOk returns a tuple with the OutOfBandIpv4Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpv4GatewayOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv4Gateway == nil {
		return nil, false
	}
	return o.OutOfBandIpv4Gateway, true
}

// HasOutOfBandIpv4Gateway returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpv4Gateway() bool {
	if o != nil && o.OutOfBandIpv4Gateway != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv4Gateway gets a reference to the given string and assigns it to the OutOfBandIpv4Gateway field.
func (o *NetworkElement) SetOutOfBandIpv4Gateway(v string) {
	o.OutOfBandIpv4Gateway = &v
}

// GetOutOfBandIpv4Mask returns the OutOfBandIpv4Mask field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpv4Mask() string {
	if o == nil || o.OutOfBandIpv4Mask == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv4Mask
}

// GetOutOfBandIpv4MaskOk returns a tuple with the OutOfBandIpv4Mask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpv4MaskOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv4Mask == nil {
		return nil, false
	}
	return o.OutOfBandIpv4Mask, true
}

// HasOutOfBandIpv4Mask returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpv4Mask() bool {
	if o != nil && o.OutOfBandIpv4Mask != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv4Mask gets a reference to the given string and assigns it to the OutOfBandIpv4Mask field.
func (o *NetworkElement) SetOutOfBandIpv4Mask(v string) {
	o.OutOfBandIpv4Mask = &v
}

// GetOutOfBandIpv6Address returns the OutOfBandIpv6Address field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpv6Address() string {
	if o == nil || o.OutOfBandIpv6Address == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv6Address
}

// GetOutOfBandIpv6AddressOk returns a tuple with the OutOfBandIpv6Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpv6AddressOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv6Address == nil {
		return nil, false
	}
	return o.OutOfBandIpv6Address, true
}

// HasOutOfBandIpv6Address returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpv6Address() bool {
	if o != nil && o.OutOfBandIpv6Address != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv6Address gets a reference to the given string and assigns it to the OutOfBandIpv6Address field.
func (o *NetworkElement) SetOutOfBandIpv6Address(v string) {
	o.OutOfBandIpv6Address = &v
}

// GetOutOfBandIpv6Gateway returns the OutOfBandIpv6Gateway field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpv6Gateway() string {
	if o == nil || o.OutOfBandIpv6Gateway == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv6Gateway
}

// GetOutOfBandIpv6GatewayOk returns a tuple with the OutOfBandIpv6Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpv6GatewayOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv6Gateway == nil {
		return nil, false
	}
	return o.OutOfBandIpv6Gateway, true
}

// HasOutOfBandIpv6Gateway returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpv6Gateway() bool {
	if o != nil && o.OutOfBandIpv6Gateway != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv6Gateway gets a reference to the given string and assigns it to the OutOfBandIpv6Gateway field.
func (o *NetworkElement) SetOutOfBandIpv6Gateway(v string) {
	o.OutOfBandIpv6Gateway = &v
}

// GetOutOfBandIpv6Prefix returns the OutOfBandIpv6Prefix field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandIpv6Prefix() string {
	if o == nil || o.OutOfBandIpv6Prefix == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandIpv6Prefix
}

// GetOutOfBandIpv6PrefixOk returns a tuple with the OutOfBandIpv6Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandIpv6PrefixOk() (*string, bool) {
	if o == nil || o.OutOfBandIpv6Prefix == nil {
		return nil, false
	}
	return o.OutOfBandIpv6Prefix, true
}

// HasOutOfBandIpv6Prefix returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandIpv6Prefix() bool {
	if o != nil && o.OutOfBandIpv6Prefix != nil {
		return true
	}

	return false
}

// SetOutOfBandIpv6Prefix gets a reference to the given string and assigns it to the OutOfBandIpv6Prefix field.
func (o *NetworkElement) SetOutOfBandIpv6Prefix(v string) {
	o.OutOfBandIpv6Prefix = &v
}

// GetOutOfBandMac returns the OutOfBandMac field value if set, zero value otherwise.
func (o *NetworkElement) GetOutOfBandMac() string {
	if o == nil || o.OutOfBandMac == nil {
		var ret string
		return ret
	}
	return *o.OutOfBandMac
}

// GetOutOfBandMacOk returns a tuple with the OutOfBandMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetOutOfBandMacOk() (*string, bool) {
	if o == nil || o.OutOfBandMac == nil {
		return nil, false
	}
	return o.OutOfBandMac, true
}

// HasOutOfBandMac returns a boolean if a field has been set.
func (o *NetworkElement) HasOutOfBandMac() bool {
	if o != nil && o.OutOfBandMac != nil {
		return true
	}

	return false
}

// SetOutOfBandMac gets a reference to the given string and assigns it to the OutOfBandMac field.
func (o *NetworkElement) SetOutOfBandMac(v string) {
	o.OutOfBandMac = &v
}

// GetSwitchId returns the SwitchId field value if set, zero value otherwise.
func (o *NetworkElement) GetSwitchId() string {
	if o == nil || o.SwitchId == nil {
		var ret string
		return ret
	}
	return *o.SwitchId
}

// GetSwitchIdOk returns a tuple with the SwitchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetSwitchIdOk() (*string, bool) {
	if o == nil || o.SwitchId == nil {
		return nil, false
	}
	return o.SwitchId, true
}

// HasSwitchId returns a boolean if a field has been set.
func (o *NetworkElement) HasSwitchId() bool {
	if o != nil && o.SwitchId != nil {
		return true
	}

	return false
}

// SetSwitchId gets a reference to the given string and assigns it to the SwitchId field.
func (o *NetworkElement) SetSwitchId(v string) {
	o.SwitchId = &v
}

// GetTotalMemory returns the TotalMemory field value if set, zero value otherwise.
func (o *NetworkElement) GetTotalMemory() int64 {
	if o == nil || o.TotalMemory == nil {
		var ret int64
		return ret
	}
	return *o.TotalMemory
}

// GetTotalMemoryOk returns a tuple with the TotalMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetTotalMemoryOk() (*int64, bool) {
	if o == nil || o.TotalMemory == nil {
		return nil, false
	}
	return o.TotalMemory, true
}

// HasTotalMemory returns a boolean if a field has been set.
func (o *NetworkElement) HasTotalMemory() bool {
	if o != nil && o.TotalMemory != nil {
		return true
	}

	return false
}

// SetTotalMemory gets a reference to the given int64 and assigns it to the TotalMemory field.
func (o *NetworkElement) SetTotalMemory(v int64) {
	o.TotalMemory = &v
}

// GetCards returns the Cards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetCards() []EquipmentSwitchCardRelationship {
	if o == nil {
		var ret []EquipmentSwitchCardRelationship
		return ret
	}
	return o.Cards
}

// GetCardsOk returns a tuple with the Cards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetCardsOk() (*[]EquipmentSwitchCardRelationship, bool) {
	if o == nil || o.Cards == nil {
		return nil, false
	}
	return &o.Cards, true
}

// HasCards returns a boolean if a field has been set.
func (o *NetworkElement) HasCards() bool {
	if o != nil && o.Cards != nil {
		return true
	}

	return false
}

// SetCards gets a reference to the given []EquipmentSwitchCardRelationship and assigns it to the Cards field.
func (o *NetworkElement) SetCards(v []EquipmentSwitchCardRelationship) {
	o.Cards = v
}

// GetFanmodules returns the Fanmodules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetFanmodules() []EquipmentFanModuleRelationship {
	if o == nil {
		var ret []EquipmentFanModuleRelationship
		return ret
	}
	return o.Fanmodules
}

// GetFanmodulesOk returns a tuple with the Fanmodules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetFanmodulesOk() (*[]EquipmentFanModuleRelationship, bool) {
	if o == nil || o.Fanmodules == nil {
		return nil, false
	}
	return &o.Fanmodules, true
}

// HasFanmodules returns a boolean if a field has been set.
func (o *NetworkElement) HasFanmodules() bool {
	if o != nil && o.Fanmodules != nil {
		return true
	}

	return false
}

// SetFanmodules gets a reference to the given []EquipmentFanModuleRelationship and assigns it to the Fanmodules field.
func (o *NetworkElement) SetFanmodules(v []EquipmentFanModuleRelationship) {
	o.Fanmodules = v
}

// GetInventoryDeviceInfo returns the InventoryDeviceInfo field value if set, zero value otherwise.
func (o *NetworkElement) GetInventoryDeviceInfo() InventoryDeviceInfoRelationship {
	if o == nil || o.InventoryDeviceInfo == nil {
		var ret InventoryDeviceInfoRelationship
		return ret
	}
	return *o.InventoryDeviceInfo
}

// GetInventoryDeviceInfoOk returns a tuple with the InventoryDeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetInventoryDeviceInfoOk() (*InventoryDeviceInfoRelationship, bool) {
	if o == nil || o.InventoryDeviceInfo == nil {
		return nil, false
	}
	return o.InventoryDeviceInfo, true
}

// HasInventoryDeviceInfo returns a boolean if a field has been set.
func (o *NetworkElement) HasInventoryDeviceInfo() bool {
	if o != nil && o.InventoryDeviceInfo != nil {
		return true
	}

	return false
}

// SetInventoryDeviceInfo gets a reference to the given InventoryDeviceInfoRelationship and assigns it to the InventoryDeviceInfo field.
func (o *NetworkElement) SetInventoryDeviceInfo(v InventoryDeviceInfoRelationship) {
	o.InventoryDeviceInfo = &v
}

// GetManagementContoller returns the ManagementContoller field value if set, zero value otherwise.
func (o *NetworkElement) GetManagementContoller() ManagementControllerRelationship {
	if o == nil || o.ManagementContoller == nil {
		var ret ManagementControllerRelationship
		return ret
	}
	return *o.ManagementContoller
}

// GetManagementContollerOk returns a tuple with the ManagementContoller field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetManagementContollerOk() (*ManagementControllerRelationship, bool) {
	if o == nil || o.ManagementContoller == nil {
		return nil, false
	}
	return o.ManagementContoller, true
}

// HasManagementContoller returns a boolean if a field has been set.
func (o *NetworkElement) HasManagementContoller() bool {
	if o != nil && o.ManagementContoller != nil {
		return true
	}

	return false
}

// SetManagementContoller gets a reference to the given ManagementControllerRelationship and assigns it to the ManagementContoller field.
func (o *NetworkElement) SetManagementContoller(v ManagementControllerRelationship) {
	o.ManagementContoller = &v
}

// GetManagementEntity returns the ManagementEntity field value if set, zero value otherwise.
func (o *NetworkElement) GetManagementEntity() ManagementEntityRelationship {
	if o == nil || o.ManagementEntity == nil {
		var ret ManagementEntityRelationship
		return ret
	}
	return *o.ManagementEntity
}

// GetManagementEntityOk returns a tuple with the ManagementEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetManagementEntityOk() (*ManagementEntityRelationship, bool) {
	if o == nil || o.ManagementEntity == nil {
		return nil, false
	}
	return o.ManagementEntity, true
}

// HasManagementEntity returns a boolean if a field has been set.
func (o *NetworkElement) HasManagementEntity() bool {
	if o != nil && o.ManagementEntity != nil {
		return true
	}

	return false
}

// SetManagementEntity gets a reference to the given ManagementEntityRelationship and assigns it to the ManagementEntity field.
func (o *NetworkElement) SetManagementEntity(v ManagementEntityRelationship) {
	o.ManagementEntity = &v
}

// GetNetworkFcZoneInfo returns the NetworkFcZoneInfo field value if set, zero value otherwise.
func (o *NetworkElement) GetNetworkFcZoneInfo() NetworkFcZoneInfoRelationship {
	if o == nil || o.NetworkFcZoneInfo == nil {
		var ret NetworkFcZoneInfoRelationship
		return ret
	}
	return *o.NetworkFcZoneInfo
}

// GetNetworkFcZoneInfoOk returns a tuple with the NetworkFcZoneInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetNetworkFcZoneInfoOk() (*NetworkFcZoneInfoRelationship, bool) {
	if o == nil || o.NetworkFcZoneInfo == nil {
		return nil, false
	}
	return o.NetworkFcZoneInfo, true
}

// HasNetworkFcZoneInfo returns a boolean if a field has been set.
func (o *NetworkElement) HasNetworkFcZoneInfo() bool {
	if o != nil && o.NetworkFcZoneInfo != nil {
		return true
	}

	return false
}

// SetNetworkFcZoneInfo gets a reference to the given NetworkFcZoneInfoRelationship and assigns it to the NetworkFcZoneInfo field.
func (o *NetworkElement) SetNetworkFcZoneInfo(v NetworkFcZoneInfoRelationship) {
	o.NetworkFcZoneInfo = &v
}

// GetNetworkVlanPortInfo returns the NetworkVlanPortInfo field value if set, zero value otherwise.
func (o *NetworkElement) GetNetworkVlanPortInfo() NetworkVlanPortInfoRelationship {
	if o == nil || o.NetworkVlanPortInfo == nil {
		var ret NetworkVlanPortInfoRelationship
		return ret
	}
	return *o.NetworkVlanPortInfo
}

// GetNetworkVlanPortInfoOk returns a tuple with the NetworkVlanPortInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetNetworkVlanPortInfoOk() (*NetworkVlanPortInfoRelationship, bool) {
	if o == nil || o.NetworkVlanPortInfo == nil {
		return nil, false
	}
	return o.NetworkVlanPortInfo, true
}

// HasNetworkVlanPortInfo returns a boolean if a field has been set.
func (o *NetworkElement) HasNetworkVlanPortInfo() bool {
	if o != nil && o.NetworkVlanPortInfo != nil {
		return true
	}

	return false
}

// SetNetworkVlanPortInfo gets a reference to the given NetworkVlanPortInfoRelationship and assigns it to the NetworkVlanPortInfo field.
func (o *NetworkElement) SetNetworkVlanPortInfo(v NetworkVlanPortInfoRelationship) {
	o.NetworkVlanPortInfo = &v
}

// GetPortMacBindings returns the PortMacBindings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetPortMacBindings() []PortMacBindingRelationship {
	if o == nil {
		var ret []PortMacBindingRelationship
		return ret
	}
	return o.PortMacBindings
}

// GetPortMacBindingsOk returns a tuple with the PortMacBindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetPortMacBindingsOk() (*[]PortMacBindingRelationship, bool) {
	if o == nil || o.PortMacBindings == nil {
		return nil, false
	}
	return &o.PortMacBindings, true
}

// HasPortMacBindings returns a boolean if a field has been set.
func (o *NetworkElement) HasPortMacBindings() bool {
	if o != nil && o.PortMacBindings != nil {
		return true
	}

	return false
}

// SetPortMacBindings gets a reference to the given []PortMacBindingRelationship and assigns it to the PortMacBindings field.
func (o *NetworkElement) SetPortMacBindings(v []PortMacBindingRelationship) {
	o.PortMacBindings = v
}

// GetPsus returns the Psus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetPsus() []EquipmentPsuRelationship {
	if o == nil {
		var ret []EquipmentPsuRelationship
		return ret
	}
	return o.Psus
}

// GetPsusOk returns a tuple with the Psus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetPsusOk() (*[]EquipmentPsuRelationship, bool) {
	if o == nil || o.Psus == nil {
		return nil, false
	}
	return &o.Psus, true
}

// HasPsus returns a boolean if a field has been set.
func (o *NetworkElement) HasPsus() bool {
	if o != nil && o.Psus != nil {
		return true
	}

	return false
}

// SetPsus gets a reference to the given []EquipmentPsuRelationship and assigns it to the Psus field.
func (o *NetworkElement) SetPsus(v []EquipmentPsuRelationship) {
	o.Psus = v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *NetworkElement) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NetworkElement) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NetworkElement) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

// GetStorageItems returns the StorageItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkElement) GetStorageItems() []StorageItemRelationship {
	if o == nil {
		var ret []StorageItemRelationship
		return ret
	}
	return o.StorageItems
}

// GetStorageItemsOk returns a tuple with the StorageItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkElement) GetStorageItemsOk() (*[]StorageItemRelationship, bool) {
	if o == nil || o.StorageItems == nil {
		return nil, false
	}
	return &o.StorageItems, true
}

// HasStorageItems returns a boolean if a field has been set.
func (o *NetworkElement) HasStorageItems() bool {
	if o != nil && o.StorageItems != nil {
		return true
	}

	return false
}

// SetStorageItems gets a reference to the given []StorageItemRelationship and assigns it to the StorageItems field.
func (o *NetworkElement) SetStorageItems(v []StorageItemRelationship) {
	o.StorageItems = v
}

// GetTopSystem returns the TopSystem field value if set, zero value otherwise.
func (o *NetworkElement) GetTopSystem() TopSystemRelationship {
	if o == nil || o.TopSystem == nil {
		var ret TopSystemRelationship
		return ret
	}
	return *o.TopSystem
}

// GetTopSystemOk returns a tuple with the TopSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetTopSystemOk() (*TopSystemRelationship, bool) {
	if o == nil || o.TopSystem == nil {
		return nil, false
	}
	return o.TopSystem, true
}

// HasTopSystem returns a boolean if a field has been set.
func (o *NetworkElement) HasTopSystem() bool {
	if o != nil && o.TopSystem != nil {
		return true
	}

	return false
}

// SetTopSystem gets a reference to the given TopSystemRelationship and assigns it to the TopSystem field.
func (o *NetworkElement) SetTopSystem(v TopSystemRelationship) {
	o.TopSystem = &v
}

// GetUcsmRunningFirmware returns the UcsmRunningFirmware field value if set, zero value otherwise.
func (o *NetworkElement) GetUcsmRunningFirmware() FirmwareRunningFirmwareRelationship {
	if o == nil || o.UcsmRunningFirmware == nil {
		var ret FirmwareRunningFirmwareRelationship
		return ret
	}
	return *o.UcsmRunningFirmware
}

// GetUcsmRunningFirmwareOk returns a tuple with the UcsmRunningFirmware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkElement) GetUcsmRunningFirmwareOk() (*FirmwareRunningFirmwareRelationship, bool) {
	if o == nil || o.UcsmRunningFirmware == nil {
		return nil, false
	}
	return o.UcsmRunningFirmware, true
}

// HasUcsmRunningFirmware returns a boolean if a field has been set.
func (o *NetworkElement) HasUcsmRunningFirmware() bool {
	if o != nil && o.UcsmRunningFirmware != nil {
		return true
	}

	return false
}

// SetUcsmRunningFirmware gets a reference to the given FirmwareRunningFirmwareRelationship and assigns it to the UcsmRunningFirmware field.
func (o *NetworkElement) SetUcsmRunningFirmware(v FirmwareRunningFirmwareRelationship) {
	o.UcsmRunningFirmware = &v
}

func (o NetworkElement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return []byte{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return []byte{}, errEquipmentBase
	}
	if o.AdminEvacState != nil {
		toSerialize["AdminEvacState"] = o.AdminEvacState
	}
	if o.AdminInbandInterfaceState != nil {
		toSerialize["AdminInbandInterfaceState"] = o.AdminInbandInterfaceState
	}
	if o.AvailableMemory != nil {
		toSerialize["AvailableMemory"] = o.AvailableMemory
	}
	if o.EthernetMode != nil {
		toSerialize["EthernetMode"] = o.EthernetMode
	}
	if o.FaultSummary != nil {
		toSerialize["FaultSummary"] = o.FaultSummary
	}
	if o.FcMode != nil {
		toSerialize["FcMode"] = o.FcMode
	}
	if o.InbandIpAddress != nil {
		toSerialize["InbandIpAddress"] = o.InbandIpAddress
	}
	if o.InbandIpGateway != nil {
		toSerialize["InbandIpGateway"] = o.InbandIpGateway
	}
	if o.InbandIpMask != nil {
		toSerialize["InbandIpMask"] = o.InbandIpMask
	}
	if o.InbandVlan != nil {
		toSerialize["InbandVlan"] = o.InbandVlan
	}
	if o.OperEvacState != nil {
		toSerialize["OperEvacState"] = o.OperEvacState
	}
	if o.Operability != nil {
		toSerialize["Operability"] = o.Operability
	}
	if o.OutOfBandIpAddress != nil {
		toSerialize["OutOfBandIpAddress"] = o.OutOfBandIpAddress
	}
	if o.OutOfBandIpGateway != nil {
		toSerialize["OutOfBandIpGateway"] = o.OutOfBandIpGateway
	}
	if o.OutOfBandIpMask != nil {
		toSerialize["OutOfBandIpMask"] = o.OutOfBandIpMask
	}
	if o.OutOfBandIpv4Address != nil {
		toSerialize["OutOfBandIpv4Address"] = o.OutOfBandIpv4Address
	}
	if o.OutOfBandIpv4Gateway != nil {
		toSerialize["OutOfBandIpv4Gateway"] = o.OutOfBandIpv4Gateway
	}
	if o.OutOfBandIpv4Mask != nil {
		toSerialize["OutOfBandIpv4Mask"] = o.OutOfBandIpv4Mask
	}
	if o.OutOfBandIpv6Address != nil {
		toSerialize["OutOfBandIpv6Address"] = o.OutOfBandIpv6Address
	}
	if o.OutOfBandIpv6Gateway != nil {
		toSerialize["OutOfBandIpv6Gateway"] = o.OutOfBandIpv6Gateway
	}
	if o.OutOfBandIpv6Prefix != nil {
		toSerialize["OutOfBandIpv6Prefix"] = o.OutOfBandIpv6Prefix
	}
	if o.OutOfBandMac != nil {
		toSerialize["OutOfBandMac"] = o.OutOfBandMac
	}
	if o.SwitchId != nil {
		toSerialize["SwitchId"] = o.SwitchId
	}
	if o.TotalMemory != nil {
		toSerialize["TotalMemory"] = o.TotalMemory
	}
	if o.Cards != nil {
		toSerialize["Cards"] = o.Cards
	}
	if o.Fanmodules != nil {
		toSerialize["Fanmodules"] = o.Fanmodules
	}
	if o.InventoryDeviceInfo != nil {
		toSerialize["InventoryDeviceInfo"] = o.InventoryDeviceInfo
	}
	if o.ManagementContoller != nil {
		toSerialize["ManagementContoller"] = o.ManagementContoller
	}
	if o.ManagementEntity != nil {
		toSerialize["ManagementEntity"] = o.ManagementEntity
	}
	if o.NetworkFcZoneInfo != nil {
		toSerialize["NetworkFcZoneInfo"] = o.NetworkFcZoneInfo
	}
	if o.NetworkVlanPortInfo != nil {
		toSerialize["NetworkVlanPortInfo"] = o.NetworkVlanPortInfo
	}
	if o.PortMacBindings != nil {
		toSerialize["PortMacBindings"] = o.PortMacBindings
	}
	if o.Psus != nil {
		toSerialize["Psus"] = o.Psus
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}
	if o.StorageItems != nil {
		toSerialize["StorageItems"] = o.StorageItems
	}
	if o.TopSystem != nil {
		toSerialize["TopSystem"] = o.TopSystem
	}
	if o.UcsmRunningFirmware != nil {
		toSerialize["UcsmRunningFirmware"] = o.UcsmRunningFirmware
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *NetworkElement) UnmarshalJSON(bytes []byte) (err error) {
	type NetworkElementWithoutEmbeddedStruct struct {
		// Administratively configured state of Fabric Evacuation feature, for this switch.
		AdminEvacState *string `json:"AdminEvacState,omitempty"`
		// The administrative state of the network Element inband management interface.
		AdminInbandInterfaceState *string `json:"AdminInbandInterfaceState,omitempty"`
		// Available memory (un-used) on this switch platform.
		AvailableMemory *string `json:"AvailableMemory,omitempty"`
		// The user configured Ethernet operational mode for this switch (End-Host or Switching).
		EthernetMode *string `json:"EthernetMode,omitempty"`
		// The fault summary of the network Element out-of-band management interface.
		FaultSummary *int64 `json:"FaultSummary,omitempty"`
		// The user configured FC operational mode for this switch (End-Host or Switching).
		FcMode *string `json:"FcMode,omitempty"`
		// The IP address of the network Element inband management interface.
		InbandIpAddress *string `json:"InbandIpAddress,omitempty"`
		// The default gateway of the network Element inband management interface.
		InbandIpGateway *string `json:"InbandIpGateway,omitempty"`
		// The network mask of the network Element inband management interface.
		InbandIpMask *string `json:"InbandIpMask,omitempty"`
		// The VLAN ID of the network Element inband management interface.
		InbandVlan *int64 `json:"InbandVlan,omitempty"`
		// Operational state of the Fabric Evacuation feature, for this switch.
		OperEvacState *string `json:"OperEvacState,omitempty"`
		// The switch's current overall operational/health state.
		Operability *string `json:"Operability,omitempty"`
		// The IP address of the network Element out-of-band management interface.
		OutOfBandIpAddress *string `json:"OutOfBandIpAddress,omitempty"`
		// The default gateway of the network Element out-of-band management interface.
		OutOfBandIpGateway *string `json:"OutOfBandIpGateway,omitempty"`
		// The network mask of the network Element out-of-band management interface.
		OutOfBandIpMask *string `json:"OutOfBandIpMask,omitempty"`
		// The IPv4 address of the network Element out-of-band management interface.
		OutOfBandIpv4Address *string `json:"OutOfBandIpv4Address,omitempty"`
		// The default IPv4 gateway of the network Element out-of-band management interface.
		OutOfBandIpv4Gateway *string `json:"OutOfBandIpv4Gateway,omitempty"`
		// The network mask of the network Element out-of-band management interface.
		OutOfBandIpv4Mask *string `json:"OutOfBandIpv4Mask,omitempty"`
		// The IPv6 address of the network Element out-of-band management interface.
		OutOfBandIpv6Address *string `json:"OutOfBandIpv6Address,omitempty"`
		// The default IPv6 gateway of the network Element out-of-band management interface.
		OutOfBandIpv6Gateway *string `json:"OutOfBandIpv6Gateway,omitempty"`
		// The network mask of the network Element out-of-band management interface.
		OutOfBandIpv6Prefix *string `json:"OutOfBandIpv6Prefix,omitempty"`
		// The MAC address of the network Element out-of-band management interface.
		OutOfBandMac *string `json:"OutOfBandMac,omitempty"`
		// The Switch Id of the network Element.
		SwitchId *string `json:"SwitchId,omitempty"`
		// Total available memory on this switch platform.
		TotalMemory *int64 `json:"TotalMemory,omitempty"`
		// An array of relationships to equipmentSwitchCard resources.
		Cards []EquipmentSwitchCardRelationship `json:"Cards,omitempty"`
		// An array of relationships to equipmentFanModule resources.
		Fanmodules          []EquipmentFanModuleRelationship  `json:"Fanmodules,omitempty"`
		InventoryDeviceInfo *InventoryDeviceInfoRelationship  `json:"InventoryDeviceInfo,omitempty"`
		ManagementContoller *ManagementControllerRelationship `json:"ManagementContoller,omitempty"`
		ManagementEntity    *ManagementEntityRelationship     `json:"ManagementEntity,omitempty"`
		NetworkFcZoneInfo   *NetworkFcZoneInfoRelationship    `json:"NetworkFcZoneInfo,omitempty"`
		NetworkVlanPortInfo *NetworkVlanPortInfoRelationship  `json:"NetworkVlanPortInfo,omitempty"`
		// An array of relationships to portMacBinding resources.
		PortMacBindings []PortMacBindingRelationship `json:"PortMacBindings,omitempty"`
		// An array of relationships to equipmentPsu resources.
		Psus             []EquipmentPsuRelationship           `json:"Psus,omitempty"`
		RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
		// An array of relationships to storageItem resources.
		StorageItems        []StorageItemRelationship            `json:"StorageItems,omitempty"`
		TopSystem           *TopSystemRelationship               `json:"TopSystem,omitempty"`
		UcsmRunningFirmware *FirmwareRunningFirmwareRelationship `json:"UcsmRunningFirmware,omitempty"`
	}

	varNetworkElementWithoutEmbeddedStruct := NetworkElementWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varNetworkElementWithoutEmbeddedStruct)
	if err == nil {
		varNetworkElement := _NetworkElement{}
		varNetworkElement.AdminEvacState = varNetworkElementWithoutEmbeddedStruct.AdminEvacState
		varNetworkElement.AdminInbandInterfaceState = varNetworkElementWithoutEmbeddedStruct.AdminInbandInterfaceState
		varNetworkElement.AvailableMemory = varNetworkElementWithoutEmbeddedStruct.AvailableMemory
		varNetworkElement.EthernetMode = varNetworkElementWithoutEmbeddedStruct.EthernetMode
		varNetworkElement.FaultSummary = varNetworkElementWithoutEmbeddedStruct.FaultSummary
		varNetworkElement.FcMode = varNetworkElementWithoutEmbeddedStruct.FcMode
		varNetworkElement.InbandIpAddress = varNetworkElementWithoutEmbeddedStruct.InbandIpAddress
		varNetworkElement.InbandIpGateway = varNetworkElementWithoutEmbeddedStruct.InbandIpGateway
		varNetworkElement.InbandIpMask = varNetworkElementWithoutEmbeddedStruct.InbandIpMask
		varNetworkElement.InbandVlan = varNetworkElementWithoutEmbeddedStruct.InbandVlan
		varNetworkElement.OperEvacState = varNetworkElementWithoutEmbeddedStruct.OperEvacState
		varNetworkElement.Operability = varNetworkElementWithoutEmbeddedStruct.Operability
		varNetworkElement.OutOfBandIpAddress = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpAddress
		varNetworkElement.OutOfBandIpGateway = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpGateway
		varNetworkElement.OutOfBandIpMask = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpMask
		varNetworkElement.OutOfBandIpv4Address = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpv4Address
		varNetworkElement.OutOfBandIpv4Gateway = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpv4Gateway
		varNetworkElement.OutOfBandIpv4Mask = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpv4Mask
		varNetworkElement.OutOfBandIpv6Address = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpv6Address
		varNetworkElement.OutOfBandIpv6Gateway = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpv6Gateway
		varNetworkElement.OutOfBandIpv6Prefix = varNetworkElementWithoutEmbeddedStruct.OutOfBandIpv6Prefix
		varNetworkElement.OutOfBandMac = varNetworkElementWithoutEmbeddedStruct.OutOfBandMac
		varNetworkElement.SwitchId = varNetworkElementWithoutEmbeddedStruct.SwitchId
		varNetworkElement.TotalMemory = varNetworkElementWithoutEmbeddedStruct.TotalMemory
		varNetworkElement.Cards = varNetworkElementWithoutEmbeddedStruct.Cards
		varNetworkElement.Fanmodules = varNetworkElementWithoutEmbeddedStruct.Fanmodules
		varNetworkElement.InventoryDeviceInfo = varNetworkElementWithoutEmbeddedStruct.InventoryDeviceInfo
		varNetworkElement.ManagementContoller = varNetworkElementWithoutEmbeddedStruct.ManagementContoller
		varNetworkElement.ManagementEntity = varNetworkElementWithoutEmbeddedStruct.ManagementEntity
		varNetworkElement.NetworkFcZoneInfo = varNetworkElementWithoutEmbeddedStruct.NetworkFcZoneInfo
		varNetworkElement.NetworkVlanPortInfo = varNetworkElementWithoutEmbeddedStruct.NetworkVlanPortInfo
		varNetworkElement.PortMacBindings = varNetworkElementWithoutEmbeddedStruct.PortMacBindings
		varNetworkElement.Psus = varNetworkElementWithoutEmbeddedStruct.Psus
		varNetworkElement.RegisteredDevice = varNetworkElementWithoutEmbeddedStruct.RegisteredDevice
		varNetworkElement.StorageItems = varNetworkElementWithoutEmbeddedStruct.StorageItems
		varNetworkElement.TopSystem = varNetworkElementWithoutEmbeddedStruct.TopSystem
		varNetworkElement.UcsmRunningFirmware = varNetworkElementWithoutEmbeddedStruct.UcsmRunningFirmware
		*o = NetworkElement(varNetworkElement)
	} else {
		return err
	}

	varNetworkElement := _NetworkElement{}

	err = json.Unmarshal(bytes, &varNetworkElement)
	if err == nil {
		o.EquipmentBase = varNetworkElement.EquipmentBase
	} else {
		return err
	}
	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "AdminEvacState")
		delete(additionalProperties, "AdminInbandInterfaceState")
		delete(additionalProperties, "AvailableMemory")
		delete(additionalProperties, "EthernetMode")
		delete(additionalProperties, "FaultSummary")
		delete(additionalProperties, "FcMode")
		delete(additionalProperties, "InbandIpAddress")
		delete(additionalProperties, "InbandIpGateway")
		delete(additionalProperties, "InbandIpMask")
		delete(additionalProperties, "InbandVlan")
		delete(additionalProperties, "OperEvacState")
		delete(additionalProperties, "Operability")
		delete(additionalProperties, "OutOfBandIpAddress")
		delete(additionalProperties, "OutOfBandIpGateway")
		delete(additionalProperties, "OutOfBandIpMask")
		delete(additionalProperties, "OutOfBandIpv4Address")
		delete(additionalProperties, "OutOfBandIpv4Gateway")
		delete(additionalProperties, "OutOfBandIpv4Mask")
		delete(additionalProperties, "OutOfBandIpv6Address")
		delete(additionalProperties, "OutOfBandIpv6Gateway")
		delete(additionalProperties, "OutOfBandIpv6Prefix")
		delete(additionalProperties, "OutOfBandMac")
		delete(additionalProperties, "SwitchId")
		delete(additionalProperties, "TotalMemory")
		delete(additionalProperties, "Cards")
		delete(additionalProperties, "Fanmodules")
		delete(additionalProperties, "InventoryDeviceInfo")
		delete(additionalProperties, "ManagementContoller")
		delete(additionalProperties, "ManagementEntity")
		delete(additionalProperties, "NetworkFcZoneInfo")
		delete(additionalProperties, "NetworkVlanPortInfo")
		delete(additionalProperties, "PortMacBindings")
		delete(additionalProperties, "Psus")
		delete(additionalProperties, "RegisteredDevice")
		delete(additionalProperties, "StorageItems")
		delete(additionalProperties, "TopSystem")
		delete(additionalProperties, "UcsmRunningFirmware")

		// remove fields from embedded structs
		reflectEquipmentBase := reflect.ValueOf(o.EquipmentBase)
		for i := 0; i < reflectEquipmentBase.Type().NumField(); i++ {
			t := reflectEquipmentBase.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkElement struct {
	value *NetworkElement
	isSet bool
}

func (v NullableNetworkElement) Get() *NetworkElement {
	return v.value
}

func (v *NullableNetworkElement) Set(val *NetworkElement) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkElement) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkElement(val *NetworkElement) *NullableNetworkElement {
	return &NullableNetworkElement{value: val, isSet: true}
}

func (v NullableNetworkElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
