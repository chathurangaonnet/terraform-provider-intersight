/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-04-12T21:47:47-07:00.
 *
 * API version: 1.0.9-1617
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// FirmwareUpgradeStatus Status of the upgrade operation includes the status of download and upgrade stages.
type FirmwareUpgradeStatus struct {
	MoBaseMo
	// The error message from the endpoint during the download.
	DownloadError *string `json:"DownloadError,omitempty"`
	// The percentage of the image downloaded in the endpoint.
	DownloadPercentage *int64 `json:"DownloadPercentage,omitempty"`
	// The image download stages. Example:downloading, flashing.
	DownloadStage *string `json:"DownloadStage,omitempty"`
	// The download status of the image in the endpoint.
	DownloadStatus *string `json:"DownloadStatus,omitempty"`
	// The server power status after the upgrade request is submitted in the endpoint.
	EpPowerStatus *string `json:"EpPowerStatus,omitempty"`
	// The reason for the operation failure.
	OverallError *string `json:"OverallError,omitempty"`
	// The overall percentage of the operation.
	OverallPercentage *int64 `json:"OverallPercentage,omitempty"`
	// The overall status of the operation.
	Overallstatus *string `json:"Overallstatus,omitempty"`
	// Pending reason for the upgrade waiting.
	PendingType *string                      `json:"PendingType,omitempty"`
	Upgrade     *FirmwareUpgradeRelationship `json:"Upgrade,omitempty"`
}

// NewFirmwareUpgradeStatus instantiates a new FirmwareUpgradeStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirmwareUpgradeStatus() *FirmwareUpgradeStatus {
	this := FirmwareUpgradeStatus{}
	var epPowerStatus string = "none"
	this.EpPowerStatus = &epPowerStatus
	var overallstatus string = "none"
	this.Overallstatus = &overallstatus
	var pendingType string = "none"
	this.PendingType = &pendingType
	return &this
}

// NewFirmwareUpgradeStatusWithDefaults instantiates a new FirmwareUpgradeStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirmwareUpgradeStatusWithDefaults() *FirmwareUpgradeStatus {
	this := FirmwareUpgradeStatus{}
	var epPowerStatus string = "none"
	this.EpPowerStatus = &epPowerStatus
	var overallstatus string = "none"
	this.Overallstatus = &overallstatus
	var pendingType string = "none"
	this.PendingType = &pendingType
	return &this
}

// GetDownloadError returns the DownloadError field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetDownloadError() string {
	if o == nil || o.DownloadError == nil {
		var ret string
		return ret
	}
	return *o.DownloadError
}

// GetDownloadErrorOk returns a tuple with the DownloadError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetDownloadErrorOk() (*string, bool) {
	if o == nil || o.DownloadError == nil {
		return nil, false
	}
	return o.DownloadError, true
}

// HasDownloadError returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasDownloadError() bool {
	if o != nil && o.DownloadError != nil {
		return true
	}

	return false
}

// SetDownloadError gets a reference to the given string and assigns it to the DownloadError field.
func (o *FirmwareUpgradeStatus) SetDownloadError(v string) {
	o.DownloadError = &v
}

// GetDownloadPercentage returns the DownloadPercentage field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetDownloadPercentage() int64 {
	if o == nil || o.DownloadPercentage == nil {
		var ret int64
		return ret
	}
	return *o.DownloadPercentage
}

// GetDownloadPercentageOk returns a tuple with the DownloadPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetDownloadPercentageOk() (*int64, bool) {
	if o == nil || o.DownloadPercentage == nil {
		return nil, false
	}
	return o.DownloadPercentage, true
}

// HasDownloadPercentage returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasDownloadPercentage() bool {
	if o != nil && o.DownloadPercentage != nil {
		return true
	}

	return false
}

// SetDownloadPercentage gets a reference to the given int64 and assigns it to the DownloadPercentage field.
func (o *FirmwareUpgradeStatus) SetDownloadPercentage(v int64) {
	o.DownloadPercentage = &v
}

// GetDownloadStage returns the DownloadStage field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetDownloadStage() string {
	if o == nil || o.DownloadStage == nil {
		var ret string
		return ret
	}
	return *o.DownloadStage
}

// GetDownloadStageOk returns a tuple with the DownloadStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetDownloadStageOk() (*string, bool) {
	if o == nil || o.DownloadStage == nil {
		return nil, false
	}
	return o.DownloadStage, true
}

// HasDownloadStage returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasDownloadStage() bool {
	if o != nil && o.DownloadStage != nil {
		return true
	}

	return false
}

// SetDownloadStage gets a reference to the given string and assigns it to the DownloadStage field.
func (o *FirmwareUpgradeStatus) SetDownloadStage(v string) {
	o.DownloadStage = &v
}

// GetDownloadStatus returns the DownloadStatus field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetDownloadStatus() string {
	if o == nil || o.DownloadStatus == nil {
		var ret string
		return ret
	}
	return *o.DownloadStatus
}

// GetDownloadStatusOk returns a tuple with the DownloadStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetDownloadStatusOk() (*string, bool) {
	if o == nil || o.DownloadStatus == nil {
		return nil, false
	}
	return o.DownloadStatus, true
}

// HasDownloadStatus returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasDownloadStatus() bool {
	if o != nil && o.DownloadStatus != nil {
		return true
	}

	return false
}

// SetDownloadStatus gets a reference to the given string and assigns it to the DownloadStatus field.
func (o *FirmwareUpgradeStatus) SetDownloadStatus(v string) {
	o.DownloadStatus = &v
}

// GetEpPowerStatus returns the EpPowerStatus field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetEpPowerStatus() string {
	if o == nil || o.EpPowerStatus == nil {
		var ret string
		return ret
	}
	return *o.EpPowerStatus
}

// GetEpPowerStatusOk returns a tuple with the EpPowerStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetEpPowerStatusOk() (*string, bool) {
	if o == nil || o.EpPowerStatus == nil {
		return nil, false
	}
	return o.EpPowerStatus, true
}

// HasEpPowerStatus returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasEpPowerStatus() bool {
	if o != nil && o.EpPowerStatus != nil {
		return true
	}

	return false
}

// SetEpPowerStatus gets a reference to the given string and assigns it to the EpPowerStatus field.
func (o *FirmwareUpgradeStatus) SetEpPowerStatus(v string) {
	o.EpPowerStatus = &v
}

// GetOverallError returns the OverallError field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetOverallError() string {
	if o == nil || o.OverallError == nil {
		var ret string
		return ret
	}
	return *o.OverallError
}

// GetOverallErrorOk returns a tuple with the OverallError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetOverallErrorOk() (*string, bool) {
	if o == nil || o.OverallError == nil {
		return nil, false
	}
	return o.OverallError, true
}

// HasOverallError returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasOverallError() bool {
	if o != nil && o.OverallError != nil {
		return true
	}

	return false
}

// SetOverallError gets a reference to the given string and assigns it to the OverallError field.
func (o *FirmwareUpgradeStatus) SetOverallError(v string) {
	o.OverallError = &v
}

// GetOverallPercentage returns the OverallPercentage field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetOverallPercentage() int64 {
	if o == nil || o.OverallPercentage == nil {
		var ret int64
		return ret
	}
	return *o.OverallPercentage
}

// GetOverallPercentageOk returns a tuple with the OverallPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetOverallPercentageOk() (*int64, bool) {
	if o == nil || o.OverallPercentage == nil {
		return nil, false
	}
	return o.OverallPercentage, true
}

// HasOverallPercentage returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasOverallPercentage() bool {
	if o != nil && o.OverallPercentage != nil {
		return true
	}

	return false
}

// SetOverallPercentage gets a reference to the given int64 and assigns it to the OverallPercentage field.
func (o *FirmwareUpgradeStatus) SetOverallPercentage(v int64) {
	o.OverallPercentage = &v
}

// GetOverallstatus returns the Overallstatus field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetOverallstatus() string {
	if o == nil || o.Overallstatus == nil {
		var ret string
		return ret
	}
	return *o.Overallstatus
}

// GetOverallstatusOk returns a tuple with the Overallstatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetOverallstatusOk() (*string, bool) {
	if o == nil || o.Overallstatus == nil {
		return nil, false
	}
	return o.Overallstatus, true
}

// HasOverallstatus returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasOverallstatus() bool {
	if o != nil && o.Overallstatus != nil {
		return true
	}

	return false
}

// SetOverallstatus gets a reference to the given string and assigns it to the Overallstatus field.
func (o *FirmwareUpgradeStatus) SetOverallstatus(v string) {
	o.Overallstatus = &v
}

// GetPendingType returns the PendingType field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetPendingType() string {
	if o == nil || o.PendingType == nil {
		var ret string
		return ret
	}
	return *o.PendingType
}

// GetPendingTypeOk returns a tuple with the PendingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetPendingTypeOk() (*string, bool) {
	if o == nil || o.PendingType == nil {
		return nil, false
	}
	return o.PendingType, true
}

// HasPendingType returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasPendingType() bool {
	if o != nil && o.PendingType != nil {
		return true
	}

	return false
}

// SetPendingType gets a reference to the given string and assigns it to the PendingType field.
func (o *FirmwareUpgradeStatus) SetPendingType(v string) {
	o.PendingType = &v
}

// GetUpgrade returns the Upgrade field value if set, zero value otherwise.
func (o *FirmwareUpgradeStatus) GetUpgrade() FirmwareUpgradeRelationship {
	if o == nil || o.Upgrade == nil {
		var ret FirmwareUpgradeRelationship
		return ret
	}
	return *o.Upgrade
}

// GetUpgradeOk returns a tuple with the Upgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgradeStatus) GetUpgradeOk() (*FirmwareUpgradeRelationship, bool) {
	if o == nil || o.Upgrade == nil {
		return nil, false
	}
	return o.Upgrade, true
}

// HasUpgrade returns a boolean if a field has been set.
func (o *FirmwareUpgradeStatus) HasUpgrade() bool {
	if o != nil && o.Upgrade != nil {
		return true
	}

	return false
}

// SetUpgrade gets a reference to the given FirmwareUpgradeRelationship and assigns it to the Upgrade field.
func (o *FirmwareUpgradeStatus) SetUpgrade(v FirmwareUpgradeRelationship) {
	o.Upgrade = &v
}

func (o FirmwareUpgradeStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if o.DownloadError != nil {
		toSerialize["DownloadError"] = o.DownloadError
	}
	if o.DownloadPercentage != nil {
		toSerialize["DownloadPercentage"] = o.DownloadPercentage
	}
	if o.DownloadStage != nil {
		toSerialize["DownloadStage"] = o.DownloadStage
	}
	if o.DownloadStatus != nil {
		toSerialize["DownloadStatus"] = o.DownloadStatus
	}
	if o.EpPowerStatus != nil {
		toSerialize["EpPowerStatus"] = o.EpPowerStatus
	}
	if o.OverallError != nil {
		toSerialize["OverallError"] = o.OverallError
	}
	if o.OverallPercentage != nil {
		toSerialize["OverallPercentage"] = o.OverallPercentage
	}
	if o.Overallstatus != nil {
		toSerialize["Overallstatus"] = o.Overallstatus
	}
	if o.PendingType != nil {
		toSerialize["PendingType"] = o.PendingType
	}
	if o.Upgrade != nil {
		toSerialize["Upgrade"] = o.Upgrade
	}
	return json.Marshal(toSerialize)
}

// AsFirmwareUpgradeStatusRelationship wraps this instance of FirmwareUpgradeStatus in FirmwareUpgradeStatusRelationship
func (s *FirmwareUpgradeStatus) AsFirmwareUpgradeStatusRelationship() FirmwareUpgradeStatusRelationship {
	return FirmwareUpgradeStatusRelationship{FirmwareUpgradeStatusRelationshipInterface: s}
}

type NullableFirmwareUpgradeStatus struct {
	value *FirmwareUpgradeStatus
	isSet bool
}

func (v NullableFirmwareUpgradeStatus) Get() *FirmwareUpgradeStatus {
	return v.value
}

func (v *NullableFirmwareUpgradeStatus) Set(val *FirmwareUpgradeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFirmwareUpgradeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFirmwareUpgradeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirmwareUpgradeStatus(val *FirmwareUpgradeStatus) *NullableFirmwareUpgradeStatus {
	return &NullableFirmwareUpgradeStatus{value: val, isSet: true}
}

func (v NullableFirmwareUpgradeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirmwareUpgradeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
