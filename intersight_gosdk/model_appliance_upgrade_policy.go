/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-19T15:15:17Z.
 *
 * API version: 1.0.9-1903
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
	"time"
)

// ApplianceUpgradePolicy UpgradePolicy stores the Intersight Appliance's software upgrade policy. UpgradePolicy is a sinlgeton managed object. A default upgrade policy is created during the Intersight Appliance setup, and it is configured with an automatic upgrade policy. Automatic upgrade policy lets the system start software upgrade after a pre-defined number of seconds set in the software manifest. Scheduled upgrade policy lets the user start software upgrade at a specified schedule. However, scheduled time cannot be beyond the time limit enforced by the upgrade grace period set in the software manifest.
type ApplianceUpgradePolicy struct {
	MoBaseMo
	// Indicates if the upgrade service is set to automatically start the software upgrade or not. If autoUpgrade is true, then the value of the schedule field is ignored.
	AutoUpgrade *bool `json:"AutoUpgrade,omitempty"`
	// If enabled, allows the user to define a blackout period during which the appliance will not be upgraded.
	BlackoutDatesEnabled *bool `json:"BlackoutDatesEnabled,omitempty"`
	// End date of the black out period.
	BlackoutEndDate *time.Time `json:"BlackoutEndDate,omitempty"`
	// Start date of the black out period. The appliance will not be upgraded during this period.
	BlackoutStartDate *time.Time              `json:"BlackoutStartDate,omitempty"`
	Schedule          *OnpremSchedule         `json:"Schedule,omitempty"`
	Account           *IamAccountRelationship `json:"Account,omitempty"`
}

// NewApplianceUpgradePolicy instantiates a new ApplianceUpgradePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplianceUpgradePolicy() *ApplianceUpgradePolicy {
	this := ApplianceUpgradePolicy{}
	return &this
}

// NewApplianceUpgradePolicyWithDefaults instantiates a new ApplianceUpgradePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplianceUpgradePolicyWithDefaults() *ApplianceUpgradePolicy {
	this := ApplianceUpgradePolicy{}
	return &this
}

// GetAutoUpgrade returns the AutoUpgrade field value if set, zero value otherwise.
func (o *ApplianceUpgradePolicy) GetAutoUpgrade() bool {
	if o == nil || o.AutoUpgrade == nil {
		var ret bool
		return ret
	}
	return *o.AutoUpgrade
}

// GetAutoUpgradeOk returns a tuple with the AutoUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgradePolicy) GetAutoUpgradeOk() (*bool, bool) {
	if o == nil || o.AutoUpgrade == nil {
		return nil, false
	}
	return o.AutoUpgrade, true
}

// HasAutoUpgrade returns a boolean if a field has been set.
func (o *ApplianceUpgradePolicy) HasAutoUpgrade() bool {
	if o != nil && o.AutoUpgrade != nil {
		return true
	}

	return false
}

// SetAutoUpgrade gets a reference to the given bool and assigns it to the AutoUpgrade field.
func (o *ApplianceUpgradePolicy) SetAutoUpgrade(v bool) {
	o.AutoUpgrade = &v
}

// GetBlackoutDatesEnabled returns the BlackoutDatesEnabled field value if set, zero value otherwise.
func (o *ApplianceUpgradePolicy) GetBlackoutDatesEnabled() bool {
	if o == nil || o.BlackoutDatesEnabled == nil {
		var ret bool
		return ret
	}
	return *o.BlackoutDatesEnabled
}

// GetBlackoutDatesEnabledOk returns a tuple with the BlackoutDatesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgradePolicy) GetBlackoutDatesEnabledOk() (*bool, bool) {
	if o == nil || o.BlackoutDatesEnabled == nil {
		return nil, false
	}
	return o.BlackoutDatesEnabled, true
}

// HasBlackoutDatesEnabled returns a boolean if a field has been set.
func (o *ApplianceUpgradePolicy) HasBlackoutDatesEnabled() bool {
	if o != nil && o.BlackoutDatesEnabled != nil {
		return true
	}

	return false
}

// SetBlackoutDatesEnabled gets a reference to the given bool and assigns it to the BlackoutDatesEnabled field.
func (o *ApplianceUpgradePolicy) SetBlackoutDatesEnabled(v bool) {
	o.BlackoutDatesEnabled = &v
}

// GetBlackoutEndDate returns the BlackoutEndDate field value if set, zero value otherwise.
func (o *ApplianceUpgradePolicy) GetBlackoutEndDate() time.Time {
	if o == nil || o.BlackoutEndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.BlackoutEndDate
}

// GetBlackoutEndDateOk returns a tuple with the BlackoutEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgradePolicy) GetBlackoutEndDateOk() (*time.Time, bool) {
	if o == nil || o.BlackoutEndDate == nil {
		return nil, false
	}
	return o.BlackoutEndDate, true
}

// HasBlackoutEndDate returns a boolean if a field has been set.
func (o *ApplianceUpgradePolicy) HasBlackoutEndDate() bool {
	if o != nil && o.BlackoutEndDate != nil {
		return true
	}

	return false
}

// SetBlackoutEndDate gets a reference to the given time.Time and assigns it to the BlackoutEndDate field.
func (o *ApplianceUpgradePolicy) SetBlackoutEndDate(v time.Time) {
	o.BlackoutEndDate = &v
}

// GetBlackoutStartDate returns the BlackoutStartDate field value if set, zero value otherwise.
func (o *ApplianceUpgradePolicy) GetBlackoutStartDate() time.Time {
	if o == nil || o.BlackoutStartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.BlackoutStartDate
}

// GetBlackoutStartDateOk returns a tuple with the BlackoutStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgradePolicy) GetBlackoutStartDateOk() (*time.Time, bool) {
	if o == nil || o.BlackoutStartDate == nil {
		return nil, false
	}
	return o.BlackoutStartDate, true
}

// HasBlackoutStartDate returns a boolean if a field has been set.
func (o *ApplianceUpgradePolicy) HasBlackoutStartDate() bool {
	if o != nil && o.BlackoutStartDate != nil {
		return true
	}

	return false
}

// SetBlackoutStartDate gets a reference to the given time.Time and assigns it to the BlackoutStartDate field.
func (o *ApplianceUpgradePolicy) SetBlackoutStartDate(v time.Time) {
	o.BlackoutStartDate = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *ApplianceUpgradePolicy) GetSchedule() OnpremSchedule {
	if o == nil || o.Schedule == nil {
		var ret OnpremSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgradePolicy) GetScheduleOk() (*OnpremSchedule, bool) {
	if o == nil || o.Schedule == nil {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *ApplianceUpgradePolicy) HasSchedule() bool {
	if o != nil && o.Schedule != nil {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given OnpremSchedule and assigns it to the Schedule field.
func (o *ApplianceUpgradePolicy) SetSchedule(v OnpremSchedule) {
	o.Schedule = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *ApplianceUpgradePolicy) GetAccount() IamAccountRelationship {
	if o == nil || o.Account == nil {
		var ret IamAccountRelationship
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceUpgradePolicy) GetAccountOk() (*IamAccountRelationship, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *ApplianceUpgradePolicy) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given IamAccountRelationship and assigns it to the Account field.
func (o *ApplianceUpgradePolicy) SetAccount(v IamAccountRelationship) {
	o.Account = &v
}

func (o ApplianceUpgradePolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if o.AutoUpgrade != nil {
		toSerialize["AutoUpgrade"] = o.AutoUpgrade
	}
	if o.BlackoutDatesEnabled != nil {
		toSerialize["BlackoutDatesEnabled"] = o.BlackoutDatesEnabled
	}
	if o.BlackoutEndDate != nil {
		toSerialize["BlackoutEndDate"] = o.BlackoutEndDate
	}
	if o.BlackoutStartDate != nil {
		toSerialize["BlackoutStartDate"] = o.BlackoutStartDate
	}
	if o.Schedule != nil {
		toSerialize["Schedule"] = o.Schedule
	}
	if o.Account != nil {
		toSerialize["Account"] = o.Account
	}
	return json.Marshal(toSerialize)
}

type NullableApplianceUpgradePolicy struct {
	value *ApplianceUpgradePolicy
	isSet bool
}

func (v NullableApplianceUpgradePolicy) Get() *ApplianceUpgradePolicy {
	return v.value
}

func (v *NullableApplianceUpgradePolicy) Set(val *ApplianceUpgradePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableApplianceUpgradePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableApplianceUpgradePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplianceUpgradePolicy(val *ApplianceUpgradePolicy) *NullableApplianceUpgradePolicy {
	return &NullableApplianceUpgradePolicy{value: val, isSet: true}
}

func (v NullableApplianceUpgradePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplianceUpgradePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
