/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-04-12T21:47:47-07:00.
 *
 * API version: 1.0.9-1617
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// StorageSnapshotSchedule Configuration parameters for snapshot creation at source array.
type StorageSnapshotSchedule struct {
	MoBaseMo
	// Snapshot frequency. It is an interval at which snapshot is set to trigger on source array. Examples:     PT2H Snapshot is generated every 2 hours.     P4D, Snapshot is scheduled for every 4 days.     PT2H34M56.123S is 2 hours, 34 minutes, 56 seconds and 123 milliseconds.
	Frequency *string `json:"Frequency,omitempty"`
	// Name of the snapshot schedule.
	Name *string `json:"Name,omitempty"`
	// Duration to keep the snapshots on the source array. Once this period expires, system deletes the snapshot automatically from the source array. Examples: P200D,  200 days. PT2H34M56.123S, 2 hours, 34 minutes, 56 seconds and 123 milliseconds.
	RetentionTime *string `json:"RetentionTime,omitempty"`
	// Preferred time of the day to capture the snapshot. It is applicable only if the frequency is set for a day or more. Format: hh:mm:ss Example: 08:30:00, Snapshot is set for 08:30 AM.
	SnapshotTime    *string                             `json:"SnapshotTime,omitempty"`
	ProtectionGroup *StorageProtectionGroupRelationship `json:"ProtectionGroup,omitempty"`
	StorageArray    *StorageGenericArrayRelationship    `json:"StorageArray,omitempty"`
}

// NewStorageSnapshotSchedule instantiates a new StorageSnapshotSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageSnapshotSchedule() *StorageSnapshotSchedule {
	this := StorageSnapshotSchedule{}
	return &this
}

// NewStorageSnapshotScheduleWithDefaults instantiates a new StorageSnapshotSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageSnapshotScheduleWithDefaults() *StorageSnapshotSchedule {
	this := StorageSnapshotSchedule{}
	return &this
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *StorageSnapshotSchedule) GetFrequency() string {
	if o == nil || o.Frequency == nil {
		var ret string
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSnapshotSchedule) GetFrequencyOk() (*string, bool) {
	if o == nil || o.Frequency == nil {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *StorageSnapshotSchedule) HasFrequency() bool {
	if o != nil && o.Frequency != nil {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given string and assigns it to the Frequency field.
func (o *StorageSnapshotSchedule) SetFrequency(v string) {
	o.Frequency = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageSnapshotSchedule) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSnapshotSchedule) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageSnapshotSchedule) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageSnapshotSchedule) SetName(v string) {
	o.Name = &v
}

// GetRetentionTime returns the RetentionTime field value if set, zero value otherwise.
func (o *StorageSnapshotSchedule) GetRetentionTime() string {
	if o == nil || o.RetentionTime == nil {
		var ret string
		return ret
	}
	return *o.RetentionTime
}

// GetRetentionTimeOk returns a tuple with the RetentionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSnapshotSchedule) GetRetentionTimeOk() (*string, bool) {
	if o == nil || o.RetentionTime == nil {
		return nil, false
	}
	return o.RetentionTime, true
}

// HasRetentionTime returns a boolean if a field has been set.
func (o *StorageSnapshotSchedule) HasRetentionTime() bool {
	if o != nil && o.RetentionTime != nil {
		return true
	}

	return false
}

// SetRetentionTime gets a reference to the given string and assigns it to the RetentionTime field.
func (o *StorageSnapshotSchedule) SetRetentionTime(v string) {
	o.RetentionTime = &v
}

// GetSnapshotTime returns the SnapshotTime field value if set, zero value otherwise.
func (o *StorageSnapshotSchedule) GetSnapshotTime() string {
	if o == nil || o.SnapshotTime == nil {
		var ret string
		return ret
	}
	return *o.SnapshotTime
}

// GetSnapshotTimeOk returns a tuple with the SnapshotTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSnapshotSchedule) GetSnapshotTimeOk() (*string, bool) {
	if o == nil || o.SnapshotTime == nil {
		return nil, false
	}
	return o.SnapshotTime, true
}

// HasSnapshotTime returns a boolean if a field has been set.
func (o *StorageSnapshotSchedule) HasSnapshotTime() bool {
	if o != nil && o.SnapshotTime != nil {
		return true
	}

	return false
}

// SetSnapshotTime gets a reference to the given string and assigns it to the SnapshotTime field.
func (o *StorageSnapshotSchedule) SetSnapshotTime(v string) {
	o.SnapshotTime = &v
}

// GetProtectionGroup returns the ProtectionGroup field value if set, zero value otherwise.
func (o *StorageSnapshotSchedule) GetProtectionGroup() StorageProtectionGroupRelationship {
	if o == nil || o.ProtectionGroup == nil {
		var ret StorageProtectionGroupRelationship
		return ret
	}
	return *o.ProtectionGroup
}

// GetProtectionGroupOk returns a tuple with the ProtectionGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSnapshotSchedule) GetProtectionGroupOk() (*StorageProtectionGroupRelationship, bool) {
	if o == nil || o.ProtectionGroup == nil {
		return nil, false
	}
	return o.ProtectionGroup, true
}

// HasProtectionGroup returns a boolean if a field has been set.
func (o *StorageSnapshotSchedule) HasProtectionGroup() bool {
	if o != nil && o.ProtectionGroup != nil {
		return true
	}

	return false
}

// SetProtectionGroup gets a reference to the given StorageProtectionGroupRelationship and assigns it to the ProtectionGroup field.
func (o *StorageSnapshotSchedule) SetProtectionGroup(v StorageProtectionGroupRelationship) {
	o.ProtectionGroup = &v
}

// GetStorageArray returns the StorageArray field value if set, zero value otherwise.
func (o *StorageSnapshotSchedule) GetStorageArray() StorageGenericArrayRelationship {
	if o == nil || o.StorageArray == nil {
		var ret StorageGenericArrayRelationship
		return ret
	}
	return *o.StorageArray
}

// GetStorageArrayOk returns a tuple with the StorageArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSnapshotSchedule) GetStorageArrayOk() (*StorageGenericArrayRelationship, bool) {
	if o == nil || o.StorageArray == nil {
		return nil, false
	}
	return o.StorageArray, true
}

// HasStorageArray returns a boolean if a field has been set.
func (o *StorageSnapshotSchedule) HasStorageArray() bool {
	if o != nil && o.StorageArray != nil {
		return true
	}

	return false
}

// SetStorageArray gets a reference to the given StorageGenericArrayRelationship and assigns it to the StorageArray field.
func (o *StorageSnapshotSchedule) SetStorageArray(v StorageGenericArrayRelationship) {
	o.StorageArray = &v
}

func (o StorageSnapshotSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if o.Frequency != nil {
		toSerialize["Frequency"] = o.Frequency
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.RetentionTime != nil {
		toSerialize["RetentionTime"] = o.RetentionTime
	}
	if o.SnapshotTime != nil {
		toSerialize["SnapshotTime"] = o.SnapshotTime
	}
	if o.ProtectionGroup != nil {
		toSerialize["ProtectionGroup"] = o.ProtectionGroup
	}
	if o.StorageArray != nil {
		toSerialize["StorageArray"] = o.StorageArray
	}
	return json.Marshal(toSerialize)
}

type NullableStorageSnapshotSchedule struct {
	value *StorageSnapshotSchedule
	isSet bool
}

func (v NullableStorageSnapshotSchedule) Get() *StorageSnapshotSchedule {
	return v.value
}

func (v *NullableStorageSnapshotSchedule) Set(val *StorageSnapshotSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageSnapshotSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageSnapshotSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageSnapshotSchedule(val *StorageSnapshotSchedule) *NullableStorageSnapshotSchedule {
	return &NullableStorageSnapshotSchedule{value: val, isSet: true}
}

func (v NullableStorageSnapshotSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageSnapshotSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
