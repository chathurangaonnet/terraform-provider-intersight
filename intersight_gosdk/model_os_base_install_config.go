/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-17T02:04:50-07:00.
 *
 * API version: 1.0.9-1867
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// OsBaseInstallConfig BaseInstallConfig models the configuration required to install OS.
type OsBaseInstallConfig struct {
	MoBaseMo
	AdditionalParameters *[]OsPlaceHolder `json:"AdditionalParameters,omitempty"`
	Answers              *OsAnswers       `json:"Answers,omitempty"`
	// User provided description about the OS install configuration.
	Description *string `json:"Description,omitempty"`
	// The install method to be used for OS installation - vMedia, iPXE.  Only vMedia is supported as of now.
	InstallMethod             *string                      `json:"InstallMethod,omitempty"`
	OperatingSystemParameters *OsOperatingSystemParameters `json:"OperatingSystemParameters,omitempty"`
	AdditionalProperties      map[string]interface{}
}

type _OsBaseInstallConfig OsBaseInstallConfig

// NewOsBaseInstallConfig instantiates a new OsBaseInstallConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOsBaseInstallConfig() *OsBaseInstallConfig {
	this := OsBaseInstallConfig{}
	var installMethod string = "vMedia"
	this.InstallMethod = &installMethod
	return &this
}

// NewOsBaseInstallConfigWithDefaults instantiates a new OsBaseInstallConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOsBaseInstallConfigWithDefaults() *OsBaseInstallConfig {
	this := OsBaseInstallConfig{}
	var installMethod string = "vMedia"
	this.InstallMethod = &installMethod
	return &this
}

// GetAdditionalParameters returns the AdditionalParameters field value if set, zero value otherwise.
func (o *OsBaseInstallConfig) GetAdditionalParameters() []OsPlaceHolder {
	if o == nil || o.AdditionalParameters == nil {
		var ret []OsPlaceHolder
		return ret
	}
	return *o.AdditionalParameters
}

// GetAdditionalParametersOk returns a tuple with the AdditionalParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsBaseInstallConfig) GetAdditionalParametersOk() (*[]OsPlaceHolder, bool) {
	if o == nil || o.AdditionalParameters == nil {
		return nil, false
	}
	return o.AdditionalParameters, true
}

// HasAdditionalParameters returns a boolean if a field has been set.
func (o *OsBaseInstallConfig) HasAdditionalParameters() bool {
	if o != nil && o.AdditionalParameters != nil {
		return true
	}

	return false
}

// SetAdditionalParameters gets a reference to the given []OsPlaceHolder and assigns it to the AdditionalParameters field.
func (o *OsBaseInstallConfig) SetAdditionalParameters(v []OsPlaceHolder) {
	o.AdditionalParameters = &v
}

// GetAnswers returns the Answers field value if set, zero value otherwise.
func (o *OsBaseInstallConfig) GetAnswers() OsAnswers {
	if o == nil || o.Answers == nil {
		var ret OsAnswers
		return ret
	}
	return *o.Answers
}

// GetAnswersOk returns a tuple with the Answers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsBaseInstallConfig) GetAnswersOk() (*OsAnswers, bool) {
	if o == nil || o.Answers == nil {
		return nil, false
	}
	return o.Answers, true
}

// HasAnswers returns a boolean if a field has been set.
func (o *OsBaseInstallConfig) HasAnswers() bool {
	if o != nil && o.Answers != nil {
		return true
	}

	return false
}

// SetAnswers gets a reference to the given OsAnswers and assigns it to the Answers field.
func (o *OsBaseInstallConfig) SetAnswers(v OsAnswers) {
	o.Answers = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OsBaseInstallConfig) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsBaseInstallConfig) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OsBaseInstallConfig) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OsBaseInstallConfig) SetDescription(v string) {
	o.Description = &v
}

// GetInstallMethod returns the InstallMethod field value if set, zero value otherwise.
func (o *OsBaseInstallConfig) GetInstallMethod() string {
	if o == nil || o.InstallMethod == nil {
		var ret string
		return ret
	}
	return *o.InstallMethod
}

// GetInstallMethodOk returns a tuple with the InstallMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsBaseInstallConfig) GetInstallMethodOk() (*string, bool) {
	if o == nil || o.InstallMethod == nil {
		return nil, false
	}
	return o.InstallMethod, true
}

// HasInstallMethod returns a boolean if a field has been set.
func (o *OsBaseInstallConfig) HasInstallMethod() bool {
	if o != nil && o.InstallMethod != nil {
		return true
	}

	return false
}

// SetInstallMethod gets a reference to the given string and assigns it to the InstallMethod field.
func (o *OsBaseInstallConfig) SetInstallMethod(v string) {
	o.InstallMethod = &v
}

// GetOperatingSystemParameters returns the OperatingSystemParameters field value if set, zero value otherwise.
func (o *OsBaseInstallConfig) GetOperatingSystemParameters() OsOperatingSystemParameters {
	if o == nil || o.OperatingSystemParameters == nil {
		var ret OsOperatingSystemParameters
		return ret
	}
	return *o.OperatingSystemParameters
}

// GetOperatingSystemParametersOk returns a tuple with the OperatingSystemParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsBaseInstallConfig) GetOperatingSystemParametersOk() (*OsOperatingSystemParameters, bool) {
	if o == nil || o.OperatingSystemParameters == nil {
		return nil, false
	}
	return o.OperatingSystemParameters, true
}

// HasOperatingSystemParameters returns a boolean if a field has been set.
func (o *OsBaseInstallConfig) HasOperatingSystemParameters() bool {
	if o != nil && o.OperatingSystemParameters != nil {
		return true
	}

	return false
}

// SetOperatingSystemParameters gets a reference to the given OsOperatingSystemParameters and assigns it to the OperatingSystemParameters field.
func (o *OsBaseInstallConfig) SetOperatingSystemParameters(v OsOperatingSystemParameters) {
	o.OperatingSystemParameters = &v
}

func (o OsBaseInstallConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if o.AdditionalParameters != nil {
		toSerialize["AdditionalParameters"] = o.AdditionalParameters
	}
	if o.Answers != nil {
		toSerialize["Answers"] = o.Answers
	}
	if o.Description != nil {
		toSerialize["Description"] = o.Description
	}
	if o.InstallMethod != nil {
		toSerialize["InstallMethod"] = o.InstallMethod
	}
	if o.OperatingSystemParameters != nil {
		toSerialize["OperatingSystemParameters"] = o.OperatingSystemParameters
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OsBaseInstallConfig) UnmarshalJSON(bytes []byte) (err error) {
	type OsBaseInstallConfigWithoutEmbeddedStruct struct {
		AdditionalParameters *[]OsPlaceHolder `json:"AdditionalParameters,omitempty"`
		Answers              *OsAnswers       `json:"Answers,omitempty"`
		// User provided description about the OS install configuration.
		Description *string `json:"Description,omitempty"`
		// The install method to be used for OS installation - vMedia, iPXE.  Only vMedia is supported as of now.
		InstallMethod             *string                      `json:"InstallMethod,omitempty"`
		OperatingSystemParameters *OsOperatingSystemParameters `json:"OperatingSystemParameters,omitempty"`
	}

	varOsBaseInstallConfigWithoutEmbeddedStruct := OsBaseInstallConfigWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varOsBaseInstallConfigWithoutEmbeddedStruct)
	if err == nil {
		varOsBaseInstallConfig := _OsBaseInstallConfig{}
		varOsBaseInstallConfig.AdditionalParameters = varOsBaseInstallConfigWithoutEmbeddedStruct.AdditionalParameters
		varOsBaseInstallConfig.Answers = varOsBaseInstallConfigWithoutEmbeddedStruct.Answers
		varOsBaseInstallConfig.Description = varOsBaseInstallConfigWithoutEmbeddedStruct.Description
		varOsBaseInstallConfig.InstallMethod = varOsBaseInstallConfigWithoutEmbeddedStruct.InstallMethod
		varOsBaseInstallConfig.OperatingSystemParameters = varOsBaseInstallConfigWithoutEmbeddedStruct.OperatingSystemParameters
		*o = OsBaseInstallConfig(varOsBaseInstallConfig)
	} else {
		return err
	}

	varOsBaseInstallConfig := _OsBaseInstallConfig{}

	err = json.Unmarshal(bytes, &varOsBaseInstallConfig)
	if err == nil {
		o.MoBaseMo = varOsBaseInstallConfig.MoBaseMo
	} else {
		return err
	}
	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "AdditionalParameters")
		delete(additionalProperties, "Answers")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "InstallMethod")
		delete(additionalProperties, "OperatingSystemParameters")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOsBaseInstallConfig struct {
	value *OsBaseInstallConfig
	isSet bool
}

func (v NullableOsBaseInstallConfig) Get() *OsBaseInstallConfig {
	return v.value
}

func (v *NullableOsBaseInstallConfig) Set(val *OsBaseInstallConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOsBaseInstallConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOsBaseInstallConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOsBaseInstallConfig(val *OsBaseInstallConfig) *NullableOsBaseInstallConfig {
	return &NullableOsBaseInstallConfig{value: val, isSet: true}
}

func (v NullableOsBaseInstallConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOsBaseInstallConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
