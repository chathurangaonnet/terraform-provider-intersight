/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-11T05:47:33Z.
 *
 * API version: 1.0.9-1999
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
	"time"
)

// WorkflowWorkflowInfoAllOf Definition of the list of properties defined in 'workflow.WorkflowInfo', excluding properties defined in parent classes.
type WorkflowWorkflowInfoAllOf struct {
	// The action of the workflow such as start, cancel, retry, pause.
	Action *string `json:"Action,omitempty"`
	// The time when the workflow info will be removed from database.
	CleanupTime *time.Time `json:"CleanupTime,omitempty"`
	// The time when the workflow reached a final state.
	EndTime *time.Time `json:"EndTime,omitempty"`
	// The duration in hours after which the workflow info for failed, terminated or timed out workflow will be removed from database.
	FailedWorkflowCleanupDuration *int64 `json:"FailedWorkflowCleanupDuration,omitempty"`
	// All the given inputs for the workflow.
	Input interface{} `json:"Input,omitempty"`
	// A workflow instance Id which is the unique identified for the workflow execution.
	InstId *string `json:"InstId,omitempty"`
	// Denotes if this workflow is internal and should be hidden from user view of running workflows.
	Internal *bool `json:"Internal,omitempty"`
	// The last action that was issued on the workflow is saved in this field.
	LastAction *string            `json:"LastAction,omitempty"`
	Message    *[]WorkflowMessage `json:"Message,omitempty"`
	// Version of the workflow metadata for which this workflow execution was started.
	MetaVersion *int64 `json:"MetaVersion,omitempty"`
	// A name of the workflow execution instance.
	Name *string `json:"Name,omitempty"`
	// All the generated outputs for the workflow.
	Output interface{} `json:"Output,omitempty"`
	// Denotes the reason workflow is in paused status.
	PauseReason *string `json:"PauseReason,omitempty"`
	// This field indicates percentage of workflow task execution.
	Progress   *float32                        `json:"Progress,omitempty"`
	Properties *WorkflowWorkflowInfoProperties `json:"Properties,omitempty"`
	// This field is applicable when Retry action is issued for a workflow which is in a final state. When this field is not specified then the workflow will retry from the start of the workflow. When this field is specified then the workflow will be retried from the specified task. The field should carry the task name which is the unique name of the task within the workflow. The task name must be one of the tasks that completed or failed in the previous run, you cannot retry a workflow from a task which wasn't run in the previous iteration.
	RetryFromTaskName *string `json:"RetryFromTaskName,omitempty"`
	// The source microservice name which is the owner for this workflow.
	Src *string `json:"Src,omitempty"`
	// The time when the workflow was started for execution.
	StartTime *time.Time `json:"StartTime,omitempty"`
	// A status of the workflow (RUNNING, WAITING, COMPLETED, TIME_OUT, FAILED).
	Status *string `json:"Status,omitempty"`
	// The duration in hours after which the workflow info for successful workflow will be removed from database.
	SuccessWorkflowCleanupDuration *int64 `json:"SuccessWorkflowCleanupDuration,omitempty"`
	// The trace id to keep track of workflow execution.
	TraceId *string `json:"TraceId,omitempty"`
	// A type of the workflow (serverconfig, ansible_monitoring).
	Type *string `json:"Type,omitempty"`
	// The user identifier which indicates the user that started this workflow.
	UserId *string `json:"UserId,omitempty"`
	// Denotes the reason workflow is in waiting status.
	WaitReason *string `json:"WaitReason,omitempty"`
	// The workflow context which contains initiator and target information.
	WorkflowCtx interface{} `json:"WorkflowCtx,omitempty"`
	// The type of workflow meta. Derived from the workflow meta that is used to launch this workflow instance.
	WorkflowMetaType *string `json:"WorkflowMetaType,omitempty"`
	// Total number of workflow tasks in this workflow.
	WorkflowTaskCount          *int64                                          `json:"WorkflowTaskCount,omitempty"`
	Var0ClusterProfile         *HyperflexClusterProfileRelationship            `json:"_0_ClusterProfile,omitempty"`
	Var1SwitchProfile          *FabricSwitchProfileRelationship                `json:"_1_SwitchProfile,omitempty"`
	Account                    *IamAccountRelationship                         `json:"Account,omitempty"`
	AssociatedObject           *MoBaseMoRelationship                           `json:"AssociatedObject,omitempty"`
	Organization               *OrganizationOrganizationRelationship           `json:"Organization,omitempty"`
	ParentTaskInfo             *WorkflowTaskInfoRelationship                   `json:"ParentTaskInfo,omitempty"`
	PendingDynamicWorkflowInfo *WorkflowPendingDynamicWorkflowInfoRelationship `json:"PendingDynamicWorkflowInfo,omitempty"`
	Permission                 *IamPermissionRelationship                      `json:"Permission,omitempty"`
	// An array of relationships to workflowTaskInfo resources.
	TaskInfos            []WorkflowTaskInfoRelationship          `json:"TaskInfos,omitempty"`
	WorkflowDefinition   *WorkflowWorkflowDefinitionRelationship `json:"WorkflowDefinition,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkflowWorkflowInfoAllOf WorkflowWorkflowInfoAllOf

// NewWorkflowWorkflowInfoAllOf instantiates a new WorkflowWorkflowInfoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowWorkflowInfoAllOf() *WorkflowWorkflowInfoAllOf {
	this := WorkflowWorkflowInfoAllOf{}
	var action string = "None"
	this.Action = &action
	var lastAction string = "None"
	this.LastAction = &lastAction
	var pauseReason string = "None"
	this.PauseReason = &pauseReason
	var waitReason string = "None"
	this.WaitReason = &waitReason
	var workflowMetaType string = "SystemDefined"
	this.WorkflowMetaType = &workflowMetaType
	return &this
}

// NewWorkflowWorkflowInfoAllOfWithDefaults instantiates a new WorkflowWorkflowInfoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowWorkflowInfoAllOfWithDefaults() *WorkflowWorkflowInfoAllOf {
	this := WorkflowWorkflowInfoAllOf{}
	var action string = "None"
	this.Action = &action
	var lastAction string = "None"
	this.LastAction = &lastAction
	var pauseReason string = "None"
	this.PauseReason = &pauseReason
	var waitReason string = "None"
	this.WaitReason = &waitReason
	var workflowMetaType string = "SystemDefined"
	this.WorkflowMetaType = &workflowMetaType
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *WorkflowWorkflowInfoAllOf) SetAction(v string) {
	o.Action = &v
}

// GetCleanupTime returns the CleanupTime field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetCleanupTime() time.Time {
	if o == nil || o.CleanupTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CleanupTime
}

// GetCleanupTimeOk returns a tuple with the CleanupTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetCleanupTimeOk() (*time.Time, bool) {
	if o == nil || o.CleanupTime == nil {
		return nil, false
	}
	return o.CleanupTime, true
}

// HasCleanupTime returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasCleanupTime() bool {
	if o != nil && o.CleanupTime != nil {
		return true
	}

	return false
}

// SetCleanupTime gets a reference to the given time.Time and assigns it to the CleanupTime field.
func (o *WorkflowWorkflowInfoAllOf) SetCleanupTime(v time.Time) {
	o.CleanupTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetEndTime() time.Time {
	if o == nil || o.EndTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *WorkflowWorkflowInfoAllOf) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetFailedWorkflowCleanupDuration returns the FailedWorkflowCleanupDuration field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetFailedWorkflowCleanupDuration() int64 {
	if o == nil || o.FailedWorkflowCleanupDuration == nil {
		var ret int64
		return ret
	}
	return *o.FailedWorkflowCleanupDuration
}

// GetFailedWorkflowCleanupDurationOk returns a tuple with the FailedWorkflowCleanupDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetFailedWorkflowCleanupDurationOk() (*int64, bool) {
	if o == nil || o.FailedWorkflowCleanupDuration == nil {
		return nil, false
	}
	return o.FailedWorkflowCleanupDuration, true
}

// HasFailedWorkflowCleanupDuration returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasFailedWorkflowCleanupDuration() bool {
	if o != nil && o.FailedWorkflowCleanupDuration != nil {
		return true
	}

	return false
}

// SetFailedWorkflowCleanupDuration gets a reference to the given int64 and assigns it to the FailedWorkflowCleanupDuration field.
func (o *WorkflowWorkflowInfoAllOf) SetFailedWorkflowCleanupDuration(v int64) {
	o.FailedWorkflowCleanupDuration = &v
}

// GetInput returns the Input field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowInfoAllOf) GetInput() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowInfoAllOf) GetInputOk() (*interface{}, bool) {
	if o == nil || o.Input == nil {
		return nil, false
	}
	return &o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasInput() bool {
	if o != nil && o.Input != nil {
		return true
	}

	return false
}

// SetInput gets a reference to the given interface{} and assigns it to the Input field.
func (o *WorkflowWorkflowInfoAllOf) SetInput(v interface{}) {
	o.Input = v
}

// GetInstId returns the InstId field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetInstId() string {
	if o == nil || o.InstId == nil {
		var ret string
		return ret
	}
	return *o.InstId
}

// GetInstIdOk returns a tuple with the InstId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetInstIdOk() (*string, bool) {
	if o == nil || o.InstId == nil {
		return nil, false
	}
	return o.InstId, true
}

// HasInstId returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasInstId() bool {
	if o != nil && o.InstId != nil {
		return true
	}

	return false
}

// SetInstId gets a reference to the given string and assigns it to the InstId field.
func (o *WorkflowWorkflowInfoAllOf) SetInstId(v string) {
	o.InstId = &v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetInternal() bool {
	if o == nil || o.Internal == nil {
		var ret bool
		return ret
	}
	return *o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetInternalOk() (*bool, bool) {
	if o == nil || o.Internal == nil {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasInternal() bool {
	if o != nil && o.Internal != nil {
		return true
	}

	return false
}

// SetInternal gets a reference to the given bool and assigns it to the Internal field.
func (o *WorkflowWorkflowInfoAllOf) SetInternal(v bool) {
	o.Internal = &v
}

// GetLastAction returns the LastAction field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetLastAction() string {
	if o == nil || o.LastAction == nil {
		var ret string
		return ret
	}
	return *o.LastAction
}

// GetLastActionOk returns a tuple with the LastAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetLastActionOk() (*string, bool) {
	if o == nil || o.LastAction == nil {
		return nil, false
	}
	return o.LastAction, true
}

// HasLastAction returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasLastAction() bool {
	if o != nil && o.LastAction != nil {
		return true
	}

	return false
}

// SetLastAction gets a reference to the given string and assigns it to the LastAction field.
func (o *WorkflowWorkflowInfoAllOf) SetLastAction(v string) {
	o.LastAction = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetMessage() []WorkflowMessage {
	if o == nil || o.Message == nil {
		var ret []WorkflowMessage
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetMessageOk() (*[]WorkflowMessage, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given []WorkflowMessage and assigns it to the Message field.
func (o *WorkflowWorkflowInfoAllOf) SetMessage(v []WorkflowMessage) {
	o.Message = &v
}

// GetMetaVersion returns the MetaVersion field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetMetaVersion() int64 {
	if o == nil || o.MetaVersion == nil {
		var ret int64
		return ret
	}
	return *o.MetaVersion
}

// GetMetaVersionOk returns a tuple with the MetaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetMetaVersionOk() (*int64, bool) {
	if o == nil || o.MetaVersion == nil {
		return nil, false
	}
	return o.MetaVersion, true
}

// HasMetaVersion returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasMetaVersion() bool {
	if o != nil && o.MetaVersion != nil {
		return true
	}

	return false
}

// SetMetaVersion gets a reference to the given int64 and assigns it to the MetaVersion field.
func (o *WorkflowWorkflowInfoAllOf) SetMetaVersion(v int64) {
	o.MetaVersion = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkflowWorkflowInfoAllOf) SetName(v string) {
	o.Name = &v
}

// GetOutput returns the Output field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowInfoAllOf) GetOutput() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowInfoAllOf) GetOutputOk() (*interface{}, bool) {
	if o == nil || o.Output == nil {
		return nil, false
	}
	return &o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasOutput() bool {
	if o != nil && o.Output != nil {
		return true
	}

	return false
}

// SetOutput gets a reference to the given interface{} and assigns it to the Output field.
func (o *WorkflowWorkflowInfoAllOf) SetOutput(v interface{}) {
	o.Output = v
}

// GetPauseReason returns the PauseReason field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetPauseReason() string {
	if o == nil || o.PauseReason == nil {
		var ret string
		return ret
	}
	return *o.PauseReason
}

// GetPauseReasonOk returns a tuple with the PauseReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetPauseReasonOk() (*string, bool) {
	if o == nil || o.PauseReason == nil {
		return nil, false
	}
	return o.PauseReason, true
}

// HasPauseReason returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasPauseReason() bool {
	if o != nil && o.PauseReason != nil {
		return true
	}

	return false
}

// SetPauseReason gets a reference to the given string and assigns it to the PauseReason field.
func (o *WorkflowWorkflowInfoAllOf) SetPauseReason(v string) {
	o.PauseReason = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetProgress() float32 {
	if o == nil || o.Progress == nil {
		var ret float32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetProgressOk() (*float32, bool) {
	if o == nil || o.Progress == nil {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasProgress() bool {
	if o != nil && o.Progress != nil {
		return true
	}

	return false
}

// SetProgress gets a reference to the given float32 and assigns it to the Progress field.
func (o *WorkflowWorkflowInfoAllOf) SetProgress(v float32) {
	o.Progress = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetProperties() WorkflowWorkflowInfoProperties {
	if o == nil || o.Properties == nil {
		var ret WorkflowWorkflowInfoProperties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetPropertiesOk() (*WorkflowWorkflowInfoProperties, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given WorkflowWorkflowInfoProperties and assigns it to the Properties field.
func (o *WorkflowWorkflowInfoAllOf) SetProperties(v WorkflowWorkflowInfoProperties) {
	o.Properties = &v
}

// GetRetryFromTaskName returns the RetryFromTaskName field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetRetryFromTaskName() string {
	if o == nil || o.RetryFromTaskName == nil {
		var ret string
		return ret
	}
	return *o.RetryFromTaskName
}

// GetRetryFromTaskNameOk returns a tuple with the RetryFromTaskName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetRetryFromTaskNameOk() (*string, bool) {
	if o == nil || o.RetryFromTaskName == nil {
		return nil, false
	}
	return o.RetryFromTaskName, true
}

// HasRetryFromTaskName returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasRetryFromTaskName() bool {
	if o != nil && o.RetryFromTaskName != nil {
		return true
	}

	return false
}

// SetRetryFromTaskName gets a reference to the given string and assigns it to the RetryFromTaskName field.
func (o *WorkflowWorkflowInfoAllOf) SetRetryFromTaskName(v string) {
	o.RetryFromTaskName = &v
}

// GetSrc returns the Src field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetSrc() string {
	if o == nil || o.Src == nil {
		var ret string
		return ret
	}
	return *o.Src
}

// GetSrcOk returns a tuple with the Src field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetSrcOk() (*string, bool) {
	if o == nil || o.Src == nil {
		return nil, false
	}
	return o.Src, true
}

// HasSrc returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasSrc() bool {
	if o != nil && o.Src != nil {
		return true
	}

	return false
}

// SetSrc gets a reference to the given string and assigns it to the Src field.
func (o *WorkflowWorkflowInfoAllOf) SetSrc(v string) {
	o.Src = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetStartTime() time.Time {
	if o == nil || o.StartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *WorkflowWorkflowInfoAllOf) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *WorkflowWorkflowInfoAllOf) SetStatus(v string) {
	o.Status = &v
}

// GetSuccessWorkflowCleanupDuration returns the SuccessWorkflowCleanupDuration field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetSuccessWorkflowCleanupDuration() int64 {
	if o == nil || o.SuccessWorkflowCleanupDuration == nil {
		var ret int64
		return ret
	}
	return *o.SuccessWorkflowCleanupDuration
}

// GetSuccessWorkflowCleanupDurationOk returns a tuple with the SuccessWorkflowCleanupDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetSuccessWorkflowCleanupDurationOk() (*int64, bool) {
	if o == nil || o.SuccessWorkflowCleanupDuration == nil {
		return nil, false
	}
	return o.SuccessWorkflowCleanupDuration, true
}

// HasSuccessWorkflowCleanupDuration returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasSuccessWorkflowCleanupDuration() bool {
	if o != nil && o.SuccessWorkflowCleanupDuration != nil {
		return true
	}

	return false
}

// SetSuccessWorkflowCleanupDuration gets a reference to the given int64 and assigns it to the SuccessWorkflowCleanupDuration field.
func (o *WorkflowWorkflowInfoAllOf) SetSuccessWorkflowCleanupDuration(v int64) {
	o.SuccessWorkflowCleanupDuration = &v
}

// GetTraceId returns the TraceId field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetTraceId() string {
	if o == nil || o.TraceId == nil {
		var ret string
		return ret
	}
	return *o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetTraceIdOk() (*string, bool) {
	if o == nil || o.TraceId == nil {
		return nil, false
	}
	return o.TraceId, true
}

// HasTraceId returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasTraceId() bool {
	if o != nil && o.TraceId != nil {
		return true
	}

	return false
}

// SetTraceId gets a reference to the given string and assigns it to the TraceId field.
func (o *WorkflowWorkflowInfoAllOf) SetTraceId(v string) {
	o.TraceId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WorkflowWorkflowInfoAllOf) SetType(v string) {
	o.Type = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *WorkflowWorkflowInfoAllOf) SetUserId(v string) {
	o.UserId = &v
}

// GetWaitReason returns the WaitReason field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetWaitReason() string {
	if o == nil || o.WaitReason == nil {
		var ret string
		return ret
	}
	return *o.WaitReason
}

// GetWaitReasonOk returns a tuple with the WaitReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetWaitReasonOk() (*string, bool) {
	if o == nil || o.WaitReason == nil {
		return nil, false
	}
	return o.WaitReason, true
}

// HasWaitReason returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasWaitReason() bool {
	if o != nil && o.WaitReason != nil {
		return true
	}

	return false
}

// SetWaitReason gets a reference to the given string and assigns it to the WaitReason field.
func (o *WorkflowWorkflowInfoAllOf) SetWaitReason(v string) {
	o.WaitReason = &v
}

// GetWorkflowCtx returns the WorkflowCtx field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowInfoAllOf) GetWorkflowCtx() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.WorkflowCtx
}

// GetWorkflowCtxOk returns a tuple with the WorkflowCtx field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowInfoAllOf) GetWorkflowCtxOk() (*interface{}, bool) {
	if o == nil || o.WorkflowCtx == nil {
		return nil, false
	}
	return &o.WorkflowCtx, true
}

// HasWorkflowCtx returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasWorkflowCtx() bool {
	if o != nil && o.WorkflowCtx != nil {
		return true
	}

	return false
}

// SetWorkflowCtx gets a reference to the given interface{} and assigns it to the WorkflowCtx field.
func (o *WorkflowWorkflowInfoAllOf) SetWorkflowCtx(v interface{}) {
	o.WorkflowCtx = v
}

// GetWorkflowMetaType returns the WorkflowMetaType field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetWorkflowMetaType() string {
	if o == nil || o.WorkflowMetaType == nil {
		var ret string
		return ret
	}
	return *o.WorkflowMetaType
}

// GetWorkflowMetaTypeOk returns a tuple with the WorkflowMetaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetWorkflowMetaTypeOk() (*string, bool) {
	if o == nil || o.WorkflowMetaType == nil {
		return nil, false
	}
	return o.WorkflowMetaType, true
}

// HasWorkflowMetaType returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasWorkflowMetaType() bool {
	if o != nil && o.WorkflowMetaType != nil {
		return true
	}

	return false
}

// SetWorkflowMetaType gets a reference to the given string and assigns it to the WorkflowMetaType field.
func (o *WorkflowWorkflowInfoAllOf) SetWorkflowMetaType(v string) {
	o.WorkflowMetaType = &v
}

// GetWorkflowTaskCount returns the WorkflowTaskCount field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetWorkflowTaskCount() int64 {
	if o == nil || o.WorkflowTaskCount == nil {
		var ret int64
		return ret
	}
	return *o.WorkflowTaskCount
}

// GetWorkflowTaskCountOk returns a tuple with the WorkflowTaskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetWorkflowTaskCountOk() (*int64, bool) {
	if o == nil || o.WorkflowTaskCount == nil {
		return nil, false
	}
	return o.WorkflowTaskCount, true
}

// HasWorkflowTaskCount returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasWorkflowTaskCount() bool {
	if o != nil && o.WorkflowTaskCount != nil {
		return true
	}

	return false
}

// SetWorkflowTaskCount gets a reference to the given int64 and assigns it to the WorkflowTaskCount field.
func (o *WorkflowWorkflowInfoAllOf) SetWorkflowTaskCount(v int64) {
	o.WorkflowTaskCount = &v
}

// GetVar0ClusterProfile returns the Var0ClusterProfile field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetVar0ClusterProfile() HyperflexClusterProfileRelationship {
	if o == nil || o.Var0ClusterProfile == nil {
		var ret HyperflexClusterProfileRelationship
		return ret
	}
	return *o.Var0ClusterProfile
}

// GetVar0ClusterProfileOk returns a tuple with the Var0ClusterProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetVar0ClusterProfileOk() (*HyperflexClusterProfileRelationship, bool) {
	if o == nil || o.Var0ClusterProfile == nil {
		return nil, false
	}
	return o.Var0ClusterProfile, true
}

// HasVar0ClusterProfile returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasVar0ClusterProfile() bool {
	if o != nil && o.Var0ClusterProfile != nil {
		return true
	}

	return false
}

// SetVar0ClusterProfile gets a reference to the given HyperflexClusterProfileRelationship and assigns it to the Var0ClusterProfile field.
func (o *WorkflowWorkflowInfoAllOf) SetVar0ClusterProfile(v HyperflexClusterProfileRelationship) {
	o.Var0ClusterProfile = &v
}

// GetVar1SwitchProfile returns the Var1SwitchProfile field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetVar1SwitchProfile() FabricSwitchProfileRelationship {
	if o == nil || o.Var1SwitchProfile == nil {
		var ret FabricSwitchProfileRelationship
		return ret
	}
	return *o.Var1SwitchProfile
}

// GetVar1SwitchProfileOk returns a tuple with the Var1SwitchProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetVar1SwitchProfileOk() (*FabricSwitchProfileRelationship, bool) {
	if o == nil || o.Var1SwitchProfile == nil {
		return nil, false
	}
	return o.Var1SwitchProfile, true
}

// HasVar1SwitchProfile returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasVar1SwitchProfile() bool {
	if o != nil && o.Var1SwitchProfile != nil {
		return true
	}

	return false
}

// SetVar1SwitchProfile gets a reference to the given FabricSwitchProfileRelationship and assigns it to the Var1SwitchProfile field.
func (o *WorkflowWorkflowInfoAllOf) SetVar1SwitchProfile(v FabricSwitchProfileRelationship) {
	o.Var1SwitchProfile = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetAccount() IamAccountRelationship {
	if o == nil || o.Account == nil {
		var ret IamAccountRelationship
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetAccountOk() (*IamAccountRelationship, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given IamAccountRelationship and assigns it to the Account field.
func (o *WorkflowWorkflowInfoAllOf) SetAccount(v IamAccountRelationship) {
	o.Account = &v
}

// GetAssociatedObject returns the AssociatedObject field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetAssociatedObject() MoBaseMoRelationship {
	if o == nil || o.AssociatedObject == nil {
		var ret MoBaseMoRelationship
		return ret
	}
	return *o.AssociatedObject
}

// GetAssociatedObjectOk returns a tuple with the AssociatedObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetAssociatedObjectOk() (*MoBaseMoRelationship, bool) {
	if o == nil || o.AssociatedObject == nil {
		return nil, false
	}
	return o.AssociatedObject, true
}

// HasAssociatedObject returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasAssociatedObject() bool {
	if o != nil && o.AssociatedObject != nil {
		return true
	}

	return false
}

// SetAssociatedObject gets a reference to the given MoBaseMoRelationship and assigns it to the AssociatedObject field.
func (o *WorkflowWorkflowInfoAllOf) SetAssociatedObject(v MoBaseMoRelationship) {
	o.AssociatedObject = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || o.Organization == nil {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given OrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *WorkflowWorkflowInfoAllOf) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization = &v
}

// GetParentTaskInfo returns the ParentTaskInfo field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetParentTaskInfo() WorkflowTaskInfoRelationship {
	if o == nil || o.ParentTaskInfo == nil {
		var ret WorkflowTaskInfoRelationship
		return ret
	}
	return *o.ParentTaskInfo
}

// GetParentTaskInfoOk returns a tuple with the ParentTaskInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetParentTaskInfoOk() (*WorkflowTaskInfoRelationship, bool) {
	if o == nil || o.ParentTaskInfo == nil {
		return nil, false
	}
	return o.ParentTaskInfo, true
}

// HasParentTaskInfo returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasParentTaskInfo() bool {
	if o != nil && o.ParentTaskInfo != nil {
		return true
	}

	return false
}

// SetParentTaskInfo gets a reference to the given WorkflowTaskInfoRelationship and assigns it to the ParentTaskInfo field.
func (o *WorkflowWorkflowInfoAllOf) SetParentTaskInfo(v WorkflowTaskInfoRelationship) {
	o.ParentTaskInfo = &v
}

// GetPendingDynamicWorkflowInfo returns the PendingDynamicWorkflowInfo field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetPendingDynamicWorkflowInfo() WorkflowPendingDynamicWorkflowInfoRelationship {
	if o == nil || o.PendingDynamicWorkflowInfo == nil {
		var ret WorkflowPendingDynamicWorkflowInfoRelationship
		return ret
	}
	return *o.PendingDynamicWorkflowInfo
}

// GetPendingDynamicWorkflowInfoOk returns a tuple with the PendingDynamicWorkflowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetPendingDynamicWorkflowInfoOk() (*WorkflowPendingDynamicWorkflowInfoRelationship, bool) {
	if o == nil || o.PendingDynamicWorkflowInfo == nil {
		return nil, false
	}
	return o.PendingDynamicWorkflowInfo, true
}

// HasPendingDynamicWorkflowInfo returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasPendingDynamicWorkflowInfo() bool {
	if o != nil && o.PendingDynamicWorkflowInfo != nil {
		return true
	}

	return false
}

// SetPendingDynamicWorkflowInfo gets a reference to the given WorkflowPendingDynamicWorkflowInfoRelationship and assigns it to the PendingDynamicWorkflowInfo field.
func (o *WorkflowWorkflowInfoAllOf) SetPendingDynamicWorkflowInfo(v WorkflowPendingDynamicWorkflowInfoRelationship) {
	o.PendingDynamicWorkflowInfo = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetPermission() IamPermissionRelationship {
	if o == nil || o.Permission == nil {
		var ret IamPermissionRelationship
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetPermissionOk() (*IamPermissionRelationship, bool) {
	if o == nil || o.Permission == nil {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasPermission() bool {
	if o != nil && o.Permission != nil {
		return true
	}

	return false
}

// SetPermission gets a reference to the given IamPermissionRelationship and assigns it to the Permission field.
func (o *WorkflowWorkflowInfoAllOf) SetPermission(v IamPermissionRelationship) {
	o.Permission = &v
}

// GetTaskInfos returns the TaskInfos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowWorkflowInfoAllOf) GetTaskInfos() []WorkflowTaskInfoRelationship {
	if o == nil {
		var ret []WorkflowTaskInfoRelationship
		return ret
	}
	return o.TaskInfos
}

// GetTaskInfosOk returns a tuple with the TaskInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowWorkflowInfoAllOf) GetTaskInfosOk() (*[]WorkflowTaskInfoRelationship, bool) {
	if o == nil || o.TaskInfos == nil {
		return nil, false
	}
	return &o.TaskInfos, true
}

// HasTaskInfos returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasTaskInfos() bool {
	if o != nil && o.TaskInfos != nil {
		return true
	}

	return false
}

// SetTaskInfos gets a reference to the given []WorkflowTaskInfoRelationship and assigns it to the TaskInfos field.
func (o *WorkflowWorkflowInfoAllOf) SetTaskInfos(v []WorkflowTaskInfoRelationship) {
	o.TaskInfos = v
}

// GetWorkflowDefinition returns the WorkflowDefinition field value if set, zero value otherwise.
func (o *WorkflowWorkflowInfoAllOf) GetWorkflowDefinition() WorkflowWorkflowDefinitionRelationship {
	if o == nil || o.WorkflowDefinition == nil {
		var ret WorkflowWorkflowDefinitionRelationship
		return ret
	}
	return *o.WorkflowDefinition
}

// GetWorkflowDefinitionOk returns a tuple with the WorkflowDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowWorkflowInfoAllOf) GetWorkflowDefinitionOk() (*WorkflowWorkflowDefinitionRelationship, bool) {
	if o == nil || o.WorkflowDefinition == nil {
		return nil, false
	}
	return o.WorkflowDefinition, true
}

// HasWorkflowDefinition returns a boolean if a field has been set.
func (o *WorkflowWorkflowInfoAllOf) HasWorkflowDefinition() bool {
	if o != nil && o.WorkflowDefinition != nil {
		return true
	}

	return false
}

// SetWorkflowDefinition gets a reference to the given WorkflowWorkflowDefinitionRelationship and assigns it to the WorkflowDefinition field.
func (o *WorkflowWorkflowInfoAllOf) SetWorkflowDefinition(v WorkflowWorkflowDefinitionRelationship) {
	o.WorkflowDefinition = &v
}

func (o WorkflowWorkflowInfoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["Action"] = o.Action
	}
	if o.CleanupTime != nil {
		toSerialize["CleanupTime"] = o.CleanupTime
	}
	if o.EndTime != nil {
		toSerialize["EndTime"] = o.EndTime
	}
	if o.FailedWorkflowCleanupDuration != nil {
		toSerialize["FailedWorkflowCleanupDuration"] = o.FailedWorkflowCleanupDuration
	}
	if o.Input != nil {
		toSerialize["Input"] = o.Input
	}
	if o.InstId != nil {
		toSerialize["InstId"] = o.InstId
	}
	if o.Internal != nil {
		toSerialize["Internal"] = o.Internal
	}
	if o.LastAction != nil {
		toSerialize["LastAction"] = o.LastAction
	}
	if o.Message != nil {
		toSerialize["Message"] = o.Message
	}
	if o.MetaVersion != nil {
		toSerialize["MetaVersion"] = o.MetaVersion
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Output != nil {
		toSerialize["Output"] = o.Output
	}
	if o.PauseReason != nil {
		toSerialize["PauseReason"] = o.PauseReason
	}
	if o.Progress != nil {
		toSerialize["Progress"] = o.Progress
	}
	if o.Properties != nil {
		toSerialize["Properties"] = o.Properties
	}
	if o.RetryFromTaskName != nil {
		toSerialize["RetryFromTaskName"] = o.RetryFromTaskName
	}
	if o.Src != nil {
		toSerialize["Src"] = o.Src
	}
	if o.StartTime != nil {
		toSerialize["StartTime"] = o.StartTime
	}
	if o.Status != nil {
		toSerialize["Status"] = o.Status
	}
	if o.SuccessWorkflowCleanupDuration != nil {
		toSerialize["SuccessWorkflowCleanupDuration"] = o.SuccessWorkflowCleanupDuration
	}
	if o.TraceId != nil {
		toSerialize["TraceId"] = o.TraceId
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.UserId != nil {
		toSerialize["UserId"] = o.UserId
	}
	if o.WaitReason != nil {
		toSerialize["WaitReason"] = o.WaitReason
	}
	if o.WorkflowCtx != nil {
		toSerialize["WorkflowCtx"] = o.WorkflowCtx
	}
	if o.WorkflowMetaType != nil {
		toSerialize["WorkflowMetaType"] = o.WorkflowMetaType
	}
	if o.WorkflowTaskCount != nil {
		toSerialize["WorkflowTaskCount"] = o.WorkflowTaskCount
	}
	if o.Var0ClusterProfile != nil {
		toSerialize["_0_ClusterProfile"] = o.Var0ClusterProfile
	}
	if o.Var1SwitchProfile != nil {
		toSerialize["_1_SwitchProfile"] = o.Var1SwitchProfile
	}
	if o.Account != nil {
		toSerialize["Account"] = o.Account
	}
	if o.AssociatedObject != nil {
		toSerialize["AssociatedObject"] = o.AssociatedObject
	}
	if o.Organization != nil {
		toSerialize["Organization"] = o.Organization
	}
	if o.ParentTaskInfo != nil {
		toSerialize["ParentTaskInfo"] = o.ParentTaskInfo
	}
	if o.PendingDynamicWorkflowInfo != nil {
		toSerialize["PendingDynamicWorkflowInfo"] = o.PendingDynamicWorkflowInfo
	}
	if o.Permission != nil {
		toSerialize["Permission"] = o.Permission
	}
	if o.TaskInfos != nil {
		toSerialize["TaskInfos"] = o.TaskInfos
	}
	if o.WorkflowDefinition != nil {
		toSerialize["WorkflowDefinition"] = o.WorkflowDefinition
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *WorkflowWorkflowInfoAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varWorkflowWorkflowInfoAllOf := _WorkflowWorkflowInfoAllOf{}

	if err = json.Unmarshal(bytes, &varWorkflowWorkflowInfoAllOf); err == nil {
		*o = WorkflowWorkflowInfoAllOf(varWorkflowWorkflowInfoAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Action")
		delete(additionalProperties, "CleanupTime")
		delete(additionalProperties, "EndTime")
		delete(additionalProperties, "FailedWorkflowCleanupDuration")
		delete(additionalProperties, "Input")
		delete(additionalProperties, "InstId")
		delete(additionalProperties, "Internal")
		delete(additionalProperties, "LastAction")
		delete(additionalProperties, "Message")
		delete(additionalProperties, "MetaVersion")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Output")
		delete(additionalProperties, "PauseReason")
		delete(additionalProperties, "Progress")
		delete(additionalProperties, "Properties")
		delete(additionalProperties, "RetryFromTaskName")
		delete(additionalProperties, "Src")
		delete(additionalProperties, "StartTime")
		delete(additionalProperties, "Status")
		delete(additionalProperties, "SuccessWorkflowCleanupDuration")
		delete(additionalProperties, "TraceId")
		delete(additionalProperties, "Type")
		delete(additionalProperties, "UserId")
		delete(additionalProperties, "WaitReason")
		delete(additionalProperties, "WorkflowCtx")
		delete(additionalProperties, "WorkflowMetaType")
		delete(additionalProperties, "WorkflowTaskCount")
		delete(additionalProperties, "_0_ClusterProfile")
		delete(additionalProperties, "_1_SwitchProfile")
		delete(additionalProperties, "Account")
		delete(additionalProperties, "AssociatedObject")
		delete(additionalProperties, "Organization")
		delete(additionalProperties, "ParentTaskInfo")
		delete(additionalProperties, "PendingDynamicWorkflowInfo")
		delete(additionalProperties, "Permission")
		delete(additionalProperties, "TaskInfos")
		delete(additionalProperties, "WorkflowDefinition")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkflowWorkflowInfoAllOf struct {
	value *WorkflowWorkflowInfoAllOf
	isSet bool
}

func (v NullableWorkflowWorkflowInfoAllOf) Get() *WorkflowWorkflowInfoAllOf {
	return v.value
}

func (v *NullableWorkflowWorkflowInfoAllOf) Set(val *WorkflowWorkflowInfoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowWorkflowInfoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowWorkflowInfoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowWorkflowInfoAllOf(val *WorkflowWorkflowInfoAllOf) *NullableWorkflowWorkflowInfoAllOf {
	return &NullableWorkflowWorkflowInfoAllOf{value: val, isSet: true}
}

func (v NullableWorkflowWorkflowInfoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowWorkflowInfoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
