/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-19T15:15:17Z.
 *
 * API version: 1.0.9-1903
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// ApplianceDataExportPolicy Data Export Policy is a category-based data collection policy that enables or disables data export (data collection) from the Intersight Appliance to the Intersight. The Data Export Policy configuration is organized hierarchically as follows.   Global:      Inventory:         Network         Storage      TechSupport When the DataExportPolicy for a category is enabled/disabled, all the sub-category configurations are enabled/disabled as well. For example, if you enable/disable Inventory, all its sub-category configurations (ie. Network and Storage) are also enabled/disabled.
type ApplianceDataExportPolicy struct {
	MoBaseMo
	// Status of the data collection mode. If the value is 'true', then data collection is enabled.
	Enable *bool `json:"Enable,omitempty"`
	// Name of the Data Export Policy.
	Name         *string                                `json:"Name,omitempty"`
	Account      *IamAccountRelationship                `json:"Account,omitempty"`
	ParentConfig *ApplianceDataExportPolicyRelationship `json:"ParentConfig,omitempty"`
	// An array of relationships to applianceDataExportPolicy resources.
	SubConfigs []ApplianceDataExportPolicyRelationship `json:"SubConfigs,omitempty"`
}

// NewApplianceDataExportPolicy instantiates a new ApplianceDataExportPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplianceDataExportPolicy() *ApplianceDataExportPolicy {
	this := ApplianceDataExportPolicy{}
	return &this
}

// NewApplianceDataExportPolicyWithDefaults instantiates a new ApplianceDataExportPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplianceDataExportPolicyWithDefaults() *ApplianceDataExportPolicy {
	this := ApplianceDataExportPolicy{}
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *ApplianceDataExportPolicy) GetEnable() bool {
	if o == nil || o.Enable == nil {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDataExportPolicy) GetEnableOk() (*bool, bool) {
	if o == nil || o.Enable == nil {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *ApplianceDataExportPolicy) HasEnable() bool {
	if o != nil && o.Enable != nil {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *ApplianceDataExportPolicy) SetEnable(v bool) {
	o.Enable = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApplianceDataExportPolicy) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDataExportPolicy) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApplianceDataExportPolicy) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApplianceDataExportPolicy) SetName(v string) {
	o.Name = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *ApplianceDataExportPolicy) GetAccount() IamAccountRelationship {
	if o == nil || o.Account == nil {
		var ret IamAccountRelationship
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDataExportPolicy) GetAccountOk() (*IamAccountRelationship, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *ApplianceDataExportPolicy) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given IamAccountRelationship and assigns it to the Account field.
func (o *ApplianceDataExportPolicy) SetAccount(v IamAccountRelationship) {
	o.Account = &v
}

// GetParentConfig returns the ParentConfig field value if set, zero value otherwise.
func (o *ApplianceDataExportPolicy) GetParentConfig() ApplianceDataExportPolicyRelationship {
	if o == nil || o.ParentConfig == nil {
		var ret ApplianceDataExportPolicyRelationship
		return ret
	}
	return *o.ParentConfig
}

// GetParentConfigOk returns a tuple with the ParentConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceDataExportPolicy) GetParentConfigOk() (*ApplianceDataExportPolicyRelationship, bool) {
	if o == nil || o.ParentConfig == nil {
		return nil, false
	}
	return o.ParentConfig, true
}

// HasParentConfig returns a boolean if a field has been set.
func (o *ApplianceDataExportPolicy) HasParentConfig() bool {
	if o != nil && o.ParentConfig != nil {
		return true
	}

	return false
}

// SetParentConfig gets a reference to the given ApplianceDataExportPolicyRelationship and assigns it to the ParentConfig field.
func (o *ApplianceDataExportPolicy) SetParentConfig(v ApplianceDataExportPolicyRelationship) {
	o.ParentConfig = &v
}

// GetSubConfigs returns the SubConfigs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplianceDataExportPolicy) GetSubConfigs() []ApplianceDataExportPolicyRelationship {
	if o == nil {
		var ret []ApplianceDataExportPolicyRelationship
		return ret
	}
	return o.SubConfigs
}

// GetSubConfigsOk returns a tuple with the SubConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplianceDataExportPolicy) GetSubConfigsOk() (*[]ApplianceDataExportPolicyRelationship, bool) {
	if o == nil || o.SubConfigs == nil {
		return nil, false
	}
	return &o.SubConfigs, true
}

// HasSubConfigs returns a boolean if a field has been set.
func (o *ApplianceDataExportPolicy) HasSubConfigs() bool {
	if o != nil && o.SubConfigs != nil {
		return true
	}

	return false
}

// SetSubConfigs gets a reference to the given []ApplianceDataExportPolicyRelationship and assigns it to the SubConfigs field.
func (o *ApplianceDataExportPolicy) SetSubConfigs(v []ApplianceDataExportPolicyRelationship) {
	o.SubConfigs = v
}

func (o ApplianceDataExportPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if o.Enable != nil {
		toSerialize["Enable"] = o.Enable
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Account != nil {
		toSerialize["Account"] = o.Account
	}
	if o.ParentConfig != nil {
		toSerialize["ParentConfig"] = o.ParentConfig
	}
	if o.SubConfigs != nil {
		toSerialize["SubConfigs"] = o.SubConfigs
	}
	return json.Marshal(toSerialize)
}

type NullableApplianceDataExportPolicy struct {
	value *ApplianceDataExportPolicy
	isSet bool
}

func (v NullableApplianceDataExportPolicy) Get() *ApplianceDataExportPolicy {
	return v.value
}

func (v *NullableApplianceDataExportPolicy) Set(val *ApplianceDataExportPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableApplianceDataExportPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableApplianceDataExportPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplianceDataExportPolicy(val *ApplianceDataExportPolicy) *NullableApplianceDataExportPolicy {
	return &NullableApplianceDataExportPolicy{value: val, isSet: true}
}

func (v NullableApplianceDataExportPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplianceDataExportPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
