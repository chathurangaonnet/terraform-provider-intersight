/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-11T05:47:33Z.
 *
 * API version: 1.0.9-1999
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// IamResourceRolesAllOf Definition of the list of properties defined in 'iam.ResourceRoles', excluding properties defined in parent classes.
type IamResourceRolesAllOf struct {
	// An array of relationships to iamEndPointRole resources.
	EndPointRoles []IamEndPointRoleRelationship `json:"EndPointRoles,omitempty"`
	Permission    *IamPermissionRelationship    `json:"Permission,omitempty"`
	Resource      *MoBaseMoRelationship         `json:"Resource,omitempty"`
	// An array of relationships to iamRole resources.
	Roles                []IamRoleRelationship `json:"Roles,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IamResourceRolesAllOf IamResourceRolesAllOf

// NewIamResourceRolesAllOf instantiates a new IamResourceRolesAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamResourceRolesAllOf() *IamResourceRolesAllOf {
	this := IamResourceRolesAllOf{}
	return &this
}

// NewIamResourceRolesAllOfWithDefaults instantiates a new IamResourceRolesAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamResourceRolesAllOfWithDefaults() *IamResourceRolesAllOf {
	this := IamResourceRolesAllOf{}
	return &this
}

// GetEndPointRoles returns the EndPointRoles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamResourceRolesAllOf) GetEndPointRoles() []IamEndPointRoleRelationship {
	if o == nil {
		var ret []IamEndPointRoleRelationship
		return ret
	}
	return o.EndPointRoles
}

// GetEndPointRolesOk returns a tuple with the EndPointRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamResourceRolesAllOf) GetEndPointRolesOk() (*[]IamEndPointRoleRelationship, bool) {
	if o == nil || o.EndPointRoles == nil {
		return nil, false
	}
	return &o.EndPointRoles, true
}

// HasEndPointRoles returns a boolean if a field has been set.
func (o *IamResourceRolesAllOf) HasEndPointRoles() bool {
	if o != nil && o.EndPointRoles != nil {
		return true
	}

	return false
}

// SetEndPointRoles gets a reference to the given []IamEndPointRoleRelationship and assigns it to the EndPointRoles field.
func (o *IamResourceRolesAllOf) SetEndPointRoles(v []IamEndPointRoleRelationship) {
	o.EndPointRoles = v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *IamResourceRolesAllOf) GetPermission() IamPermissionRelationship {
	if o == nil || o.Permission == nil {
		var ret IamPermissionRelationship
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamResourceRolesAllOf) GetPermissionOk() (*IamPermissionRelationship, bool) {
	if o == nil || o.Permission == nil {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *IamResourceRolesAllOf) HasPermission() bool {
	if o != nil && o.Permission != nil {
		return true
	}

	return false
}

// SetPermission gets a reference to the given IamPermissionRelationship and assigns it to the Permission field.
func (o *IamResourceRolesAllOf) SetPermission(v IamPermissionRelationship) {
	o.Permission = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *IamResourceRolesAllOf) GetResource() MoBaseMoRelationship {
	if o == nil || o.Resource == nil {
		var ret MoBaseMoRelationship
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamResourceRolesAllOf) GetResourceOk() (*MoBaseMoRelationship, bool) {
	if o == nil || o.Resource == nil {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *IamResourceRolesAllOf) HasResource() bool {
	if o != nil && o.Resource != nil {
		return true
	}

	return false
}

// SetResource gets a reference to the given MoBaseMoRelationship and assigns it to the Resource field.
func (o *IamResourceRolesAllOf) SetResource(v MoBaseMoRelationship) {
	o.Resource = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamResourceRolesAllOf) GetRoles() []IamRoleRelationship {
	if o == nil {
		var ret []IamRoleRelationship
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamResourceRolesAllOf) GetRolesOk() (*[]IamRoleRelationship, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return &o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *IamResourceRolesAllOf) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []IamRoleRelationship and assigns it to the Roles field.
func (o *IamResourceRolesAllOf) SetRoles(v []IamRoleRelationship) {
	o.Roles = v
}

func (o IamResourceRolesAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EndPointRoles != nil {
		toSerialize["EndPointRoles"] = o.EndPointRoles
	}
	if o.Permission != nil {
		toSerialize["Permission"] = o.Permission
	}
	if o.Resource != nil {
		toSerialize["Resource"] = o.Resource
	}
	if o.Roles != nil {
		toSerialize["Roles"] = o.Roles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IamResourceRolesAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varIamResourceRolesAllOf := _IamResourceRolesAllOf{}

	if err = json.Unmarshal(bytes, &varIamResourceRolesAllOf); err == nil {
		*o = IamResourceRolesAllOf(varIamResourceRolesAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "EndPointRoles")
		delete(additionalProperties, "Permission")
		delete(additionalProperties, "Resource")
		delete(additionalProperties, "Roles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIamResourceRolesAllOf struct {
	value *IamResourceRolesAllOf
	isSet bool
}

func (v NullableIamResourceRolesAllOf) Get() *IamResourceRolesAllOf {
	return v.value
}

func (v *NullableIamResourceRolesAllOf) Set(val *IamResourceRolesAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableIamResourceRolesAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableIamResourceRolesAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamResourceRolesAllOf(val *IamResourceRolesAllOf) *NullableIamResourceRolesAllOf {
	return &NullableIamResourceRolesAllOf{value: val, isSet: true}
}

func (v NullableIamResourceRolesAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamResourceRolesAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
