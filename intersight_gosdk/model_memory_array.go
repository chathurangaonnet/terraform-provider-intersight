/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-04-12T21:47:47-07:00.
 *
 * API version: 1.0.9-1617
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// MemoryArray Holder housing multiple memory units.
type MemoryArray struct {
	EquipmentBase
	// ID of the memory array on a server.
	ArrayId *int64 `json:"ArrayId,omitempty"`
	// ID of the CPU that access this memory array.
	CpuId *int64 `json:"CpuId,omitempty"`
	// Current capacity of all the memory units on a server.
	CurrentCapacity *string `json:"CurrentCapacity,omitempty"`
	ErrorCorrection *string `json:"ErrorCorrection,omitempty"`
	// Maximum capacity of all the memory units on a server.
	MaxCapacity    *string                   `json:"MaxCapacity,omitempty"`
	MaxDevices     *string                   `json:"MaxDevices,omitempty"`
	OperPowerState *string                   `json:"OperPowerState,omitempty"`
	Presence       *string                   `json:"Presence,omitempty"`
	ComputeBoard   *ComputeBoardRelationship `json:"ComputeBoard,omitempty"`
	// An array of relationships to memoryPersistentMemoryUnit resources.
	PersistentMemoryUnits *[]MemoryPersistentMemoryUnitRelationship `json:"PersistentMemoryUnits,omitempty"`
	RegisteredDevice      *AssetDeviceRegistrationRelationship      `json:"RegisteredDevice,omitempty"`
	// An array of relationships to memoryUnit resources.
	Units *[]MemoryUnitRelationship `json:"Units,omitempty"`
}

// NewMemoryArray instantiates a new MemoryArray object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemoryArray() *MemoryArray {
	this := MemoryArray{}
	return &this
}

// NewMemoryArrayWithDefaults instantiates a new MemoryArray object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemoryArrayWithDefaults() *MemoryArray {
	this := MemoryArray{}
	return &this
}

// GetArrayId returns the ArrayId field value if set, zero value otherwise.
func (o *MemoryArray) GetArrayId() int64 {
	if o == nil || o.ArrayId == nil {
		var ret int64
		return ret
	}
	return *o.ArrayId
}

// GetArrayIdOk returns a tuple with the ArrayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryArray) GetArrayIdOk() (*int64, bool) {
	if o == nil || o.ArrayId == nil {
		return nil, false
	}
	return o.ArrayId, true
}

// HasArrayId returns a boolean if a field has been set.
func (o *MemoryArray) HasArrayId() bool {
	if o != nil && o.ArrayId != nil {
		return true
	}

	return false
}

// SetArrayId gets a reference to the given int64 and assigns it to the ArrayId field.
func (o *MemoryArray) SetArrayId(v int64) {
	o.ArrayId = &v
}

// GetCpuId returns the CpuId field value if set, zero value otherwise.
func (o *MemoryArray) GetCpuId() int64 {
	if o == nil || o.CpuId == nil {
		var ret int64
		return ret
	}
	return *o.CpuId
}

// GetCpuIdOk returns a tuple with the CpuId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryArray) GetCpuIdOk() (*int64, bool) {
	if o == nil || o.CpuId == nil {
		return nil, false
	}
	return o.CpuId, true
}

// HasCpuId returns a boolean if a field has been set.
func (o *MemoryArray) HasCpuId() bool {
	if o != nil && o.CpuId != nil {
		return true
	}

	return false
}

// SetCpuId gets a reference to the given int64 and assigns it to the CpuId field.
func (o *MemoryArray) SetCpuId(v int64) {
	o.CpuId = &v
}

// GetCurrentCapacity returns the CurrentCapacity field value if set, zero value otherwise.
func (o *MemoryArray) GetCurrentCapacity() string {
	if o == nil || o.CurrentCapacity == nil {
		var ret string
		return ret
	}
	return *o.CurrentCapacity
}

// GetCurrentCapacityOk returns a tuple with the CurrentCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryArray) GetCurrentCapacityOk() (*string, bool) {
	if o == nil || o.CurrentCapacity == nil {
		return nil, false
	}
	return o.CurrentCapacity, true
}

// HasCurrentCapacity returns a boolean if a field has been set.
func (o *MemoryArray) HasCurrentCapacity() bool {
	if o != nil && o.CurrentCapacity != nil {
		return true
	}

	return false
}

// SetCurrentCapacity gets a reference to the given string and assigns it to the CurrentCapacity field.
func (o *MemoryArray) SetCurrentCapacity(v string) {
	o.CurrentCapacity = &v
}

// GetErrorCorrection returns the ErrorCorrection field value if set, zero value otherwise.
func (o *MemoryArray) GetErrorCorrection() string {
	if o == nil || o.ErrorCorrection == nil {
		var ret string
		return ret
	}
	return *o.ErrorCorrection
}

// GetErrorCorrectionOk returns a tuple with the ErrorCorrection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryArray) GetErrorCorrectionOk() (*string, bool) {
	if o == nil || o.ErrorCorrection == nil {
		return nil, false
	}
	return o.ErrorCorrection, true
}

// HasErrorCorrection returns a boolean if a field has been set.
func (o *MemoryArray) HasErrorCorrection() bool {
	if o != nil && o.ErrorCorrection != nil {
		return true
	}

	return false
}

// SetErrorCorrection gets a reference to the given string and assigns it to the ErrorCorrection field.
func (o *MemoryArray) SetErrorCorrection(v string) {
	o.ErrorCorrection = &v
}

// GetMaxCapacity returns the MaxCapacity field value if set, zero value otherwise.
func (o *MemoryArray) GetMaxCapacity() string {
	if o == nil || o.MaxCapacity == nil {
		var ret string
		return ret
	}
	return *o.MaxCapacity
}

// GetMaxCapacityOk returns a tuple with the MaxCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryArray) GetMaxCapacityOk() (*string, bool) {
	if o == nil || o.MaxCapacity == nil {
		return nil, false
	}
	return o.MaxCapacity, true
}

// HasMaxCapacity returns a boolean if a field has been set.
func (o *MemoryArray) HasMaxCapacity() bool {
	if o != nil && o.MaxCapacity != nil {
		return true
	}

	return false
}

// SetMaxCapacity gets a reference to the given string and assigns it to the MaxCapacity field.
func (o *MemoryArray) SetMaxCapacity(v string) {
	o.MaxCapacity = &v
}

// GetMaxDevices returns the MaxDevices field value if set, zero value otherwise.
func (o *MemoryArray) GetMaxDevices() string {
	if o == nil || o.MaxDevices == nil {
		var ret string
		return ret
	}
	return *o.MaxDevices
}

// GetMaxDevicesOk returns a tuple with the MaxDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryArray) GetMaxDevicesOk() (*string, bool) {
	if o == nil || o.MaxDevices == nil {
		return nil, false
	}
	return o.MaxDevices, true
}

// HasMaxDevices returns a boolean if a field has been set.
func (o *MemoryArray) HasMaxDevices() bool {
	if o != nil && o.MaxDevices != nil {
		return true
	}

	return false
}

// SetMaxDevices gets a reference to the given string and assigns it to the MaxDevices field.
func (o *MemoryArray) SetMaxDevices(v string) {
	o.MaxDevices = &v
}

// GetOperPowerState returns the OperPowerState field value if set, zero value otherwise.
func (o *MemoryArray) GetOperPowerState() string {
	if o == nil || o.OperPowerState == nil {
		var ret string
		return ret
	}
	return *o.OperPowerState
}

// GetOperPowerStateOk returns a tuple with the OperPowerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryArray) GetOperPowerStateOk() (*string, bool) {
	if o == nil || o.OperPowerState == nil {
		return nil, false
	}
	return o.OperPowerState, true
}

// HasOperPowerState returns a boolean if a field has been set.
func (o *MemoryArray) HasOperPowerState() bool {
	if o != nil && o.OperPowerState != nil {
		return true
	}

	return false
}

// SetOperPowerState gets a reference to the given string and assigns it to the OperPowerState field.
func (o *MemoryArray) SetOperPowerState(v string) {
	o.OperPowerState = &v
}

// GetPresence returns the Presence field value if set, zero value otherwise.
func (o *MemoryArray) GetPresence() string {
	if o == nil || o.Presence == nil {
		var ret string
		return ret
	}
	return *o.Presence
}

// GetPresenceOk returns a tuple with the Presence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryArray) GetPresenceOk() (*string, bool) {
	if o == nil || o.Presence == nil {
		return nil, false
	}
	return o.Presence, true
}

// HasPresence returns a boolean if a field has been set.
func (o *MemoryArray) HasPresence() bool {
	if o != nil && o.Presence != nil {
		return true
	}

	return false
}

// SetPresence gets a reference to the given string and assigns it to the Presence field.
func (o *MemoryArray) SetPresence(v string) {
	o.Presence = &v
}

// GetComputeBoard returns the ComputeBoard field value if set, zero value otherwise.
func (o *MemoryArray) GetComputeBoard() ComputeBoardRelationship {
	if o == nil || o.ComputeBoard == nil {
		var ret ComputeBoardRelationship
		return ret
	}
	return *o.ComputeBoard
}

// GetComputeBoardOk returns a tuple with the ComputeBoard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryArray) GetComputeBoardOk() (*ComputeBoardRelationship, bool) {
	if o == nil || o.ComputeBoard == nil {
		return nil, false
	}
	return o.ComputeBoard, true
}

// HasComputeBoard returns a boolean if a field has been set.
func (o *MemoryArray) HasComputeBoard() bool {
	if o != nil && o.ComputeBoard != nil {
		return true
	}

	return false
}

// SetComputeBoard gets a reference to the given ComputeBoardRelationship and assigns it to the ComputeBoard field.
func (o *MemoryArray) SetComputeBoard(v ComputeBoardRelationship) {
	o.ComputeBoard = &v
}

// GetPersistentMemoryUnits returns the PersistentMemoryUnits field value if set, zero value otherwise.
func (o *MemoryArray) GetPersistentMemoryUnits() []MemoryPersistentMemoryUnitRelationship {
	if o == nil || o.PersistentMemoryUnits == nil {
		var ret []MemoryPersistentMemoryUnitRelationship
		return ret
	}
	return *o.PersistentMemoryUnits
}

// GetPersistentMemoryUnitsOk returns a tuple with the PersistentMemoryUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryArray) GetPersistentMemoryUnitsOk() (*[]MemoryPersistentMemoryUnitRelationship, bool) {
	if o == nil || o.PersistentMemoryUnits == nil {
		return nil, false
	}
	return o.PersistentMemoryUnits, true
}

// HasPersistentMemoryUnits returns a boolean if a field has been set.
func (o *MemoryArray) HasPersistentMemoryUnits() bool {
	if o != nil && o.PersistentMemoryUnits != nil {
		return true
	}

	return false
}

// SetPersistentMemoryUnits gets a reference to the given []MemoryPersistentMemoryUnitRelationship and assigns it to the PersistentMemoryUnits field.
func (o *MemoryArray) SetPersistentMemoryUnits(v []MemoryPersistentMemoryUnitRelationship) {
	o.PersistentMemoryUnits = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *MemoryArray) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryArray) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *MemoryArray) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *MemoryArray) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *MemoryArray) GetUnits() []MemoryUnitRelationship {
	if o == nil || o.Units == nil {
		var ret []MemoryUnitRelationship
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryArray) GetUnitsOk() (*[]MemoryUnitRelationship, bool) {
	if o == nil || o.Units == nil {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *MemoryArray) HasUnits() bool {
	if o != nil && o.Units != nil {
		return true
	}

	return false
}

// SetUnits gets a reference to the given []MemoryUnitRelationship and assigns it to the Units field.
func (o *MemoryArray) SetUnits(v []MemoryUnitRelationship) {
	o.Units = &v
}

func (o MemoryArray) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedEquipmentBase, errEquipmentBase := json.Marshal(o.EquipmentBase)
	if errEquipmentBase != nil {
		return []byte{}, errEquipmentBase
	}
	errEquipmentBase = json.Unmarshal([]byte(serializedEquipmentBase), &toSerialize)
	if errEquipmentBase != nil {
		return []byte{}, errEquipmentBase
	}
	if o.ArrayId != nil {
		toSerialize["ArrayId"] = o.ArrayId
	}
	if o.CpuId != nil {
		toSerialize["CpuId"] = o.CpuId
	}
	if o.CurrentCapacity != nil {
		toSerialize["CurrentCapacity"] = o.CurrentCapacity
	}
	if o.ErrorCorrection != nil {
		toSerialize["ErrorCorrection"] = o.ErrorCorrection
	}
	if o.MaxCapacity != nil {
		toSerialize["MaxCapacity"] = o.MaxCapacity
	}
	if o.MaxDevices != nil {
		toSerialize["MaxDevices"] = o.MaxDevices
	}
	if o.OperPowerState != nil {
		toSerialize["OperPowerState"] = o.OperPowerState
	}
	if o.Presence != nil {
		toSerialize["Presence"] = o.Presence
	}
	if o.ComputeBoard != nil {
		toSerialize["ComputeBoard"] = o.ComputeBoard
	}
	if o.PersistentMemoryUnits != nil {
		toSerialize["PersistentMemoryUnits"] = o.PersistentMemoryUnits
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}
	if o.Units != nil {
		toSerialize["Units"] = o.Units
	}
	return json.Marshal(toSerialize)
}

// AsMemoryArrayRelationship wraps this instance of MemoryArray in MemoryArrayRelationship
func (s *MemoryArray) AsMemoryArrayRelationship() MemoryArrayRelationship {
	return MemoryArrayRelationship{MemoryArrayRelationshipInterface: s}
}

type NullableMemoryArray struct {
	value *MemoryArray
	isSet bool
}

func (v NullableMemoryArray) Get() *MemoryArray {
	return v.value
}

func (v *NullableMemoryArray) Set(val *MemoryArray) {
	v.value = val
	v.isSet = true
}

func (v NullableMemoryArray) IsSet() bool {
	return v.isSet
}

func (v *NullableMemoryArray) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemoryArray(val *MemoryArray) *NullableMemoryArray {
	return &NullableMemoryArray{value: val, isSet: true}
}

func (v NullableMemoryArray) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemoryArray) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
