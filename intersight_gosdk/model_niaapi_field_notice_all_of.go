/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-13T05:58:55-07:00.
 *
 * API version: 1.0.9-1855
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// NiaapiFieldNoticeAllOf Definition of the list of properties defined in 'niaapi.FieldNotice', excluding properties defined in parent classes.
type NiaapiFieldNoticeAllOf struct {
	// Bug Id associated with this notice.
	Bugid *string `json:"Bugid,omitempty"`
	// Field notice Description.
	FieldNoticeDesc *string `json:"FieldNoticeDesc,omitempty"`
	// Fieldnotice Id of this notice.
	FieldNoticeId *string `json:"FieldNoticeId,omitempty"`
	// Field notice URL link to the notice webpage.
	FieldNoticeUrl *string `json:"FieldNoticeUrl,omitempty"`
	// The headline of this field notice.
	Headline *string `json:"Headline,omitempty"`
	// Hardware PID for affected models.
	Hwpid        *string               `json:"Hwpid,omitempty"`
	RevisionInfo *[]NiaapiRevisionInfo `json:"RevisionInfo,omitempty"`
	// Software Release number for affected versions.
	SwRelease *string `json:"SwRelease,omitempty"`
	// URL of workaround of this notice.
	WorkaroundUrl *string `json:"WorkaroundUrl,omitempty"`
}

// NewNiaapiFieldNoticeAllOf instantiates a new NiaapiFieldNoticeAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNiaapiFieldNoticeAllOf() *NiaapiFieldNoticeAllOf {
	this := NiaapiFieldNoticeAllOf{}
	return &this
}

// NewNiaapiFieldNoticeAllOfWithDefaults instantiates a new NiaapiFieldNoticeAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNiaapiFieldNoticeAllOfWithDefaults() *NiaapiFieldNoticeAllOf {
	this := NiaapiFieldNoticeAllOf{}
	return &this
}

// GetBugid returns the Bugid field value if set, zero value otherwise.
func (o *NiaapiFieldNoticeAllOf) GetBugid() string {
	if o == nil || o.Bugid == nil {
		var ret string
		return ret
	}
	return *o.Bugid
}

// GetBugidOk returns a tuple with the Bugid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiaapiFieldNoticeAllOf) GetBugidOk() (*string, bool) {
	if o == nil || o.Bugid == nil {
		return nil, false
	}
	return o.Bugid, true
}

// HasBugid returns a boolean if a field has been set.
func (o *NiaapiFieldNoticeAllOf) HasBugid() bool {
	if o != nil && o.Bugid != nil {
		return true
	}

	return false
}

// SetBugid gets a reference to the given string and assigns it to the Bugid field.
func (o *NiaapiFieldNoticeAllOf) SetBugid(v string) {
	o.Bugid = &v
}

// GetFieldNoticeDesc returns the FieldNoticeDesc field value if set, zero value otherwise.
func (o *NiaapiFieldNoticeAllOf) GetFieldNoticeDesc() string {
	if o == nil || o.FieldNoticeDesc == nil {
		var ret string
		return ret
	}
	return *o.FieldNoticeDesc
}

// GetFieldNoticeDescOk returns a tuple with the FieldNoticeDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiaapiFieldNoticeAllOf) GetFieldNoticeDescOk() (*string, bool) {
	if o == nil || o.FieldNoticeDesc == nil {
		return nil, false
	}
	return o.FieldNoticeDesc, true
}

// HasFieldNoticeDesc returns a boolean if a field has been set.
func (o *NiaapiFieldNoticeAllOf) HasFieldNoticeDesc() bool {
	if o != nil && o.FieldNoticeDesc != nil {
		return true
	}

	return false
}

// SetFieldNoticeDesc gets a reference to the given string and assigns it to the FieldNoticeDesc field.
func (o *NiaapiFieldNoticeAllOf) SetFieldNoticeDesc(v string) {
	o.FieldNoticeDesc = &v
}

// GetFieldNoticeId returns the FieldNoticeId field value if set, zero value otherwise.
func (o *NiaapiFieldNoticeAllOf) GetFieldNoticeId() string {
	if o == nil || o.FieldNoticeId == nil {
		var ret string
		return ret
	}
	return *o.FieldNoticeId
}

// GetFieldNoticeIdOk returns a tuple with the FieldNoticeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiaapiFieldNoticeAllOf) GetFieldNoticeIdOk() (*string, bool) {
	if o == nil || o.FieldNoticeId == nil {
		return nil, false
	}
	return o.FieldNoticeId, true
}

// HasFieldNoticeId returns a boolean if a field has been set.
func (o *NiaapiFieldNoticeAllOf) HasFieldNoticeId() bool {
	if o != nil && o.FieldNoticeId != nil {
		return true
	}

	return false
}

// SetFieldNoticeId gets a reference to the given string and assigns it to the FieldNoticeId field.
func (o *NiaapiFieldNoticeAllOf) SetFieldNoticeId(v string) {
	o.FieldNoticeId = &v
}

// GetFieldNoticeUrl returns the FieldNoticeUrl field value if set, zero value otherwise.
func (o *NiaapiFieldNoticeAllOf) GetFieldNoticeUrl() string {
	if o == nil || o.FieldNoticeUrl == nil {
		var ret string
		return ret
	}
	return *o.FieldNoticeUrl
}

// GetFieldNoticeUrlOk returns a tuple with the FieldNoticeUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiaapiFieldNoticeAllOf) GetFieldNoticeUrlOk() (*string, bool) {
	if o == nil || o.FieldNoticeUrl == nil {
		return nil, false
	}
	return o.FieldNoticeUrl, true
}

// HasFieldNoticeUrl returns a boolean if a field has been set.
func (o *NiaapiFieldNoticeAllOf) HasFieldNoticeUrl() bool {
	if o != nil && o.FieldNoticeUrl != nil {
		return true
	}

	return false
}

// SetFieldNoticeUrl gets a reference to the given string and assigns it to the FieldNoticeUrl field.
func (o *NiaapiFieldNoticeAllOf) SetFieldNoticeUrl(v string) {
	o.FieldNoticeUrl = &v
}

// GetHeadline returns the Headline field value if set, zero value otherwise.
func (o *NiaapiFieldNoticeAllOf) GetHeadline() string {
	if o == nil || o.Headline == nil {
		var ret string
		return ret
	}
	return *o.Headline
}

// GetHeadlineOk returns a tuple with the Headline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiaapiFieldNoticeAllOf) GetHeadlineOk() (*string, bool) {
	if o == nil || o.Headline == nil {
		return nil, false
	}
	return o.Headline, true
}

// HasHeadline returns a boolean if a field has been set.
func (o *NiaapiFieldNoticeAllOf) HasHeadline() bool {
	if o != nil && o.Headline != nil {
		return true
	}

	return false
}

// SetHeadline gets a reference to the given string and assigns it to the Headline field.
func (o *NiaapiFieldNoticeAllOf) SetHeadline(v string) {
	o.Headline = &v
}

// GetHwpid returns the Hwpid field value if set, zero value otherwise.
func (o *NiaapiFieldNoticeAllOf) GetHwpid() string {
	if o == nil || o.Hwpid == nil {
		var ret string
		return ret
	}
	return *o.Hwpid
}

// GetHwpidOk returns a tuple with the Hwpid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiaapiFieldNoticeAllOf) GetHwpidOk() (*string, bool) {
	if o == nil || o.Hwpid == nil {
		return nil, false
	}
	return o.Hwpid, true
}

// HasHwpid returns a boolean if a field has been set.
func (o *NiaapiFieldNoticeAllOf) HasHwpid() bool {
	if o != nil && o.Hwpid != nil {
		return true
	}

	return false
}

// SetHwpid gets a reference to the given string and assigns it to the Hwpid field.
func (o *NiaapiFieldNoticeAllOf) SetHwpid(v string) {
	o.Hwpid = &v
}

// GetRevisionInfo returns the RevisionInfo field value if set, zero value otherwise.
func (o *NiaapiFieldNoticeAllOf) GetRevisionInfo() []NiaapiRevisionInfo {
	if o == nil || o.RevisionInfo == nil {
		var ret []NiaapiRevisionInfo
		return ret
	}
	return *o.RevisionInfo
}

// GetRevisionInfoOk returns a tuple with the RevisionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiaapiFieldNoticeAllOf) GetRevisionInfoOk() (*[]NiaapiRevisionInfo, bool) {
	if o == nil || o.RevisionInfo == nil {
		return nil, false
	}
	return o.RevisionInfo, true
}

// HasRevisionInfo returns a boolean if a field has been set.
func (o *NiaapiFieldNoticeAllOf) HasRevisionInfo() bool {
	if o != nil && o.RevisionInfo != nil {
		return true
	}

	return false
}

// SetRevisionInfo gets a reference to the given []NiaapiRevisionInfo and assigns it to the RevisionInfo field.
func (o *NiaapiFieldNoticeAllOf) SetRevisionInfo(v []NiaapiRevisionInfo) {
	o.RevisionInfo = &v
}

// GetSwRelease returns the SwRelease field value if set, zero value otherwise.
func (o *NiaapiFieldNoticeAllOf) GetSwRelease() string {
	if o == nil || o.SwRelease == nil {
		var ret string
		return ret
	}
	return *o.SwRelease
}

// GetSwReleaseOk returns a tuple with the SwRelease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiaapiFieldNoticeAllOf) GetSwReleaseOk() (*string, bool) {
	if o == nil || o.SwRelease == nil {
		return nil, false
	}
	return o.SwRelease, true
}

// HasSwRelease returns a boolean if a field has been set.
func (o *NiaapiFieldNoticeAllOf) HasSwRelease() bool {
	if o != nil && o.SwRelease != nil {
		return true
	}

	return false
}

// SetSwRelease gets a reference to the given string and assigns it to the SwRelease field.
func (o *NiaapiFieldNoticeAllOf) SetSwRelease(v string) {
	o.SwRelease = &v
}

// GetWorkaroundUrl returns the WorkaroundUrl field value if set, zero value otherwise.
func (o *NiaapiFieldNoticeAllOf) GetWorkaroundUrl() string {
	if o == nil || o.WorkaroundUrl == nil {
		var ret string
		return ret
	}
	return *o.WorkaroundUrl
}

// GetWorkaroundUrlOk returns a tuple with the WorkaroundUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiaapiFieldNoticeAllOf) GetWorkaroundUrlOk() (*string, bool) {
	if o == nil || o.WorkaroundUrl == nil {
		return nil, false
	}
	return o.WorkaroundUrl, true
}

// HasWorkaroundUrl returns a boolean if a field has been set.
func (o *NiaapiFieldNoticeAllOf) HasWorkaroundUrl() bool {
	if o != nil && o.WorkaroundUrl != nil {
		return true
	}

	return false
}

// SetWorkaroundUrl gets a reference to the given string and assigns it to the WorkaroundUrl field.
func (o *NiaapiFieldNoticeAllOf) SetWorkaroundUrl(v string) {
	o.WorkaroundUrl = &v
}

func (o NiaapiFieldNoticeAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Bugid != nil {
		toSerialize["Bugid"] = o.Bugid
	}
	if o.FieldNoticeDesc != nil {
		toSerialize["FieldNoticeDesc"] = o.FieldNoticeDesc
	}
	if o.FieldNoticeId != nil {
		toSerialize["FieldNoticeId"] = o.FieldNoticeId
	}
	if o.FieldNoticeUrl != nil {
		toSerialize["FieldNoticeUrl"] = o.FieldNoticeUrl
	}
	if o.Headline != nil {
		toSerialize["Headline"] = o.Headline
	}
	if o.Hwpid != nil {
		toSerialize["Hwpid"] = o.Hwpid
	}
	if o.RevisionInfo != nil {
		toSerialize["RevisionInfo"] = o.RevisionInfo
	}
	if o.SwRelease != nil {
		toSerialize["SwRelease"] = o.SwRelease
	}
	if o.WorkaroundUrl != nil {
		toSerialize["WorkaroundUrl"] = o.WorkaroundUrl
	}
	return json.Marshal(toSerialize)
}

type NullableNiaapiFieldNoticeAllOf struct {
	value *NiaapiFieldNoticeAllOf
	isSet bool
}

func (v NullableNiaapiFieldNoticeAllOf) Get() *NiaapiFieldNoticeAllOf {
	return v.value
}

func (v *NullableNiaapiFieldNoticeAllOf) Set(val *NiaapiFieldNoticeAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNiaapiFieldNoticeAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNiaapiFieldNoticeAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNiaapiFieldNoticeAllOf(val *NiaapiFieldNoticeAllOf) *NullableNiaapiFieldNoticeAllOf {
	return &NullableNiaapiFieldNoticeAllOf{value: val, isSet: true}
}

func (v NullableNiaapiFieldNoticeAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNiaapiFieldNoticeAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
