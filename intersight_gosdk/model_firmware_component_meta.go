/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-17T02:04:50-07:00.
 *
 * API version: 1.0.9-1867
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// FirmwareComponentMeta Contains the details for each component in the HSU bundle catalog.
type FirmwareComponentMeta struct {
	MoBaseComplexType
	// The name of the component in the compressed HSU bundle.
	ComponentLabel *string `json:"ComponentLabel,omitempty"`
	// The type of component image within the distributable.
	ComponentType *string `json:"ComponentType,omitempty"`
	// This shows the description of component image within the distributable.
	Description *string `json:"Description,omitempty"`
	// The type of disruption on each component. For example, host reboot, automatic power cycle, and manual power cycle.
	Disruption *string `json:"Disruption,omitempty"`
	// If set, the component can be updated through out-of-band management, else, is updated through the booting host service utility.
	IsOobSupported *bool `json:"IsOobSupported,omitempty"`
	// The model of the component image in the distributable.
	Model            *string   `json:"Model,omitempty"`
	OobManageability *[]string `json:"OobManageability,omitempty"`
	// The packaged version of component image within the distributable.
	PackedVersion *string `json:"PackedVersion,omitempty"`
	// The redfish target for each component.
	RedfishUrl *string `json:"RedfishUrl,omitempty"`
	// The version of the component image in the distributable.
	Vendor               *string `json:"Vendor,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FirmwareComponentMeta FirmwareComponentMeta

// NewFirmwareComponentMeta instantiates a new FirmwareComponentMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirmwareComponentMeta() *FirmwareComponentMeta {
	this := FirmwareComponentMeta{}
	var componentType string = "ALL"
	this.ComponentType = &componentType
	var disruption string = "None"
	this.Disruption = &disruption
	return &this
}

// NewFirmwareComponentMetaWithDefaults instantiates a new FirmwareComponentMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirmwareComponentMetaWithDefaults() *FirmwareComponentMeta {
	this := FirmwareComponentMeta{}
	var componentType string = "ALL"
	this.ComponentType = &componentType
	var disruption string = "None"
	this.Disruption = &disruption
	return &this
}

// GetComponentLabel returns the ComponentLabel field value if set, zero value otherwise.
func (o *FirmwareComponentMeta) GetComponentLabel() string {
	if o == nil || o.ComponentLabel == nil {
		var ret string
		return ret
	}
	return *o.ComponentLabel
}

// GetComponentLabelOk returns a tuple with the ComponentLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareComponentMeta) GetComponentLabelOk() (*string, bool) {
	if o == nil || o.ComponentLabel == nil {
		return nil, false
	}
	return o.ComponentLabel, true
}

// HasComponentLabel returns a boolean if a field has been set.
func (o *FirmwareComponentMeta) HasComponentLabel() bool {
	if o != nil && o.ComponentLabel != nil {
		return true
	}

	return false
}

// SetComponentLabel gets a reference to the given string and assigns it to the ComponentLabel field.
func (o *FirmwareComponentMeta) SetComponentLabel(v string) {
	o.ComponentLabel = &v
}

// GetComponentType returns the ComponentType field value if set, zero value otherwise.
func (o *FirmwareComponentMeta) GetComponentType() string {
	if o == nil || o.ComponentType == nil {
		var ret string
		return ret
	}
	return *o.ComponentType
}

// GetComponentTypeOk returns a tuple with the ComponentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareComponentMeta) GetComponentTypeOk() (*string, bool) {
	if o == nil || o.ComponentType == nil {
		return nil, false
	}
	return o.ComponentType, true
}

// HasComponentType returns a boolean if a field has been set.
func (o *FirmwareComponentMeta) HasComponentType() bool {
	if o != nil && o.ComponentType != nil {
		return true
	}

	return false
}

// SetComponentType gets a reference to the given string and assigns it to the ComponentType field.
func (o *FirmwareComponentMeta) SetComponentType(v string) {
	o.ComponentType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FirmwareComponentMeta) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareComponentMeta) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FirmwareComponentMeta) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FirmwareComponentMeta) SetDescription(v string) {
	o.Description = &v
}

// GetDisruption returns the Disruption field value if set, zero value otherwise.
func (o *FirmwareComponentMeta) GetDisruption() string {
	if o == nil || o.Disruption == nil {
		var ret string
		return ret
	}
	return *o.Disruption
}

// GetDisruptionOk returns a tuple with the Disruption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareComponentMeta) GetDisruptionOk() (*string, bool) {
	if o == nil || o.Disruption == nil {
		return nil, false
	}
	return o.Disruption, true
}

// HasDisruption returns a boolean if a field has been set.
func (o *FirmwareComponentMeta) HasDisruption() bool {
	if o != nil && o.Disruption != nil {
		return true
	}

	return false
}

// SetDisruption gets a reference to the given string and assigns it to the Disruption field.
func (o *FirmwareComponentMeta) SetDisruption(v string) {
	o.Disruption = &v
}

// GetIsOobSupported returns the IsOobSupported field value if set, zero value otherwise.
func (o *FirmwareComponentMeta) GetIsOobSupported() bool {
	if o == nil || o.IsOobSupported == nil {
		var ret bool
		return ret
	}
	return *o.IsOobSupported
}

// GetIsOobSupportedOk returns a tuple with the IsOobSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareComponentMeta) GetIsOobSupportedOk() (*bool, bool) {
	if o == nil || o.IsOobSupported == nil {
		return nil, false
	}
	return o.IsOobSupported, true
}

// HasIsOobSupported returns a boolean if a field has been set.
func (o *FirmwareComponentMeta) HasIsOobSupported() bool {
	if o != nil && o.IsOobSupported != nil {
		return true
	}

	return false
}

// SetIsOobSupported gets a reference to the given bool and assigns it to the IsOobSupported field.
func (o *FirmwareComponentMeta) SetIsOobSupported(v bool) {
	o.IsOobSupported = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *FirmwareComponentMeta) GetModel() string {
	if o == nil || o.Model == nil {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareComponentMeta) GetModelOk() (*string, bool) {
	if o == nil || o.Model == nil {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *FirmwareComponentMeta) HasModel() bool {
	if o != nil && o.Model != nil {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *FirmwareComponentMeta) SetModel(v string) {
	o.Model = &v
}

// GetOobManageability returns the OobManageability field value if set, zero value otherwise.
func (o *FirmwareComponentMeta) GetOobManageability() []string {
	if o == nil || o.OobManageability == nil {
		var ret []string
		return ret
	}
	return *o.OobManageability
}

// GetOobManageabilityOk returns a tuple with the OobManageability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareComponentMeta) GetOobManageabilityOk() (*[]string, bool) {
	if o == nil || o.OobManageability == nil {
		return nil, false
	}
	return o.OobManageability, true
}

// HasOobManageability returns a boolean if a field has been set.
func (o *FirmwareComponentMeta) HasOobManageability() bool {
	if o != nil && o.OobManageability != nil {
		return true
	}

	return false
}

// SetOobManageability gets a reference to the given []string and assigns it to the OobManageability field.
func (o *FirmwareComponentMeta) SetOobManageability(v []string) {
	o.OobManageability = &v
}

// GetPackedVersion returns the PackedVersion field value if set, zero value otherwise.
func (o *FirmwareComponentMeta) GetPackedVersion() string {
	if o == nil || o.PackedVersion == nil {
		var ret string
		return ret
	}
	return *o.PackedVersion
}

// GetPackedVersionOk returns a tuple with the PackedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareComponentMeta) GetPackedVersionOk() (*string, bool) {
	if o == nil || o.PackedVersion == nil {
		return nil, false
	}
	return o.PackedVersion, true
}

// HasPackedVersion returns a boolean if a field has been set.
func (o *FirmwareComponentMeta) HasPackedVersion() bool {
	if o != nil && o.PackedVersion != nil {
		return true
	}

	return false
}

// SetPackedVersion gets a reference to the given string and assigns it to the PackedVersion field.
func (o *FirmwareComponentMeta) SetPackedVersion(v string) {
	o.PackedVersion = &v
}

// GetRedfishUrl returns the RedfishUrl field value if set, zero value otherwise.
func (o *FirmwareComponentMeta) GetRedfishUrl() string {
	if o == nil || o.RedfishUrl == nil {
		var ret string
		return ret
	}
	return *o.RedfishUrl
}

// GetRedfishUrlOk returns a tuple with the RedfishUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareComponentMeta) GetRedfishUrlOk() (*string, bool) {
	if o == nil || o.RedfishUrl == nil {
		return nil, false
	}
	return o.RedfishUrl, true
}

// HasRedfishUrl returns a boolean if a field has been set.
func (o *FirmwareComponentMeta) HasRedfishUrl() bool {
	if o != nil && o.RedfishUrl != nil {
		return true
	}

	return false
}

// SetRedfishUrl gets a reference to the given string and assigns it to the RedfishUrl field.
func (o *FirmwareComponentMeta) SetRedfishUrl(v string) {
	o.RedfishUrl = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *FirmwareComponentMeta) GetVendor() string {
	if o == nil || o.Vendor == nil {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareComponentMeta) GetVendorOk() (*string, bool) {
	if o == nil || o.Vendor == nil {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *FirmwareComponentMeta) HasVendor() bool {
	if o != nil && o.Vendor != nil {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *FirmwareComponentMeta) SetVendor(v string) {
	o.Vendor = &v
}

func (o FirmwareComponentMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseComplexType, errMoBaseComplexType := json.Marshal(o.MoBaseComplexType)
	if errMoBaseComplexType != nil {
		return []byte{}, errMoBaseComplexType
	}
	errMoBaseComplexType = json.Unmarshal([]byte(serializedMoBaseComplexType), &toSerialize)
	if errMoBaseComplexType != nil {
		return []byte{}, errMoBaseComplexType
	}
	if o.ComponentLabel != nil {
		toSerialize["ComponentLabel"] = o.ComponentLabel
	}
	if o.ComponentType != nil {
		toSerialize["ComponentType"] = o.ComponentType
	}
	if o.Description != nil {
		toSerialize["Description"] = o.Description
	}
	if o.Disruption != nil {
		toSerialize["Disruption"] = o.Disruption
	}
	if o.IsOobSupported != nil {
		toSerialize["IsOobSupported"] = o.IsOobSupported
	}
	if o.Model != nil {
		toSerialize["Model"] = o.Model
	}
	if o.OobManageability != nil {
		toSerialize["OobManageability"] = o.OobManageability
	}
	if o.PackedVersion != nil {
		toSerialize["PackedVersion"] = o.PackedVersion
	}
	if o.RedfishUrl != nil {
		toSerialize["RedfishUrl"] = o.RedfishUrl
	}
	if o.Vendor != nil {
		toSerialize["Vendor"] = o.Vendor
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *FirmwareComponentMeta) UnmarshalJSON(bytes []byte) (err error) {
	type FirmwareComponentMetaWithoutEmbeddedStruct struct {
		// The name of the component in the compressed HSU bundle.
		ComponentLabel *string `json:"ComponentLabel,omitempty"`
		// The type of component image within the distributable.
		ComponentType *string `json:"ComponentType,omitempty"`
		// This shows the description of component image within the distributable.
		Description *string `json:"Description,omitempty"`
		// The type of disruption on each component. For example, host reboot, automatic power cycle, and manual power cycle.
		Disruption *string `json:"Disruption,omitempty"`
		// If set, the component can be updated through out-of-band management, else, is updated through the booting host service utility.
		IsOobSupported *bool `json:"IsOobSupported,omitempty"`
		// The model of the component image in the distributable.
		Model            *string   `json:"Model,omitempty"`
		OobManageability *[]string `json:"OobManageability,omitempty"`
		// The packaged version of component image within the distributable.
		PackedVersion *string `json:"PackedVersion,omitempty"`
		// The redfish target for each component.
		RedfishUrl *string `json:"RedfishUrl,omitempty"`
		// The version of the component image in the distributable.
		Vendor *string `json:"Vendor,omitempty"`
	}

	varFirmwareComponentMetaWithoutEmbeddedStruct := FirmwareComponentMetaWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varFirmwareComponentMetaWithoutEmbeddedStruct)
	if err == nil {
		varFirmwareComponentMeta := _FirmwareComponentMeta{}
		varFirmwareComponentMeta.ComponentLabel = varFirmwareComponentMetaWithoutEmbeddedStruct.ComponentLabel
		varFirmwareComponentMeta.ComponentType = varFirmwareComponentMetaWithoutEmbeddedStruct.ComponentType
		varFirmwareComponentMeta.Description = varFirmwareComponentMetaWithoutEmbeddedStruct.Description
		varFirmwareComponentMeta.Disruption = varFirmwareComponentMetaWithoutEmbeddedStruct.Disruption
		varFirmwareComponentMeta.IsOobSupported = varFirmwareComponentMetaWithoutEmbeddedStruct.IsOobSupported
		varFirmwareComponentMeta.Model = varFirmwareComponentMetaWithoutEmbeddedStruct.Model
		varFirmwareComponentMeta.OobManageability = varFirmwareComponentMetaWithoutEmbeddedStruct.OobManageability
		varFirmwareComponentMeta.PackedVersion = varFirmwareComponentMetaWithoutEmbeddedStruct.PackedVersion
		varFirmwareComponentMeta.RedfishUrl = varFirmwareComponentMetaWithoutEmbeddedStruct.RedfishUrl
		varFirmwareComponentMeta.Vendor = varFirmwareComponentMetaWithoutEmbeddedStruct.Vendor
		*o = FirmwareComponentMeta(varFirmwareComponentMeta)
	} else {
		return err
	}

	varFirmwareComponentMeta := _FirmwareComponentMeta{}

	err = json.Unmarshal(bytes, &varFirmwareComponentMeta)
	if err == nil {
		o.MoBaseComplexType = varFirmwareComponentMeta.MoBaseComplexType
	} else {
		return err
	}
	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ComponentLabel")
		delete(additionalProperties, "ComponentType")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "Disruption")
		delete(additionalProperties, "IsOobSupported")
		delete(additionalProperties, "Model")
		delete(additionalProperties, "OobManageability")
		delete(additionalProperties, "PackedVersion")
		delete(additionalProperties, "RedfishUrl")
		delete(additionalProperties, "Vendor")

		// remove fields from embedded structs
		reflectMoBaseComplexType := reflect.ValueOf(o.MoBaseComplexType)
		for i := 0; i < reflectMoBaseComplexType.Type().NumField(); i++ {
			t := reflectMoBaseComplexType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFirmwareComponentMeta struct {
	value *FirmwareComponentMeta
	isSet bool
}

func (v NullableFirmwareComponentMeta) Get() *FirmwareComponentMeta {
	return v.value
}

func (v *NullableFirmwareComponentMeta) Set(val *FirmwareComponentMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableFirmwareComponentMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableFirmwareComponentMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirmwareComponentMeta(val *FirmwareComponentMeta) *NullableFirmwareComponentMeta {
	return &NullableFirmwareComponentMeta{value: val, isSet: true}
}

func (v NullableFirmwareComponentMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirmwareComponentMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
