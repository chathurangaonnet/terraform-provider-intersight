/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-13T05:58:55-07:00.
 *
 * API version: 1.0.9-1855
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// CapabilityAdapterUnitDescriptor Descriptor that uniquely identifies an adaptor.
type CapabilityAdapterUnitDescriptor struct {
	CapabilityHardwareDescriptor
	// Order in which the ports are connected; sequential or cyclic.
	ConnectivityOrder *string `json:"ConnectivityOrder,omitempty"`
	// The port speed for ethernet ports in Mbps.
	EthernetPortSpeed *int64 `json:"EthernetPortSpeed,omitempty"`
	// The port speed for fibre channel ports in Mbps.
	FibreChannelPortSpeed *int64 `json:"FibreChannelPortSpeed,omitempty"`
	// Number of Dce Ports for the adaptor.
	NumDcePorts *int64 `json:"NumDcePorts,omitempty"`
	// Prom card type for the adaptor.
	PromCardType *string `json:"PromCardType,omitempty"`
}

// NewCapabilityAdapterUnitDescriptor instantiates a new CapabilityAdapterUnitDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapabilityAdapterUnitDescriptor() *CapabilityAdapterUnitDescriptor {
	this := CapabilityAdapterUnitDescriptor{}
	return &this
}

// NewCapabilityAdapterUnitDescriptorWithDefaults instantiates a new CapabilityAdapterUnitDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapabilityAdapterUnitDescriptorWithDefaults() *CapabilityAdapterUnitDescriptor {
	this := CapabilityAdapterUnitDescriptor{}
	return &this
}

// GetConnectivityOrder returns the ConnectivityOrder field value if set, zero value otherwise.
func (o *CapabilityAdapterUnitDescriptor) GetConnectivityOrder() string {
	if o == nil || o.ConnectivityOrder == nil {
		var ret string
		return ret
	}
	return *o.ConnectivityOrder
}

// GetConnectivityOrderOk returns a tuple with the ConnectivityOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityAdapterUnitDescriptor) GetConnectivityOrderOk() (*string, bool) {
	if o == nil || o.ConnectivityOrder == nil {
		return nil, false
	}
	return o.ConnectivityOrder, true
}

// HasConnectivityOrder returns a boolean if a field has been set.
func (o *CapabilityAdapterUnitDescriptor) HasConnectivityOrder() bool {
	if o != nil && o.ConnectivityOrder != nil {
		return true
	}

	return false
}

// SetConnectivityOrder gets a reference to the given string and assigns it to the ConnectivityOrder field.
func (o *CapabilityAdapterUnitDescriptor) SetConnectivityOrder(v string) {
	o.ConnectivityOrder = &v
}

// GetEthernetPortSpeed returns the EthernetPortSpeed field value if set, zero value otherwise.
func (o *CapabilityAdapterUnitDescriptor) GetEthernetPortSpeed() int64 {
	if o == nil || o.EthernetPortSpeed == nil {
		var ret int64
		return ret
	}
	return *o.EthernetPortSpeed
}

// GetEthernetPortSpeedOk returns a tuple with the EthernetPortSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityAdapterUnitDescriptor) GetEthernetPortSpeedOk() (*int64, bool) {
	if o == nil || o.EthernetPortSpeed == nil {
		return nil, false
	}
	return o.EthernetPortSpeed, true
}

// HasEthernetPortSpeed returns a boolean if a field has been set.
func (o *CapabilityAdapterUnitDescriptor) HasEthernetPortSpeed() bool {
	if o != nil && o.EthernetPortSpeed != nil {
		return true
	}

	return false
}

// SetEthernetPortSpeed gets a reference to the given int64 and assigns it to the EthernetPortSpeed field.
func (o *CapabilityAdapterUnitDescriptor) SetEthernetPortSpeed(v int64) {
	o.EthernetPortSpeed = &v
}

// GetFibreChannelPortSpeed returns the FibreChannelPortSpeed field value if set, zero value otherwise.
func (o *CapabilityAdapterUnitDescriptor) GetFibreChannelPortSpeed() int64 {
	if o == nil || o.FibreChannelPortSpeed == nil {
		var ret int64
		return ret
	}
	return *o.FibreChannelPortSpeed
}

// GetFibreChannelPortSpeedOk returns a tuple with the FibreChannelPortSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityAdapterUnitDescriptor) GetFibreChannelPortSpeedOk() (*int64, bool) {
	if o == nil || o.FibreChannelPortSpeed == nil {
		return nil, false
	}
	return o.FibreChannelPortSpeed, true
}

// HasFibreChannelPortSpeed returns a boolean if a field has been set.
func (o *CapabilityAdapterUnitDescriptor) HasFibreChannelPortSpeed() bool {
	if o != nil && o.FibreChannelPortSpeed != nil {
		return true
	}

	return false
}

// SetFibreChannelPortSpeed gets a reference to the given int64 and assigns it to the FibreChannelPortSpeed field.
func (o *CapabilityAdapterUnitDescriptor) SetFibreChannelPortSpeed(v int64) {
	o.FibreChannelPortSpeed = &v
}

// GetNumDcePorts returns the NumDcePorts field value if set, zero value otherwise.
func (o *CapabilityAdapterUnitDescriptor) GetNumDcePorts() int64 {
	if o == nil || o.NumDcePorts == nil {
		var ret int64
		return ret
	}
	return *o.NumDcePorts
}

// GetNumDcePortsOk returns a tuple with the NumDcePorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityAdapterUnitDescriptor) GetNumDcePortsOk() (*int64, bool) {
	if o == nil || o.NumDcePorts == nil {
		return nil, false
	}
	return o.NumDcePorts, true
}

// HasNumDcePorts returns a boolean if a field has been set.
func (o *CapabilityAdapterUnitDescriptor) HasNumDcePorts() bool {
	if o != nil && o.NumDcePorts != nil {
		return true
	}

	return false
}

// SetNumDcePorts gets a reference to the given int64 and assigns it to the NumDcePorts field.
func (o *CapabilityAdapterUnitDescriptor) SetNumDcePorts(v int64) {
	o.NumDcePorts = &v
}

// GetPromCardType returns the PromCardType field value if set, zero value otherwise.
func (o *CapabilityAdapterUnitDescriptor) GetPromCardType() string {
	if o == nil || o.PromCardType == nil {
		var ret string
		return ret
	}
	return *o.PromCardType
}

// GetPromCardTypeOk returns a tuple with the PromCardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityAdapterUnitDescriptor) GetPromCardTypeOk() (*string, bool) {
	if o == nil || o.PromCardType == nil {
		return nil, false
	}
	return o.PromCardType, true
}

// HasPromCardType returns a boolean if a field has been set.
func (o *CapabilityAdapterUnitDescriptor) HasPromCardType() bool {
	if o != nil && o.PromCardType != nil {
		return true
	}

	return false
}

// SetPromCardType gets a reference to the given string and assigns it to the PromCardType field.
func (o *CapabilityAdapterUnitDescriptor) SetPromCardType(v string) {
	o.PromCardType = &v
}

func (o CapabilityAdapterUnitDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedCapabilityHardwareDescriptor, errCapabilityHardwareDescriptor := json.Marshal(o.CapabilityHardwareDescriptor)
	if errCapabilityHardwareDescriptor != nil {
		return []byte{}, errCapabilityHardwareDescriptor
	}
	errCapabilityHardwareDescriptor = json.Unmarshal([]byte(serializedCapabilityHardwareDescriptor), &toSerialize)
	if errCapabilityHardwareDescriptor != nil {
		return []byte{}, errCapabilityHardwareDescriptor
	}
	if o.ConnectivityOrder != nil {
		toSerialize["ConnectivityOrder"] = o.ConnectivityOrder
	}
	if o.EthernetPortSpeed != nil {
		toSerialize["EthernetPortSpeed"] = o.EthernetPortSpeed
	}
	if o.FibreChannelPortSpeed != nil {
		toSerialize["FibreChannelPortSpeed"] = o.FibreChannelPortSpeed
	}
	if o.NumDcePorts != nil {
		toSerialize["NumDcePorts"] = o.NumDcePorts
	}
	if o.PromCardType != nil {
		toSerialize["PromCardType"] = o.PromCardType
	}
	return json.Marshal(toSerialize)
}

type NullableCapabilityAdapterUnitDescriptor struct {
	value *CapabilityAdapterUnitDescriptor
	isSet bool
}

func (v NullableCapabilityAdapterUnitDescriptor) Get() *CapabilityAdapterUnitDescriptor {
	return v.value
}

func (v *NullableCapabilityAdapterUnitDescriptor) Set(val *CapabilityAdapterUnitDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableCapabilityAdapterUnitDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableCapabilityAdapterUnitDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapabilityAdapterUnitDescriptor(val *CapabilityAdapterUnitDescriptor) *NullableCapabilityAdapterUnitDescriptor {
	return &NullableCapabilityAdapterUnitDescriptor{value: val, isSet: true}
}

func (v NullableCapabilityAdapterUnitDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapabilityAdapterUnitDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
