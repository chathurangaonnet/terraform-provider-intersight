/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-04-12T21:47:47-07:00.
 *
 * API version: 1.0.9-1617
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// HyperflexClusterNetworkPolicyAllOf Definition of the list of properties defined in 'hyperflex.ClusterNetworkPolicy', excluding properties defined in parent classes.
type HyperflexClusterNetworkPolicyAllOf struct {
	// Enable or disable jumbo frames.
	JumboFrame     *bool                        `json:"JumboFrame,omitempty"`
	KvmIpRange     *HyperflexIpAddrRange        `json:"KvmIpRange,omitempty"`
	MacPrefixRange *HyperflexMacAddrPrefixRange `json:"MacPrefixRange,omitempty"`
	MgmtVlan       *HyperflexNamedVlan          `json:"MgmtVlan,omitempty"`
	// Link speed of the server adapter port to the upstream switch. When the policy is attached to a cluster profile with EDGE management platform, the uplink speed can be '1G' or '10G+'. Use '10G+' for link speeds of 10G or above. When the policy is attached to a cluster profile with Fabric Interconnect management platform, the uplink speed can be 'default' only.
	UplinkSpeed     *string               `json:"UplinkSpeed,omitempty"`
	VmMigrationVlan *HyperflexNamedVlan   `json:"VmMigrationVlan,omitempty"`
	VmNetworkVlans  *[]HyperflexNamedVlan `json:"VmNetworkVlans,omitempty"`
	// An array of relationships to hyperflexClusterProfile resources.
	ClusterProfiles *[]HyperflexClusterProfileRelationship `json:"ClusterProfiles,omitempty"`
	Organization    *OrganizationOrganizationRelationship  `json:"Organization,omitempty"`
}

// NewHyperflexClusterNetworkPolicyAllOf instantiates a new HyperflexClusterNetworkPolicyAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperflexClusterNetworkPolicyAllOf() *HyperflexClusterNetworkPolicyAllOf {
	this := HyperflexClusterNetworkPolicyAllOf{}
	var uplinkSpeed string = "default"
	this.UplinkSpeed = &uplinkSpeed
	return &this
}

// NewHyperflexClusterNetworkPolicyAllOfWithDefaults instantiates a new HyperflexClusterNetworkPolicyAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperflexClusterNetworkPolicyAllOfWithDefaults() *HyperflexClusterNetworkPolicyAllOf {
	this := HyperflexClusterNetworkPolicyAllOf{}
	var uplinkSpeed string = "default"
	this.UplinkSpeed = &uplinkSpeed
	return &this
}

// GetJumboFrame returns the JumboFrame field value if set, zero value otherwise.
func (o *HyperflexClusterNetworkPolicyAllOf) GetJumboFrame() bool {
	if o == nil || o.JumboFrame == nil {
		var ret bool
		return ret
	}
	return *o.JumboFrame
}

// GetJumboFrameOk returns a tuple with the JumboFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) GetJumboFrameOk() (*bool, bool) {
	if o == nil || o.JumboFrame == nil {
		return nil, false
	}
	return o.JumboFrame, true
}

// HasJumboFrame returns a boolean if a field has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) HasJumboFrame() bool {
	if o != nil && o.JumboFrame != nil {
		return true
	}

	return false
}

// SetJumboFrame gets a reference to the given bool and assigns it to the JumboFrame field.
func (o *HyperflexClusterNetworkPolicyAllOf) SetJumboFrame(v bool) {
	o.JumboFrame = &v
}

// GetKvmIpRange returns the KvmIpRange field value if set, zero value otherwise.
func (o *HyperflexClusterNetworkPolicyAllOf) GetKvmIpRange() HyperflexIpAddrRange {
	if o == nil || o.KvmIpRange == nil {
		var ret HyperflexIpAddrRange
		return ret
	}
	return *o.KvmIpRange
}

// GetKvmIpRangeOk returns a tuple with the KvmIpRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) GetKvmIpRangeOk() (*HyperflexIpAddrRange, bool) {
	if o == nil || o.KvmIpRange == nil {
		return nil, false
	}
	return o.KvmIpRange, true
}

// HasKvmIpRange returns a boolean if a field has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) HasKvmIpRange() bool {
	if o != nil && o.KvmIpRange != nil {
		return true
	}

	return false
}

// SetKvmIpRange gets a reference to the given HyperflexIpAddrRange and assigns it to the KvmIpRange field.
func (o *HyperflexClusterNetworkPolicyAllOf) SetKvmIpRange(v HyperflexIpAddrRange) {
	o.KvmIpRange = &v
}

// GetMacPrefixRange returns the MacPrefixRange field value if set, zero value otherwise.
func (o *HyperflexClusterNetworkPolicyAllOf) GetMacPrefixRange() HyperflexMacAddrPrefixRange {
	if o == nil || o.MacPrefixRange == nil {
		var ret HyperflexMacAddrPrefixRange
		return ret
	}
	return *o.MacPrefixRange
}

// GetMacPrefixRangeOk returns a tuple with the MacPrefixRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) GetMacPrefixRangeOk() (*HyperflexMacAddrPrefixRange, bool) {
	if o == nil || o.MacPrefixRange == nil {
		return nil, false
	}
	return o.MacPrefixRange, true
}

// HasMacPrefixRange returns a boolean if a field has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) HasMacPrefixRange() bool {
	if o != nil && o.MacPrefixRange != nil {
		return true
	}

	return false
}

// SetMacPrefixRange gets a reference to the given HyperflexMacAddrPrefixRange and assigns it to the MacPrefixRange field.
func (o *HyperflexClusterNetworkPolicyAllOf) SetMacPrefixRange(v HyperflexMacAddrPrefixRange) {
	o.MacPrefixRange = &v
}

// GetMgmtVlan returns the MgmtVlan field value if set, zero value otherwise.
func (o *HyperflexClusterNetworkPolicyAllOf) GetMgmtVlan() HyperflexNamedVlan {
	if o == nil || o.MgmtVlan == nil {
		var ret HyperflexNamedVlan
		return ret
	}
	return *o.MgmtVlan
}

// GetMgmtVlanOk returns a tuple with the MgmtVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) GetMgmtVlanOk() (*HyperflexNamedVlan, bool) {
	if o == nil || o.MgmtVlan == nil {
		return nil, false
	}
	return o.MgmtVlan, true
}

// HasMgmtVlan returns a boolean if a field has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) HasMgmtVlan() bool {
	if o != nil && o.MgmtVlan != nil {
		return true
	}

	return false
}

// SetMgmtVlan gets a reference to the given HyperflexNamedVlan and assigns it to the MgmtVlan field.
func (o *HyperflexClusterNetworkPolicyAllOf) SetMgmtVlan(v HyperflexNamedVlan) {
	o.MgmtVlan = &v
}

// GetUplinkSpeed returns the UplinkSpeed field value if set, zero value otherwise.
func (o *HyperflexClusterNetworkPolicyAllOf) GetUplinkSpeed() string {
	if o == nil || o.UplinkSpeed == nil {
		var ret string
		return ret
	}
	return *o.UplinkSpeed
}

// GetUplinkSpeedOk returns a tuple with the UplinkSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) GetUplinkSpeedOk() (*string, bool) {
	if o == nil || o.UplinkSpeed == nil {
		return nil, false
	}
	return o.UplinkSpeed, true
}

// HasUplinkSpeed returns a boolean if a field has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) HasUplinkSpeed() bool {
	if o != nil && o.UplinkSpeed != nil {
		return true
	}

	return false
}

// SetUplinkSpeed gets a reference to the given string and assigns it to the UplinkSpeed field.
func (o *HyperflexClusterNetworkPolicyAllOf) SetUplinkSpeed(v string) {
	o.UplinkSpeed = &v
}

// GetVmMigrationVlan returns the VmMigrationVlan field value if set, zero value otherwise.
func (o *HyperflexClusterNetworkPolicyAllOf) GetVmMigrationVlan() HyperflexNamedVlan {
	if o == nil || o.VmMigrationVlan == nil {
		var ret HyperflexNamedVlan
		return ret
	}
	return *o.VmMigrationVlan
}

// GetVmMigrationVlanOk returns a tuple with the VmMigrationVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) GetVmMigrationVlanOk() (*HyperflexNamedVlan, bool) {
	if o == nil || o.VmMigrationVlan == nil {
		return nil, false
	}
	return o.VmMigrationVlan, true
}

// HasVmMigrationVlan returns a boolean if a field has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) HasVmMigrationVlan() bool {
	if o != nil && o.VmMigrationVlan != nil {
		return true
	}

	return false
}

// SetVmMigrationVlan gets a reference to the given HyperflexNamedVlan and assigns it to the VmMigrationVlan field.
func (o *HyperflexClusterNetworkPolicyAllOf) SetVmMigrationVlan(v HyperflexNamedVlan) {
	o.VmMigrationVlan = &v
}

// GetVmNetworkVlans returns the VmNetworkVlans field value if set, zero value otherwise.
func (o *HyperflexClusterNetworkPolicyAllOf) GetVmNetworkVlans() []HyperflexNamedVlan {
	if o == nil || o.VmNetworkVlans == nil {
		var ret []HyperflexNamedVlan
		return ret
	}
	return *o.VmNetworkVlans
}

// GetVmNetworkVlansOk returns a tuple with the VmNetworkVlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) GetVmNetworkVlansOk() (*[]HyperflexNamedVlan, bool) {
	if o == nil || o.VmNetworkVlans == nil {
		return nil, false
	}
	return o.VmNetworkVlans, true
}

// HasVmNetworkVlans returns a boolean if a field has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) HasVmNetworkVlans() bool {
	if o != nil && o.VmNetworkVlans != nil {
		return true
	}

	return false
}

// SetVmNetworkVlans gets a reference to the given []HyperflexNamedVlan and assigns it to the VmNetworkVlans field.
func (o *HyperflexClusterNetworkPolicyAllOf) SetVmNetworkVlans(v []HyperflexNamedVlan) {
	o.VmNetworkVlans = &v
}

// GetClusterProfiles returns the ClusterProfiles field value if set, zero value otherwise.
func (o *HyperflexClusterNetworkPolicyAllOf) GetClusterProfiles() []HyperflexClusterProfileRelationship {
	if o == nil || o.ClusterProfiles == nil {
		var ret []HyperflexClusterProfileRelationship
		return ret
	}
	return *o.ClusterProfiles
}

// GetClusterProfilesOk returns a tuple with the ClusterProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) GetClusterProfilesOk() (*[]HyperflexClusterProfileRelationship, bool) {
	if o == nil || o.ClusterProfiles == nil {
		return nil, false
	}
	return o.ClusterProfiles, true
}

// HasClusterProfiles returns a boolean if a field has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) HasClusterProfiles() bool {
	if o != nil && o.ClusterProfiles != nil {
		return true
	}

	return false
}

// SetClusterProfiles gets a reference to the given []HyperflexClusterProfileRelationship and assigns it to the ClusterProfiles field.
func (o *HyperflexClusterNetworkPolicyAllOf) SetClusterProfiles(v []HyperflexClusterProfileRelationship) {
	o.ClusterProfiles = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *HyperflexClusterNetworkPolicyAllOf) GetOrganization() OrganizationOrganizationRelationship {
	if o == nil || o.Organization == nil {
		var ret OrganizationOrganizationRelationship
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) GetOrganizationOk() (*OrganizationOrganizationRelationship, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *HyperflexClusterNetworkPolicyAllOf) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given OrganizationOrganizationRelationship and assigns it to the Organization field.
func (o *HyperflexClusterNetworkPolicyAllOf) SetOrganization(v OrganizationOrganizationRelationship) {
	o.Organization = &v
}

func (o HyperflexClusterNetworkPolicyAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.JumboFrame != nil {
		toSerialize["JumboFrame"] = o.JumboFrame
	}
	if o.KvmIpRange != nil {
		toSerialize["KvmIpRange"] = o.KvmIpRange
	}
	if o.MacPrefixRange != nil {
		toSerialize["MacPrefixRange"] = o.MacPrefixRange
	}
	if o.MgmtVlan != nil {
		toSerialize["MgmtVlan"] = o.MgmtVlan
	}
	if o.UplinkSpeed != nil {
		toSerialize["UplinkSpeed"] = o.UplinkSpeed
	}
	if o.VmMigrationVlan != nil {
		toSerialize["VmMigrationVlan"] = o.VmMigrationVlan
	}
	if o.VmNetworkVlans != nil {
		toSerialize["VmNetworkVlans"] = o.VmNetworkVlans
	}
	if o.ClusterProfiles != nil {
		toSerialize["ClusterProfiles"] = o.ClusterProfiles
	}
	if o.Organization != nil {
		toSerialize["Organization"] = o.Organization
	}
	return json.Marshal(toSerialize)
}

type NullableHyperflexClusterNetworkPolicyAllOf struct {
	value *HyperflexClusterNetworkPolicyAllOf
	isSet bool
}

func (v NullableHyperflexClusterNetworkPolicyAllOf) Get() *HyperflexClusterNetworkPolicyAllOf {
	return v.value
}

func (v *NullableHyperflexClusterNetworkPolicyAllOf) Set(val *HyperflexClusterNetworkPolicyAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperflexClusterNetworkPolicyAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperflexClusterNetworkPolicyAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperflexClusterNetworkPolicyAllOf(val *HyperflexClusterNetworkPolicyAllOf) *NullableHyperflexClusterNetworkPolicyAllOf {
	return &NullableHyperflexClusterNetworkPolicyAllOf{value: val, isSet: true}
}

func (v NullableHyperflexClusterNetworkPolicyAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperflexClusterNetworkPolicyAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
