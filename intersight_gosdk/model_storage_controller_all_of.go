/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-04-12T21:47:47-07:00.
 *
 * API version: 1.0.9-1617
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// StorageControllerAllOf Definition of the list of properties defined in 'storage.Controller', excluding properties defined in parent classes.
type StorageControllerAllOf struct {
	ControllerFlags *string `json:"ControllerFlags,omitempty"`
	// It shows the Id of controller.
	ControllerId *string `json:"ControllerId,omitempty"`
	// It shows the current status of controller.
	ControllerStatus *string `json:"ControllerStatus,omitempty"`
	// It shows the hardware revision of controller.
	HwRevision *string `json:"HwRevision,omitempty"`
	// It shows CIMC support for out-of-band configuration of controller.
	OobInterfaceSupported *string `json:"OobInterfaceSupported,omitempty"`
	// It shows the current operational state of controller.
	OperState   *string `json:"OperState,omitempty"`
	Operability *string `json:"Operability,omitempty"`
	// It shows the current pci address of controller.
	PciAddr *string `json:"PciAddr,omitempty"`
	// It shows the pci slot name for the controller.
	PciSlot *string `json:"PciSlot,omitempty"`
	// It shows physical presence or absence of the controller on server.
	Presence *string `json:"Presence,omitempty"`
	// It shows the RAID levels supported by controller.
	RaidSupport        *string `json:"RaidSupport,omitempty"`
	RebuildRate        *string `json:"RebuildRate,omitempty"`
	SelfEncryptEnabled *string `json:"SelfEncryptEnabled,omitempty"`
	// Controller types are SAS, SATA, PCH, NVME.
	Type         *string                   `json:"Type,omitempty"`
	ComputeBoard *ComputeBoardRelationship `json:"ComputeBoard,omitempty"`
	// An array of relationships to storagePhysicalDiskExtension resources.
	PhysicalDiskExtensions *[]StoragePhysicalDiskExtensionRelationship `json:"PhysicalDiskExtensions,omitempty"`
	// An array of relationships to storagePhysicalDisk resources.
	PhysicalDisks    *[]StoragePhysicalDiskRelationship   `json:"PhysicalDisks,omitempty"`
	RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	// An array of relationships to firmwareRunningFirmware resources.
	RunningFirmware *[]FirmwareRunningFirmwareRelationship `json:"RunningFirmware,omitempty"`
	// An array of relationships to storageVirtualDriveExtension resources.
	VirtualDriveExtensions *[]StorageVirtualDriveExtensionRelationship `json:"VirtualDriveExtensions,omitempty"`
	// An array of relationships to storageVirtualDrive resources.
	VirtualDrives *[]StorageVirtualDriveRelationship `json:"VirtualDrives,omitempty"`
}

// NewStorageControllerAllOf instantiates a new StorageControllerAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageControllerAllOf() *StorageControllerAllOf {
	this := StorageControllerAllOf{}
	return &this
}

// NewStorageControllerAllOfWithDefaults instantiates a new StorageControllerAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageControllerAllOfWithDefaults() *StorageControllerAllOf {
	this := StorageControllerAllOf{}
	return &this
}

// GetControllerFlags returns the ControllerFlags field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetControllerFlags() string {
	if o == nil || o.ControllerFlags == nil {
		var ret string
		return ret
	}
	return *o.ControllerFlags
}

// GetControllerFlagsOk returns a tuple with the ControllerFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetControllerFlagsOk() (*string, bool) {
	if o == nil || o.ControllerFlags == nil {
		return nil, false
	}
	return o.ControllerFlags, true
}

// HasControllerFlags returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasControllerFlags() bool {
	if o != nil && o.ControllerFlags != nil {
		return true
	}

	return false
}

// SetControllerFlags gets a reference to the given string and assigns it to the ControllerFlags field.
func (o *StorageControllerAllOf) SetControllerFlags(v string) {
	o.ControllerFlags = &v
}

// GetControllerId returns the ControllerId field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetControllerId() string {
	if o == nil || o.ControllerId == nil {
		var ret string
		return ret
	}
	return *o.ControllerId
}

// GetControllerIdOk returns a tuple with the ControllerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetControllerIdOk() (*string, bool) {
	if o == nil || o.ControllerId == nil {
		return nil, false
	}
	return o.ControllerId, true
}

// HasControllerId returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasControllerId() bool {
	if o != nil && o.ControllerId != nil {
		return true
	}

	return false
}

// SetControllerId gets a reference to the given string and assigns it to the ControllerId field.
func (o *StorageControllerAllOf) SetControllerId(v string) {
	o.ControllerId = &v
}

// GetControllerStatus returns the ControllerStatus field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetControllerStatus() string {
	if o == nil || o.ControllerStatus == nil {
		var ret string
		return ret
	}
	return *o.ControllerStatus
}

// GetControllerStatusOk returns a tuple with the ControllerStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetControllerStatusOk() (*string, bool) {
	if o == nil || o.ControllerStatus == nil {
		return nil, false
	}
	return o.ControllerStatus, true
}

// HasControllerStatus returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasControllerStatus() bool {
	if o != nil && o.ControllerStatus != nil {
		return true
	}

	return false
}

// SetControllerStatus gets a reference to the given string and assigns it to the ControllerStatus field.
func (o *StorageControllerAllOf) SetControllerStatus(v string) {
	o.ControllerStatus = &v
}

// GetHwRevision returns the HwRevision field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetHwRevision() string {
	if o == nil || o.HwRevision == nil {
		var ret string
		return ret
	}
	return *o.HwRevision
}

// GetHwRevisionOk returns a tuple with the HwRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetHwRevisionOk() (*string, bool) {
	if o == nil || o.HwRevision == nil {
		return nil, false
	}
	return o.HwRevision, true
}

// HasHwRevision returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasHwRevision() bool {
	if o != nil && o.HwRevision != nil {
		return true
	}

	return false
}

// SetHwRevision gets a reference to the given string and assigns it to the HwRevision field.
func (o *StorageControllerAllOf) SetHwRevision(v string) {
	o.HwRevision = &v
}

// GetOobInterfaceSupported returns the OobInterfaceSupported field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetOobInterfaceSupported() string {
	if o == nil || o.OobInterfaceSupported == nil {
		var ret string
		return ret
	}
	return *o.OobInterfaceSupported
}

// GetOobInterfaceSupportedOk returns a tuple with the OobInterfaceSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetOobInterfaceSupportedOk() (*string, bool) {
	if o == nil || o.OobInterfaceSupported == nil {
		return nil, false
	}
	return o.OobInterfaceSupported, true
}

// HasOobInterfaceSupported returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasOobInterfaceSupported() bool {
	if o != nil && o.OobInterfaceSupported != nil {
		return true
	}

	return false
}

// SetOobInterfaceSupported gets a reference to the given string and assigns it to the OobInterfaceSupported field.
func (o *StorageControllerAllOf) SetOobInterfaceSupported(v string) {
	o.OobInterfaceSupported = &v
}

// GetOperState returns the OperState field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetOperState() string {
	if o == nil || o.OperState == nil {
		var ret string
		return ret
	}
	return *o.OperState
}

// GetOperStateOk returns a tuple with the OperState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetOperStateOk() (*string, bool) {
	if o == nil || o.OperState == nil {
		return nil, false
	}
	return o.OperState, true
}

// HasOperState returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasOperState() bool {
	if o != nil && o.OperState != nil {
		return true
	}

	return false
}

// SetOperState gets a reference to the given string and assigns it to the OperState field.
func (o *StorageControllerAllOf) SetOperState(v string) {
	o.OperState = &v
}

// GetOperability returns the Operability field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetOperability() string {
	if o == nil || o.Operability == nil {
		var ret string
		return ret
	}
	return *o.Operability
}

// GetOperabilityOk returns a tuple with the Operability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetOperabilityOk() (*string, bool) {
	if o == nil || o.Operability == nil {
		return nil, false
	}
	return o.Operability, true
}

// HasOperability returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasOperability() bool {
	if o != nil && o.Operability != nil {
		return true
	}

	return false
}

// SetOperability gets a reference to the given string and assigns it to the Operability field.
func (o *StorageControllerAllOf) SetOperability(v string) {
	o.Operability = &v
}

// GetPciAddr returns the PciAddr field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetPciAddr() string {
	if o == nil || o.PciAddr == nil {
		var ret string
		return ret
	}
	return *o.PciAddr
}

// GetPciAddrOk returns a tuple with the PciAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetPciAddrOk() (*string, bool) {
	if o == nil || o.PciAddr == nil {
		return nil, false
	}
	return o.PciAddr, true
}

// HasPciAddr returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasPciAddr() bool {
	if o != nil && o.PciAddr != nil {
		return true
	}

	return false
}

// SetPciAddr gets a reference to the given string and assigns it to the PciAddr field.
func (o *StorageControllerAllOf) SetPciAddr(v string) {
	o.PciAddr = &v
}

// GetPciSlot returns the PciSlot field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetPciSlot() string {
	if o == nil || o.PciSlot == nil {
		var ret string
		return ret
	}
	return *o.PciSlot
}

// GetPciSlotOk returns a tuple with the PciSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetPciSlotOk() (*string, bool) {
	if o == nil || o.PciSlot == nil {
		return nil, false
	}
	return o.PciSlot, true
}

// HasPciSlot returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasPciSlot() bool {
	if o != nil && o.PciSlot != nil {
		return true
	}

	return false
}

// SetPciSlot gets a reference to the given string and assigns it to the PciSlot field.
func (o *StorageControllerAllOf) SetPciSlot(v string) {
	o.PciSlot = &v
}

// GetPresence returns the Presence field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetPresence() string {
	if o == nil || o.Presence == nil {
		var ret string
		return ret
	}
	return *o.Presence
}

// GetPresenceOk returns a tuple with the Presence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetPresenceOk() (*string, bool) {
	if o == nil || o.Presence == nil {
		return nil, false
	}
	return o.Presence, true
}

// HasPresence returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasPresence() bool {
	if o != nil && o.Presence != nil {
		return true
	}

	return false
}

// SetPresence gets a reference to the given string and assigns it to the Presence field.
func (o *StorageControllerAllOf) SetPresence(v string) {
	o.Presence = &v
}

// GetRaidSupport returns the RaidSupport field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetRaidSupport() string {
	if o == nil || o.RaidSupport == nil {
		var ret string
		return ret
	}
	return *o.RaidSupport
}

// GetRaidSupportOk returns a tuple with the RaidSupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetRaidSupportOk() (*string, bool) {
	if o == nil || o.RaidSupport == nil {
		return nil, false
	}
	return o.RaidSupport, true
}

// HasRaidSupport returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasRaidSupport() bool {
	if o != nil && o.RaidSupport != nil {
		return true
	}

	return false
}

// SetRaidSupport gets a reference to the given string and assigns it to the RaidSupport field.
func (o *StorageControllerAllOf) SetRaidSupport(v string) {
	o.RaidSupport = &v
}

// GetRebuildRate returns the RebuildRate field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetRebuildRate() string {
	if o == nil || o.RebuildRate == nil {
		var ret string
		return ret
	}
	return *o.RebuildRate
}

// GetRebuildRateOk returns a tuple with the RebuildRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetRebuildRateOk() (*string, bool) {
	if o == nil || o.RebuildRate == nil {
		return nil, false
	}
	return o.RebuildRate, true
}

// HasRebuildRate returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasRebuildRate() bool {
	if o != nil && o.RebuildRate != nil {
		return true
	}

	return false
}

// SetRebuildRate gets a reference to the given string and assigns it to the RebuildRate field.
func (o *StorageControllerAllOf) SetRebuildRate(v string) {
	o.RebuildRate = &v
}

// GetSelfEncryptEnabled returns the SelfEncryptEnabled field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetSelfEncryptEnabled() string {
	if o == nil || o.SelfEncryptEnabled == nil {
		var ret string
		return ret
	}
	return *o.SelfEncryptEnabled
}

// GetSelfEncryptEnabledOk returns a tuple with the SelfEncryptEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetSelfEncryptEnabledOk() (*string, bool) {
	if o == nil || o.SelfEncryptEnabled == nil {
		return nil, false
	}
	return o.SelfEncryptEnabled, true
}

// HasSelfEncryptEnabled returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasSelfEncryptEnabled() bool {
	if o != nil && o.SelfEncryptEnabled != nil {
		return true
	}

	return false
}

// SetSelfEncryptEnabled gets a reference to the given string and assigns it to the SelfEncryptEnabled field.
func (o *StorageControllerAllOf) SetSelfEncryptEnabled(v string) {
	o.SelfEncryptEnabled = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StorageControllerAllOf) SetType(v string) {
	o.Type = &v
}

// GetComputeBoard returns the ComputeBoard field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetComputeBoard() ComputeBoardRelationship {
	if o == nil || o.ComputeBoard == nil {
		var ret ComputeBoardRelationship
		return ret
	}
	return *o.ComputeBoard
}

// GetComputeBoardOk returns a tuple with the ComputeBoard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetComputeBoardOk() (*ComputeBoardRelationship, bool) {
	if o == nil || o.ComputeBoard == nil {
		return nil, false
	}
	return o.ComputeBoard, true
}

// HasComputeBoard returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasComputeBoard() bool {
	if o != nil && o.ComputeBoard != nil {
		return true
	}

	return false
}

// SetComputeBoard gets a reference to the given ComputeBoardRelationship and assigns it to the ComputeBoard field.
func (o *StorageControllerAllOf) SetComputeBoard(v ComputeBoardRelationship) {
	o.ComputeBoard = &v
}

// GetPhysicalDiskExtensions returns the PhysicalDiskExtensions field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetPhysicalDiskExtensions() []StoragePhysicalDiskExtensionRelationship {
	if o == nil || o.PhysicalDiskExtensions == nil {
		var ret []StoragePhysicalDiskExtensionRelationship
		return ret
	}
	return *o.PhysicalDiskExtensions
}

// GetPhysicalDiskExtensionsOk returns a tuple with the PhysicalDiskExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetPhysicalDiskExtensionsOk() (*[]StoragePhysicalDiskExtensionRelationship, bool) {
	if o == nil || o.PhysicalDiskExtensions == nil {
		return nil, false
	}
	return o.PhysicalDiskExtensions, true
}

// HasPhysicalDiskExtensions returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasPhysicalDiskExtensions() bool {
	if o != nil && o.PhysicalDiskExtensions != nil {
		return true
	}

	return false
}

// SetPhysicalDiskExtensions gets a reference to the given []StoragePhysicalDiskExtensionRelationship and assigns it to the PhysicalDiskExtensions field.
func (o *StorageControllerAllOf) SetPhysicalDiskExtensions(v []StoragePhysicalDiskExtensionRelationship) {
	o.PhysicalDiskExtensions = &v
}

// GetPhysicalDisks returns the PhysicalDisks field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetPhysicalDisks() []StoragePhysicalDiskRelationship {
	if o == nil || o.PhysicalDisks == nil {
		var ret []StoragePhysicalDiskRelationship
		return ret
	}
	return *o.PhysicalDisks
}

// GetPhysicalDisksOk returns a tuple with the PhysicalDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetPhysicalDisksOk() (*[]StoragePhysicalDiskRelationship, bool) {
	if o == nil || o.PhysicalDisks == nil {
		return nil, false
	}
	return o.PhysicalDisks, true
}

// HasPhysicalDisks returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasPhysicalDisks() bool {
	if o != nil && o.PhysicalDisks != nil {
		return true
	}

	return false
}

// SetPhysicalDisks gets a reference to the given []StoragePhysicalDiskRelationship and assigns it to the PhysicalDisks field.
func (o *StorageControllerAllOf) SetPhysicalDisks(v []StoragePhysicalDiskRelationship) {
	o.PhysicalDisks = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *StorageControllerAllOf) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

// GetRunningFirmware returns the RunningFirmware field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetRunningFirmware() []FirmwareRunningFirmwareRelationship {
	if o == nil || o.RunningFirmware == nil {
		var ret []FirmwareRunningFirmwareRelationship
		return ret
	}
	return *o.RunningFirmware
}

// GetRunningFirmwareOk returns a tuple with the RunningFirmware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetRunningFirmwareOk() (*[]FirmwareRunningFirmwareRelationship, bool) {
	if o == nil || o.RunningFirmware == nil {
		return nil, false
	}
	return o.RunningFirmware, true
}

// HasRunningFirmware returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasRunningFirmware() bool {
	if o != nil && o.RunningFirmware != nil {
		return true
	}

	return false
}

// SetRunningFirmware gets a reference to the given []FirmwareRunningFirmwareRelationship and assigns it to the RunningFirmware field.
func (o *StorageControllerAllOf) SetRunningFirmware(v []FirmwareRunningFirmwareRelationship) {
	o.RunningFirmware = &v
}

// GetVirtualDriveExtensions returns the VirtualDriveExtensions field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetVirtualDriveExtensions() []StorageVirtualDriveExtensionRelationship {
	if o == nil || o.VirtualDriveExtensions == nil {
		var ret []StorageVirtualDriveExtensionRelationship
		return ret
	}
	return *o.VirtualDriveExtensions
}

// GetVirtualDriveExtensionsOk returns a tuple with the VirtualDriveExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetVirtualDriveExtensionsOk() (*[]StorageVirtualDriveExtensionRelationship, bool) {
	if o == nil || o.VirtualDriveExtensions == nil {
		return nil, false
	}
	return o.VirtualDriveExtensions, true
}

// HasVirtualDriveExtensions returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasVirtualDriveExtensions() bool {
	if o != nil && o.VirtualDriveExtensions != nil {
		return true
	}

	return false
}

// SetVirtualDriveExtensions gets a reference to the given []StorageVirtualDriveExtensionRelationship and assigns it to the VirtualDriveExtensions field.
func (o *StorageControllerAllOf) SetVirtualDriveExtensions(v []StorageVirtualDriveExtensionRelationship) {
	o.VirtualDriveExtensions = &v
}

// GetVirtualDrives returns the VirtualDrives field value if set, zero value otherwise.
func (o *StorageControllerAllOf) GetVirtualDrives() []StorageVirtualDriveRelationship {
	if o == nil || o.VirtualDrives == nil {
		var ret []StorageVirtualDriveRelationship
		return ret
	}
	return *o.VirtualDrives
}

// GetVirtualDrivesOk returns a tuple with the VirtualDrives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageControllerAllOf) GetVirtualDrivesOk() (*[]StorageVirtualDriveRelationship, bool) {
	if o == nil || o.VirtualDrives == nil {
		return nil, false
	}
	return o.VirtualDrives, true
}

// HasVirtualDrives returns a boolean if a field has been set.
func (o *StorageControllerAllOf) HasVirtualDrives() bool {
	if o != nil && o.VirtualDrives != nil {
		return true
	}

	return false
}

// SetVirtualDrives gets a reference to the given []StorageVirtualDriveRelationship and assigns it to the VirtualDrives field.
func (o *StorageControllerAllOf) SetVirtualDrives(v []StorageVirtualDriveRelationship) {
	o.VirtualDrives = &v
}

func (o StorageControllerAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ControllerFlags != nil {
		toSerialize["ControllerFlags"] = o.ControllerFlags
	}
	if o.ControllerId != nil {
		toSerialize["ControllerId"] = o.ControllerId
	}
	if o.ControllerStatus != nil {
		toSerialize["ControllerStatus"] = o.ControllerStatus
	}
	if o.HwRevision != nil {
		toSerialize["HwRevision"] = o.HwRevision
	}
	if o.OobInterfaceSupported != nil {
		toSerialize["OobInterfaceSupported"] = o.OobInterfaceSupported
	}
	if o.OperState != nil {
		toSerialize["OperState"] = o.OperState
	}
	if o.Operability != nil {
		toSerialize["Operability"] = o.Operability
	}
	if o.PciAddr != nil {
		toSerialize["PciAddr"] = o.PciAddr
	}
	if o.PciSlot != nil {
		toSerialize["PciSlot"] = o.PciSlot
	}
	if o.Presence != nil {
		toSerialize["Presence"] = o.Presence
	}
	if o.RaidSupport != nil {
		toSerialize["RaidSupport"] = o.RaidSupport
	}
	if o.RebuildRate != nil {
		toSerialize["RebuildRate"] = o.RebuildRate
	}
	if o.SelfEncryptEnabled != nil {
		toSerialize["SelfEncryptEnabled"] = o.SelfEncryptEnabled
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.ComputeBoard != nil {
		toSerialize["ComputeBoard"] = o.ComputeBoard
	}
	if o.PhysicalDiskExtensions != nil {
		toSerialize["PhysicalDiskExtensions"] = o.PhysicalDiskExtensions
	}
	if o.PhysicalDisks != nil {
		toSerialize["PhysicalDisks"] = o.PhysicalDisks
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}
	if o.RunningFirmware != nil {
		toSerialize["RunningFirmware"] = o.RunningFirmware
	}
	if o.VirtualDriveExtensions != nil {
		toSerialize["VirtualDriveExtensions"] = o.VirtualDriveExtensions
	}
	if o.VirtualDrives != nil {
		toSerialize["VirtualDrives"] = o.VirtualDrives
	}
	return json.Marshal(toSerialize)
}

type NullableStorageControllerAllOf struct {
	value *StorageControllerAllOf
	isSet bool
}

func (v NullableStorageControllerAllOf) Get() *StorageControllerAllOf {
	return v.value
}

func (v *NullableStorageControllerAllOf) Set(val *StorageControllerAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageControllerAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageControllerAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageControllerAllOf(val *StorageControllerAllOf) *NullableStorageControllerAllOf {
	return &NullableStorageControllerAllOf{value: val, isSet: true}
}

func (v NullableStorageControllerAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageControllerAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
