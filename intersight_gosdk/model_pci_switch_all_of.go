/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-04-12T21:47:47-07:00.
 *
 * API version: 1.0.9-1617
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
)

// PciSwitchAllOf Definition of the list of properties defined in 'pci.Switch', excluding properties defined in parent classes.
type PciSwitchAllOf struct {
	// It shows the device id of the switch.
	DeviceId *string `json:"DeviceId,omitempty"`
	// It shows the composite health of the switch.
	Health *string `json:"Health,omitempty"`
	// It shows the number of gpus and pci adapters connected the switch.
	NumOfAdaptors *string `json:"NumOfAdaptors,omitempty"`
	// It shows shows the PCI address of switch.
	PciAddress *string `json:"PciAddress,omitempty"`
	// It shows the PCI slot name for switch.
	PciSlot *string `json:"PciSlot,omitempty"`
	// It shows the model information for the switch.
	ProductName *string `json:"ProductName,omitempty"`
	// It shows the revision for the product.
	ProductRevision *string `json:"ProductRevision,omitempty"`
	// It shows the sub device id of the switch.
	SubDeviceId *string `json:"SubDeviceId,omitempty"`
	// It shows the sub vendor id of the switch.
	SubVendorId *string `json:"SubVendorId,omitempty"`
	// It shows the current temperature of the switch.
	Temperature *string `json:"Temperature,omitempty"`
	// It shows the type inforamtion of switch.
	Type *string `json:"Type,omitempty"`
	// It shows the vendor id of the switch.
	VendorId     *string                   `json:"VendorId,omitempty"`
	ComputeBoard *ComputeBoardRelationship `json:"ComputeBoard,omitempty"`
	// An array of relationships to pciLink resources.
	Links            *[]PciLinkRelationship               `json:"Links,omitempty"`
	RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
}

// NewPciSwitchAllOf instantiates a new PciSwitchAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPciSwitchAllOf() *PciSwitchAllOf {
	this := PciSwitchAllOf{}
	return &this
}

// NewPciSwitchAllOfWithDefaults instantiates a new PciSwitchAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPciSwitchAllOfWithDefaults() *PciSwitchAllOf {
	this := PciSwitchAllOf{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *PciSwitchAllOf) GetDeviceId() string {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciSwitchAllOf) GetDeviceIdOk() (*string, bool) {
	if o == nil || o.DeviceId == nil {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *PciSwitchAllOf) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *PciSwitchAllOf) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *PciSwitchAllOf) GetHealth() string {
	if o == nil || o.Health == nil {
		var ret string
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciSwitchAllOf) GetHealthOk() (*string, bool) {
	if o == nil || o.Health == nil {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *PciSwitchAllOf) HasHealth() bool {
	if o != nil && o.Health != nil {
		return true
	}

	return false
}

// SetHealth gets a reference to the given string and assigns it to the Health field.
func (o *PciSwitchAllOf) SetHealth(v string) {
	o.Health = &v
}

// GetNumOfAdaptors returns the NumOfAdaptors field value if set, zero value otherwise.
func (o *PciSwitchAllOf) GetNumOfAdaptors() string {
	if o == nil || o.NumOfAdaptors == nil {
		var ret string
		return ret
	}
	return *o.NumOfAdaptors
}

// GetNumOfAdaptorsOk returns a tuple with the NumOfAdaptors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciSwitchAllOf) GetNumOfAdaptorsOk() (*string, bool) {
	if o == nil || o.NumOfAdaptors == nil {
		return nil, false
	}
	return o.NumOfAdaptors, true
}

// HasNumOfAdaptors returns a boolean if a field has been set.
func (o *PciSwitchAllOf) HasNumOfAdaptors() bool {
	if o != nil && o.NumOfAdaptors != nil {
		return true
	}

	return false
}

// SetNumOfAdaptors gets a reference to the given string and assigns it to the NumOfAdaptors field.
func (o *PciSwitchAllOf) SetNumOfAdaptors(v string) {
	o.NumOfAdaptors = &v
}

// GetPciAddress returns the PciAddress field value if set, zero value otherwise.
func (o *PciSwitchAllOf) GetPciAddress() string {
	if o == nil || o.PciAddress == nil {
		var ret string
		return ret
	}
	return *o.PciAddress
}

// GetPciAddressOk returns a tuple with the PciAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciSwitchAllOf) GetPciAddressOk() (*string, bool) {
	if o == nil || o.PciAddress == nil {
		return nil, false
	}
	return o.PciAddress, true
}

// HasPciAddress returns a boolean if a field has been set.
func (o *PciSwitchAllOf) HasPciAddress() bool {
	if o != nil && o.PciAddress != nil {
		return true
	}

	return false
}

// SetPciAddress gets a reference to the given string and assigns it to the PciAddress field.
func (o *PciSwitchAllOf) SetPciAddress(v string) {
	o.PciAddress = &v
}

// GetPciSlot returns the PciSlot field value if set, zero value otherwise.
func (o *PciSwitchAllOf) GetPciSlot() string {
	if o == nil || o.PciSlot == nil {
		var ret string
		return ret
	}
	return *o.PciSlot
}

// GetPciSlotOk returns a tuple with the PciSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciSwitchAllOf) GetPciSlotOk() (*string, bool) {
	if o == nil || o.PciSlot == nil {
		return nil, false
	}
	return o.PciSlot, true
}

// HasPciSlot returns a boolean if a field has been set.
func (o *PciSwitchAllOf) HasPciSlot() bool {
	if o != nil && o.PciSlot != nil {
		return true
	}

	return false
}

// SetPciSlot gets a reference to the given string and assigns it to the PciSlot field.
func (o *PciSwitchAllOf) SetPciSlot(v string) {
	o.PciSlot = &v
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *PciSwitchAllOf) GetProductName() string {
	if o == nil || o.ProductName == nil {
		var ret string
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciSwitchAllOf) GetProductNameOk() (*string, bool) {
	if o == nil || o.ProductName == nil {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *PciSwitchAllOf) HasProductName() bool {
	if o != nil && o.ProductName != nil {
		return true
	}

	return false
}

// SetProductName gets a reference to the given string and assigns it to the ProductName field.
func (o *PciSwitchAllOf) SetProductName(v string) {
	o.ProductName = &v
}

// GetProductRevision returns the ProductRevision field value if set, zero value otherwise.
func (o *PciSwitchAllOf) GetProductRevision() string {
	if o == nil || o.ProductRevision == nil {
		var ret string
		return ret
	}
	return *o.ProductRevision
}

// GetProductRevisionOk returns a tuple with the ProductRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciSwitchAllOf) GetProductRevisionOk() (*string, bool) {
	if o == nil || o.ProductRevision == nil {
		return nil, false
	}
	return o.ProductRevision, true
}

// HasProductRevision returns a boolean if a field has been set.
func (o *PciSwitchAllOf) HasProductRevision() bool {
	if o != nil && o.ProductRevision != nil {
		return true
	}

	return false
}

// SetProductRevision gets a reference to the given string and assigns it to the ProductRevision field.
func (o *PciSwitchAllOf) SetProductRevision(v string) {
	o.ProductRevision = &v
}

// GetSubDeviceId returns the SubDeviceId field value if set, zero value otherwise.
func (o *PciSwitchAllOf) GetSubDeviceId() string {
	if o == nil || o.SubDeviceId == nil {
		var ret string
		return ret
	}
	return *o.SubDeviceId
}

// GetSubDeviceIdOk returns a tuple with the SubDeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciSwitchAllOf) GetSubDeviceIdOk() (*string, bool) {
	if o == nil || o.SubDeviceId == nil {
		return nil, false
	}
	return o.SubDeviceId, true
}

// HasSubDeviceId returns a boolean if a field has been set.
func (o *PciSwitchAllOf) HasSubDeviceId() bool {
	if o != nil && o.SubDeviceId != nil {
		return true
	}

	return false
}

// SetSubDeviceId gets a reference to the given string and assigns it to the SubDeviceId field.
func (o *PciSwitchAllOf) SetSubDeviceId(v string) {
	o.SubDeviceId = &v
}

// GetSubVendorId returns the SubVendorId field value if set, zero value otherwise.
func (o *PciSwitchAllOf) GetSubVendorId() string {
	if o == nil || o.SubVendorId == nil {
		var ret string
		return ret
	}
	return *o.SubVendorId
}

// GetSubVendorIdOk returns a tuple with the SubVendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciSwitchAllOf) GetSubVendorIdOk() (*string, bool) {
	if o == nil || o.SubVendorId == nil {
		return nil, false
	}
	return o.SubVendorId, true
}

// HasSubVendorId returns a boolean if a field has been set.
func (o *PciSwitchAllOf) HasSubVendorId() bool {
	if o != nil && o.SubVendorId != nil {
		return true
	}

	return false
}

// SetSubVendorId gets a reference to the given string and assigns it to the SubVendorId field.
func (o *PciSwitchAllOf) SetSubVendorId(v string) {
	o.SubVendorId = &v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *PciSwitchAllOf) GetTemperature() string {
	if o == nil || o.Temperature == nil {
		var ret string
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciSwitchAllOf) GetTemperatureOk() (*string, bool) {
	if o == nil || o.Temperature == nil {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *PciSwitchAllOf) HasTemperature() bool {
	if o != nil && o.Temperature != nil {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given string and assigns it to the Temperature field.
func (o *PciSwitchAllOf) SetTemperature(v string) {
	o.Temperature = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PciSwitchAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciSwitchAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PciSwitchAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PciSwitchAllOf) SetType(v string) {
	o.Type = &v
}

// GetVendorId returns the VendorId field value if set, zero value otherwise.
func (o *PciSwitchAllOf) GetVendorId() string {
	if o == nil || o.VendorId == nil {
		var ret string
		return ret
	}
	return *o.VendorId
}

// GetVendorIdOk returns a tuple with the VendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciSwitchAllOf) GetVendorIdOk() (*string, bool) {
	if o == nil || o.VendorId == nil {
		return nil, false
	}
	return o.VendorId, true
}

// HasVendorId returns a boolean if a field has been set.
func (o *PciSwitchAllOf) HasVendorId() bool {
	if o != nil && o.VendorId != nil {
		return true
	}

	return false
}

// SetVendorId gets a reference to the given string and assigns it to the VendorId field.
func (o *PciSwitchAllOf) SetVendorId(v string) {
	o.VendorId = &v
}

// GetComputeBoard returns the ComputeBoard field value if set, zero value otherwise.
func (o *PciSwitchAllOf) GetComputeBoard() ComputeBoardRelationship {
	if o == nil || o.ComputeBoard == nil {
		var ret ComputeBoardRelationship
		return ret
	}
	return *o.ComputeBoard
}

// GetComputeBoardOk returns a tuple with the ComputeBoard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciSwitchAllOf) GetComputeBoardOk() (*ComputeBoardRelationship, bool) {
	if o == nil || o.ComputeBoard == nil {
		return nil, false
	}
	return o.ComputeBoard, true
}

// HasComputeBoard returns a boolean if a field has been set.
func (o *PciSwitchAllOf) HasComputeBoard() bool {
	if o != nil && o.ComputeBoard != nil {
		return true
	}

	return false
}

// SetComputeBoard gets a reference to the given ComputeBoardRelationship and assigns it to the ComputeBoard field.
func (o *PciSwitchAllOf) SetComputeBoard(v ComputeBoardRelationship) {
	o.ComputeBoard = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *PciSwitchAllOf) GetLinks() []PciLinkRelationship {
	if o == nil || o.Links == nil {
		var ret []PciLinkRelationship
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciSwitchAllOf) GetLinksOk() (*[]PciLinkRelationship, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *PciSwitchAllOf) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []PciLinkRelationship and assigns it to the Links field.
func (o *PciSwitchAllOf) SetLinks(v []PciLinkRelationship) {
	o.Links = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *PciSwitchAllOf) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PciSwitchAllOf) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *PciSwitchAllOf) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *PciSwitchAllOf) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

func (o PciSwitchAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceId != nil {
		toSerialize["DeviceId"] = o.DeviceId
	}
	if o.Health != nil {
		toSerialize["Health"] = o.Health
	}
	if o.NumOfAdaptors != nil {
		toSerialize["NumOfAdaptors"] = o.NumOfAdaptors
	}
	if o.PciAddress != nil {
		toSerialize["PciAddress"] = o.PciAddress
	}
	if o.PciSlot != nil {
		toSerialize["PciSlot"] = o.PciSlot
	}
	if o.ProductName != nil {
		toSerialize["ProductName"] = o.ProductName
	}
	if o.ProductRevision != nil {
		toSerialize["ProductRevision"] = o.ProductRevision
	}
	if o.SubDeviceId != nil {
		toSerialize["SubDeviceId"] = o.SubDeviceId
	}
	if o.SubVendorId != nil {
		toSerialize["SubVendorId"] = o.SubVendorId
	}
	if o.Temperature != nil {
		toSerialize["Temperature"] = o.Temperature
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.VendorId != nil {
		toSerialize["VendorId"] = o.VendorId
	}
	if o.ComputeBoard != nil {
		toSerialize["ComputeBoard"] = o.ComputeBoard
	}
	if o.Links != nil {
		toSerialize["Links"] = o.Links
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}
	return json.Marshal(toSerialize)
}

type NullablePciSwitchAllOf struct {
	value *PciSwitchAllOf
	isSet bool
}

func (v NullablePciSwitchAllOf) Get() *PciSwitchAllOf {
	return v.value
}

func (v *NullablePciSwitchAllOf) Set(val *PciSwitchAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePciSwitchAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePciSwitchAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePciSwitchAllOf(val *PciSwitchAllOf) *NullablePciSwitchAllOf {
	return &NullablePciSwitchAllOf{value: val, isSet: true}
}

func (v NullablePciSwitchAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePciSwitchAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
